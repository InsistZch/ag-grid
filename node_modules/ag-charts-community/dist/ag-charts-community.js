/**
          * ag-charts-community - Advanced Charting / Charts supporting Javascript / Typescript / React / Angular / Vue * @version v7.0.0
          * @link https://www.ag-grid.com/
          * @license MIT
          */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.agCharts = {}));
})(this, (function (exports) { 'use strict';

    /**
     * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7
     */
    var __FORCE_MODULE_DETECTION = 0;

    var __extends$_ = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var t0 = new Date();
    var t1 = new Date();
    /**
     * The interval methods don't mutate Date parameters.
     */
    var TimeInterval = /** @class */ (function () {
        function TimeInterval(floor, offset) {
            this._floor = floor;
            this._offset = offset;
        }
        /**
         * Returns a new date representing the latest interval boundary date before or equal to date.
         * For example, `day.floor(date)` typically returns 12:00 AM local time on the given date.
         * @param date
         */
        TimeInterval.prototype.floor = function (date) {
            date = new Date(+date);
            this._floor(date);
            return date;
        };
        /**
         * Returns a new date representing the earliest interval boundary date after or equal to date.
         * @param date
         */
        TimeInterval.prototype.ceil = function (date) {
            date = new Date(+date - 1);
            this._floor(date);
            this._offset(date, 1);
            this._floor(date);
            return date;
        };
        /**
         * Returns a new date representing the closest interval boundary date to date.
         * @param date
         */
        TimeInterval.prototype.round = function (date) {
            var d0 = this.floor(date);
            var d1 = this.ceil(date);
            var ms = +date;
            return ms - d0.getTime() < d1.getTime() - ms ? d0 : d1;
        };
        /**
         * Returns a new date equal to date plus step intervals.
         * @param date
         * @param step
         */
        TimeInterval.prototype.offset = function (date, step) {
            if (step === void 0) { step = 1; }
            date = new Date(+date);
            this._offset(date, Math.floor(step));
            return date;
        };
        /**
         * Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive).
         * @param start
         * @param stop
         * @param step
         */
        TimeInterval.prototype.range = function (start, stop, step) {
            if (step === void 0) { step = 1; }
            var range = [];
            start = this.ceil(start);
            step = Math.floor(step);
            if (start > stop || step <= 0) {
                return range;
            }
            var previous;
            do {
                previous = new Date(+start);
                range.push(previous);
                this._offset(start, step);
                this._floor(start);
            } while (previous < start && start < stop);
            return range;
        };
        // Returns an interval that is a subset of this interval.
        // For example, to create an interval that return 1st, 11th, 21st and 31st of each month:
        // day.filter(date => (date.getDate() - 1) % 10 === 0)
        TimeInterval.prototype.filter = function (test) {
            var _this = this;
            var floor = function (date) {
                if (date >= date) {
                    _this._floor(date);
                    while (!test(date)) {
                        date.setTime(date.getTime() - 1);
                        _this._floor(date);
                    }
                }
                return date;
            };
            var offset = function (date, step) {
                if (date >= date) {
                    if (step < 0) {
                        while (++step <= 0) {
                            do {
                                _this._offset(date, -1);
                            } while (!test(date));
                        }
                    }
                    else {
                        while (--step >= 0) {
                            do {
                                _this._offset(date, 1);
                            } while (!test(date));
                        }
                    }
                }
                return date;
            };
            return new TimeInterval(floor, offset);
        };
        return TimeInterval;
    }());
    var CountableTimeInterval = /** @class */ (function (_super) {
        __extends$_(CountableTimeInterval, _super);
        function CountableTimeInterval(floor, offset, count, field) {
            var _this = _super.call(this, floor, offset) || this;
            _this._count = count;
            _this._field = field;
            return _this;
        }
        /**
         * Returns the number of interval boundaries after start (exclusive) and before or equal to end (inclusive).
         * @param start
         * @param end
         */
        CountableTimeInterval.prototype.count = function (start, end) {
            t0.setTime(+start);
            t1.setTime(+end);
            this._floor(t0);
            this._floor(t1);
            return Math.floor(this._count(t0, t1));
        };
        /**
         * Returns a filtered view of this interval representing every step'th date.
         * The meaning of step is dependent on this interval’s parent interval as defined by the `field` function.
         * @param step
         */
        CountableTimeInterval.prototype.every = function (step) {
            var _this = this;
            var result;
            step = Math.floor(step);
            if (isFinite(step) && step > 0) {
                if (step > 1) {
                    var field_1 = this._field;
                    if (field_1) {
                        result = this.filter(function (d) { return field_1(d) % step === 0; });
                    }
                    else {
                        result = this.filter(function (d) { return _this.count(0, d) % step === 0; });
                    }
                }
                else {
                    result = this;
                }
            }
            return result;
        };
        return CountableTimeInterval;
    }(TimeInterval));

    function floor$b(date) {
        return date;
    }
    function offset$b(date, milliseconds) {
        date.setTime(date.getTime() + milliseconds);
    }
    function count$b(start, end) {
        return end.getTime() - start.getTime();
    }
    var millisecond = new CountableTimeInterval(floor$b, offset$b, count$b);

    // Common time unit sizes in milliseconds.
    var epochYear = new Date(0).getFullYear();
    var durationSecond = 1000;
    var durationMinute = durationSecond * 60;
    var durationHour = durationMinute * 60;
    var durationDay = durationHour * 24;
    var durationWeek = durationDay * 7;
    var durationMonth = durationDay * 30;
    var durationYear = durationDay * 365;

    function floor$a(date) {
        date.setTime(date.getTime() - date.getMilliseconds());
    }
    function offset$a(date, seconds) {
        date.setTime(date.getTime() + seconds * durationSecond);
    }
    function count$a(start, end) {
        return (end.getTime() - start.getTime()) / durationSecond;
    }
    var second = new CountableTimeInterval(floor$a, offset$a, count$a);

    function floor$9(date) {
        date.setTime(date.getTime() - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }
    function offset$9(date, minutes) {
        date.setTime(date.getTime() + minutes * durationMinute);
    }
    function count$9(start, end) {
        return (end.getTime() - start.getTime()) / durationMinute;
    }
    function field$9(date) {
        return Math.floor(date.getTime() / durationMinute);
    }
    var minute = new CountableTimeInterval(floor$9, offset$9, count$9, field$9);

    function floor$8(date) {
        date.setTime(date.getTime() -
            date.getMilliseconds() -
            date.getSeconds() * durationSecond -
            date.getMinutes() * durationMinute);
    }
    function offset$8(date, hours) {
        date.setTime(date.getTime() + hours * durationHour);
    }
    function count$8(start, end) {
        return (end.getTime() - start.getTime()) / durationHour;
    }
    function field$8(date) {
        return Math.floor(date.getTime() / durationHour);
    }
    var hour = new CountableTimeInterval(floor$8, offset$8, count$8, field$8);

    function floor$7(date) {
        date.setHours(0, 0, 0, 0);
    }
    function offset$7(date, days) {
        date.setDate(date.getDate() + days);
    }
    function count$7(start, end) {
        var tzMinuteDelta = end.getTimezoneOffset() - start.getTimezoneOffset();
        return (end.getTime() - start.getTime() - tzMinuteDelta * durationMinute) / durationDay;
    }
    function field$7(date) {
        return Math.floor(date.getTime() / durationDay);
    }
    var day = new CountableTimeInterval(floor$7, offset$7, count$7, field$7);

    // Set date to n-th day of the week.
    function weekday(n) {
        // Sets the `date` to the start of the `n`-th day of the current week.
        // n == 0 is Sunday.
        function floor(date) {
            //                  1..31            1..7
            date.setDate(date.getDate() - ((date.getDay() + 7 - n) % 7));
            date.setHours(0, 0, 0, 0); // h, m, s, ms
        }
        // Offset the date by the given number of weeks.
        function offset(date, weeks) {
            date.setDate(date.getDate() + weeks * 7);
        }
        // Count the number of weeks between the start and end dates.
        function count(start, end) {
            var msDelta = end.getTime() - start.getTime();
            var tzMinuteDelta = end.getTimezoneOffset() - start.getTimezoneOffset();
            return (msDelta - tzMinuteDelta * durationMinute) / durationWeek;
        }
        return new CountableTimeInterval(floor, offset, count);
    }
    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    function floor$6(date) {
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
    }
    function offset$6(date, months) {
        date.setMonth(date.getMonth() + months);
    }
    function count$6(start, end) {
        return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }
    function field$6(date) {
        var yearsSinceEpoch = date.getFullYear() - epochYear;
        var monthsSinceEpoch = yearsSinceEpoch * 12 + date.getMonth();
        return monthsSinceEpoch;
    }
    var month = new CountableTimeInterval(floor$6, offset$6, count$6, field$6);

    function floor$5(date) {
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }
    function offset$5(date, years) {
        date.setFullYear(date.getFullYear() + years);
    }
    function count$5(start, end) {
        return end.getFullYear() - start.getFullYear();
    }
    function field$5(date) {
        return date.getFullYear() - epochYear;
    }
    var year = new CountableTimeInterval(floor$5, offset$5, count$5, field$5);

    function floor$4(date) {
        date.setUTCSeconds(0, 0);
    }
    function offset$4(date, minutes) {
        date.setTime(date.getTime() + minutes * durationMinute);
    }
    function count$4(start, end) {
        return (end.getTime() - start.getTime()) / durationMinute;
    }
    function field$4(date) {
        return date.getUTCMinutes();
    }
    var utcMinute = new CountableTimeInterval(floor$4, offset$4, count$4, field$4);

    function floor$3(date) {
        date.setUTCMinutes(0, 0, 0);
    }
    function offset$3(date, hours) {
        date.setTime(date.getTime() + hours * durationHour);
    }
    function count$3(start, end) {
        return (end.getTime() - start.getTime()) / durationHour;
    }
    function field$3(date) {
        return date.getUTCHours();
    }
    var utcHour = new CountableTimeInterval(floor$3, offset$3, count$3, field$3);

    function floor$2(date) {
        date.setUTCHours(0, 0, 0, 0);
    }
    function offset$2(date, days) {
        date.setUTCDate(date.getUTCDate() + days);
    }
    function count$2(start, end) {
        return (end.getTime() - start.getTime()) / durationDay;
    }
    function field$2(date) {
        return date.getUTCDate() - 1;
    }
    var utcDay = new CountableTimeInterval(floor$2, offset$2, count$2, field$2);

    function floor$1(date) {
        date.setUTCDate(1);
        date.setUTCHours(0, 0, 0, 0);
    }
    function offset$1(date, months) {
        date.setUTCMonth(date.getUTCMonth() + months);
    }
    function count$1(start, end) {
        return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }
    function field$1(date) {
        return date.getUTCMonth();
    }
    var utcMonth = new CountableTimeInterval(floor$1, offset$1, count$1, field$1);

    function floor(date) {
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }
    function offset(date, years) {
        date.setUTCFullYear(date.getUTCFullYear() + years);
    }
    function count(start, end) {
        return end.getUTCFullYear() - start.getUTCFullYear();
    }
    function field(date) {
        return date.getUTCFullYear();
    }
    var utcYear = new CountableTimeInterval(floor, offset, count, field);

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        millisecond: millisecond,
        second: second,
        minute: minute,
        hour: hour,
        day: day,
        sunday: sunday,
        monday: monday,
        tuesday: tuesday,
        wednesday: wednesday,
        thursday: thursday,
        friday: friday,
        saturday: saturday,
        month: month,
        year: year,
        utcMinute: utcMinute,
        utcHour: utcHour,
        utcDay: utcDay,
        utcMonth: utcMonth,
        utcYear: utcYear
    });

    var MOBILE = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];
    function isDesktop() {
        var userAgent = navigator.userAgent;
        if (MOBILE.some(function (r) { return r.test(userAgent); })) {
            return false;
        }
        return true;
    }

    /**
     * Wraps the native Canvas element and overrides its CanvasRenderingContext2D to
     * provide resolution independent rendering based on `window.devicePixelRatio`.
     */
    var HdpiCanvas = /** @class */ (function () {
        // The width/height attributes of the Canvas element default to
        // 300/150 according to w3.org.
        function HdpiCanvas(_a) {
            var _b = _a.document, document = _b === void 0 ? window.document : _b, _c = _a.width, width = _c === void 0 ? 600 : _c, _d = _a.height, height = _d === void 0 ? 300 : _d, _e = _a.domLayer, domLayer = _e === void 0 ? false : _e, _f = _a.zIndex, zIndex = _f === void 0 ? 0 : _f, _g = _a.name, name = _g === void 0 ? undefined : _g, _h = _a.overrideDevicePixelRatio, overrideDevicePixelRatio = _h === void 0 ? undefined : _h;
            this._container = undefined;
            this._enabled = true;
            // `NaN` is deliberate here, so that overrides are always applied
            // and the `resetTransform` inside the `resize` method works in IE11.
            this._pixelRatio = NaN;
            this._width = 0;
            this._height = 0;
            this.document = document;
            // Create canvas and immediately apply width + height to avoid out-of-memory
            // errors on iOS/iPadOS Safari.
            this.element = document.createElement('canvas');
            this.element.width = width;
            this.element.height = height;
            this.context = this.element.getContext('2d');
            this.imageSource = this.context.canvas;
            var style = this.element.style;
            style.userSelect = 'none';
            style.display = 'block';
            if (domLayer) {
                style.position = 'absolute';
                style.zIndex = String(zIndex);
                style.top = '0';
                style.left = '0';
                style.pointerEvents = 'none';
                style.opacity = "1";
                if (name) {
                    this.element.id = name;
                }
            }
            this.setPixelRatio(overrideDevicePixelRatio);
            this.resize(width, height);
        }
        Object.defineProperty(HdpiCanvas.prototype, "container", {
            get: function () {
                return this._container;
            },
            set: function (value) {
                if (this._container !== value) {
                    this.remove();
                    if (value) {
                        value.appendChild(this.element);
                    }
                    this._container = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HdpiCanvas.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            set: function (value) {
                this.element.style.display = value ? 'block' : 'none';
                this._enabled = !!value;
            },
            enumerable: false,
            configurable: true
        });
        HdpiCanvas.prototype.remove = function () {
            var parentNode = this.element.parentNode;
            if (parentNode != null) {
                parentNode.removeChild(this.element);
            }
        };
        HdpiCanvas.prototype.destroy = function () {
            this.element.remove();
            // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.
            // See https://bugs.webkit.org/show_bug.cgi?id=195325.
            this.element.width = 0;
            this.element.height = 0;
            this.context.clearRect(0, 0, 0, 0);
            Object.freeze(this);
        };
        HdpiCanvas.prototype.snapshot = function () {
            // No-op for compatibility with HdpiOffscreenCanvas.
        };
        HdpiCanvas.prototype.clear = function () {
            this.context.save();
            this.context.resetTransform();
            this.context.clearRect(0, 0, this.width, this.height);
            this.context.restore();
        };
        HdpiCanvas.prototype.toImage = function () {
            var img = this.document.createElement('img');
            img.src = this.getDataURL();
            return img;
        };
        HdpiCanvas.prototype.getDataURL = function (type) {
            return this.element.toDataURL(type);
        };
        /**
         * @param fileName The name of the downloaded file.
         * @param fileFormat The file format, the default is `image/png`
         */
        HdpiCanvas.prototype.download = function (fileName, fileFormat) {
            if (fileFormat === void 0) { fileFormat = 'image/png'; }
            fileName = (fileName || '').trim() || 'image';
            var dataUrl = this.getDataURL(fileFormat);
            var document = this.document;
            var a = document.createElement('a');
            a.href = dataUrl;
            a.download = fileName;
            a.style.display = 'none';
            document.body.appendChild(a); // required for the `click` to work in Firefox
            a.click();
            document.body.removeChild(a);
        };
        Object.defineProperty(HdpiCanvas.prototype, "pixelRatio", {
            get: function () {
                return this._pixelRatio;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Changes the pixel ratio of the Canvas element to the given value,
         * or uses the window.devicePixelRatio (default), then resizes the Canvas
         * element accordingly (default).
         */
        HdpiCanvas.prototype.setPixelRatio = function (ratio) {
            var pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;
            if (!isDesktop()) {
                // Mobile browsers have stricter memory limits, we reduce rendering resolution to
                // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they
                // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.
                pixelRatio = 1;
            }
            if (pixelRatio === this.pixelRatio) {
                return;
            }
            HdpiCanvas.overrideScale(this.context, pixelRatio);
            this._pixelRatio = pixelRatio;
            this.resize(this.width, this.height);
        };
        Object.defineProperty(HdpiCanvas.prototype, "pixelated", {
            get: function () {
                return this.element.style.imageRendering === 'pixelated';
            },
            set: function (value) {
                this.element.style.imageRendering = value ? 'pixelated' : 'auto';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HdpiCanvas.prototype, "width", {
            get: function () {
                return this._width;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HdpiCanvas.prototype, "height", {
            get: function () {
                return this._height;
            },
            enumerable: false,
            configurable: true
        });
        HdpiCanvas.prototype.resize = function (width, height) {
            if (!(width > 0 && height > 0)) {
                return;
            }
            var _a = this, element = _a.element, context = _a.context, pixelRatio = _a.pixelRatio;
            element.width = Math.round(width * pixelRatio);
            element.height = Math.round(height * pixelRatio);
            element.style.width = width + 'px';
            element.style.height = height + 'px';
            context.resetTransform();
            this._width = width;
            this._height = height;
        };
        Object.defineProperty(HdpiCanvas, "textMeasuringContext", {
            get: function () {
                if (this._textMeasuringContext) {
                    return this._textMeasuringContext;
                }
                var canvas = document.createElement('canvas');
                this._textMeasuringContext = canvas.getContext('2d');
                return this._textMeasuringContext;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HdpiCanvas, "svgText", {
            get: function () {
                if (this._svgText) {
                    return this._svgText;
                }
                var xmlns = 'http://www.w3.org/2000/svg';
                var svg = document.createElementNS(xmlns, 'svg');
                svg.setAttribute('width', '100');
                svg.setAttribute('height', '100');
                // Add a descriptive class name in case someone sees this SVG element
                // in devtools and wonders about its purpose:
                if (svg.classList) {
                    svg.classList.add('text-measuring-svg');
                }
                else {
                    svg.setAttribute('class', 'text-measuring-svg');
                }
                svg.style.position = 'absolute';
                svg.style.top = '-1000px';
                svg.style.visibility = 'hidden';
                var svgText = document.createElementNS(xmlns, 'text');
                svgText.setAttribute('x', '0');
                svgText.setAttribute('y', '30');
                svgText.setAttribute('text', 'black');
                svg.appendChild(svgText);
                document.body.appendChild(svg);
                this._svgText = svgText;
                return svgText;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HdpiCanvas, "has", {
            get: function () {
                if (this._has) {
                    return this._has;
                }
                var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
                var isFirefox = navigator.userAgent.indexOf('Firefox') > -1;
                var isSafari = !isChrome && navigator.userAgent.indexOf('Safari') > -1;
                this._has = Object.freeze({
                    textMetrics: this.textMeasuringContext.measureText('test').actualBoundingBoxDescent !== undefined &&
                        // Firefox implemented advanced TextMetrics object in v74:
                        // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584
                        // but it's buggy, so we'll keed using the SVG for text measurement in Firefox for now.
                        !isFirefox &&
                        !isSafari,
                    getTransform: this.textMeasuringContext.getTransform !== undefined,
                });
                return this._has;
            },
            enumerable: false,
            configurable: true
        });
        HdpiCanvas.measureText = function (text, font, textBaseline, textAlign) {
            var ctx = this.textMeasuringContext;
            ctx.font = font;
            ctx.textBaseline = textBaseline;
            ctx.textAlign = textAlign;
            return ctx.measureText(text);
        };
        /**
         * Returns the width and height of the measured text.
         * @param text The single-line text to measure.
         * @param font The font shorthand string.
         */
        HdpiCanvas.getTextSize = function (text, font) {
            if (this.has.textMetrics) {
                var ctx = this.textMeasuringContext;
                ctx.font = font;
                var metrics = ctx.measureText(text);
                return {
                    width: metrics.width,
                    height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent,
                };
            }
            else {
                return this.measureSvgText(text, font);
            }
        };
        HdpiCanvas.measureSvgText = function (text, font) {
            var cache = this.textSizeCache;
            var fontCache = cache[font];
            // Note: consider not caching the size of numeric strings.
            // For example: if (isNaN(+text)) { // skip
            if (fontCache) {
                var size_1 = fontCache[text];
                if (size_1) {
                    return size_1;
                }
            }
            else {
                cache[font] = {};
            }
            var svgText = this.svgText;
            svgText.style.font = font;
            svgText.textContent = text;
            // `getBBox` returns an instance of `SVGRect` with the same `width` and `height`
            // measurements as `DOMRect` instance returned by the `getBoundingClientRect`.
            // But the `SVGRect` instance has half the properties of the `DOMRect`,
            // so we use the `getBBox` method.
            var bbox = svgText.getBBox();
            var size = {
                width: bbox.width,
                height: bbox.height,
            };
            cache[font][text] = size;
            return size;
        };
        HdpiCanvas.overrideScale = function (ctx, scale) {
            var depth = 0;
            var overrides = {
                save: function () {
                    this.$save();
                    depth++;
                },
                restore: function () {
                    if (depth > 0) {
                        this.$restore();
                        depth--;
                    }
                    else {
                        throw new Error('Unable to restore() past depth 0');
                    }
                },
                setTransform: function (a, b, c, d, e, f) {
                    if (typeof a === 'object') {
                        this.$setTransform(a);
                    }
                    else {
                        this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);
                    }
                },
                resetTransform: function () {
                    // As of Jan 8, 2019, `resetTransform` is still an "experimental technology",
                    // and doesn't work in IE11 and Edge 44.
                    this.$setTransform(scale, 0, 0, scale, 0, 0);
                },
            };
            for (var name_1 in overrides) {
                if (overrides.hasOwnProperty(name_1)) {
                    // Save native methods under prefixed names,
                    // if this hasn't been done by the previous overrides already.
                    if (!ctx['$' + name_1]) {
                        ctx['$' + name_1] = ctx[name_1];
                    }
                    // Replace native methods with overrides,
                    // or previous overrides with the new ones.
                    ctx[name_1] = overrides[name_1];
                }
            }
        };
        HdpiCanvas.textSizeCache = {};
        return HdpiCanvas;
    }());

    // For small data structs like a bounding box, objects are superior to arrays
    // in terms of performance (by 3-4% in Chrome 71, Safari 12 and by 20% in Firefox 64).
    // They are also self descriptive and harder to abuse.
    // For example, one has to do:
    // `ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);`
    // rather than become enticed by the much slower:
    // `ctx.strokeRect(...bbox);`
    // https://jsperf.com/array-vs-object-create-access
    var BBox = /** @class */ (function () {
        function BBox(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }
        BBox.prototype.clone = function () {
            var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
            return new BBox(x, y, width, height);
        };
        BBox.prototype.equals = function (other) {
            return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
        };
        BBox.prototype.containsPoint = function (x, y) {
            return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;
        };
        BBox.prototype.isInfinite = function () {
            return (Math.abs(this.x) === Infinity ||
                Math.abs(this.y) === Infinity ||
                Math.abs(this.width) === Infinity ||
                Math.abs(this.height) === Infinity);
        };
        BBox.prototype.shrink = function (amount, position) {
            switch (position) {
                case 'top':
                    this.y += amount;
                // Deliberate fall-through.
                case 'bottom':
                    this.height -= amount;
                    break;
                case 'left':
                    this.x += amount;
                // Deliberate fall-through.
                case 'right':
                    this.width -= amount;
                    break;
                case 'vertical':
                    this.y += amount;
                    this.height -= amount * 2;
                    break;
                case 'horizontal':
                    this.x += amount;
                    this.width -= amount * 2;
                    break;
                default:
                    this.x += amount;
                    this.width -= amount * 2;
                    this.y += amount;
                    this.height -= amount * 2;
            }
        };
        BBox.prototype.grow = function (amount, position) {
            this.shrink(-amount, position);
        };
        BBox.merge = function (boxes) {
            var left = Infinity;
            var top = Infinity;
            var right = -Infinity;
            var bottom = -Infinity;
            boxes.forEach(function (box) {
                if (box.x < left) {
                    left = box.x;
                }
                if (box.y < top) {
                    top = box.y;
                }
                if (box.x + box.width > right) {
                    right = box.x + box.width;
                }
                if (box.y + box.height > bottom) {
                    bottom = box.y + box.height;
                }
            });
            return new BBox(left, top, right - left, bottom - top);
        };
        return BBox;
    }());

    var __read$w = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    /**
     * As of Jan 8, 2019, Firefox still doesn't implement
     * `getTransform(): DOMMatrix;`
     * `setTransform(transform?: DOMMatrix2DInit)`
     * in the `CanvasRenderingContext2D`.
     * Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=928150
     * IE11 and Edge 44 also don't have the support.
     * Thus this class, to keep track of the current transform and
     * combine transformations.
     * Standards:
     * https://html.spec.whatwg.org/dev/canvas.html
     * https://www.w3.org/TR/geometry-1/
     */
    var Matrix = /** @class */ (function () {
        function Matrix(elements) {
            if (elements === void 0) { elements = [1, 0, 0, 1, 0, 0]; }
            this.elements = elements;
        }
        Matrix.prototype.setElements = function (elements) {
            var e = this.elements;
            // `this.elements = elements.slice()` is 4-5 times slower
            // (in Chrome 71 and FF 64) than manually copying elements,
            // since slicing allocates new memory.
            // The performance of passing parameters individually
            // vs as an array is about the same in both browsers, so we
            // go with a single (array of elements) parameter, because
            // `setElements(elements)` and `setElements([a, b, c, d, e, f])`
            // calls give us roughly the same performance, versus
            // `setElements(...elements)` and `setElements(a, b, c, d, e, f)`,
            // where the spread operator causes a 20-30x performance drop
            // (30x when compiled to ES5's `.apply(this, elements)`
            //  20x when used natively).
            e[0] = elements[0];
            e[1] = elements[1];
            e[2] = elements[2];
            e[3] = elements[3];
            e[4] = elements[4];
            e[5] = elements[5];
            return this;
        };
        Object.defineProperty(Matrix.prototype, "identity", {
            get: function () {
                var e = this.elements;
                return e[0] === 1 && e[1] === 0 && e[2] === 0 && e[3] === 1 && e[4] === 0 && e[5] === 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "a", {
            get: function () {
                return this.elements[0];
            },
            set: function (value) {
                this.elements[0] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "b", {
            get: function () {
                return this.elements[1];
            },
            set: function (value) {
                this.elements[1] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "c", {
            get: function () {
                return this.elements[2];
            },
            set: function (value) {
                this.elements[2] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "d", {
            get: function () {
                return this.elements[3];
            },
            set: function (value) {
                this.elements[3] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "e", {
            get: function () {
                return this.elements[4];
            },
            set: function (value) {
                this.elements[4] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Matrix.prototype, "f", {
            get: function () {
                return this.elements[5];
            },
            set: function (value) {
                this.elements[5] = value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Performs the AxB matrix multiplication and saves the result
         * to `C`, if given, or to `A` otherwise.
         */
        Matrix.prototype.AxB = function (A, B, C) {
            var a = A[0] * B[0] + A[2] * B[1], b = A[1] * B[0] + A[3] * B[1], c = A[0] * B[2] + A[2] * B[3], d = A[1] * B[2] + A[3] * B[3], e = A[0] * B[4] + A[2] * B[5] + A[4], f = A[1] * B[4] + A[3] * B[5] + A[5];
            C = C || A;
            C[0] = a;
            C[1] = b;
            C[2] = c;
            C[3] = d;
            C[4] = e;
            C[5] = f;
        };
        /**
         * The `other` matrix gets post-multiplied to the current matrix.
         * Returns the current matrix.
         * @param other
         */
        Matrix.prototype.multiplySelf = function (other) {
            this.AxB(this.elements, other.elements);
            return this;
        };
        /**
         * The `other` matrix gets post-multiplied to the current matrix.
         * Returns a new matrix.
         * @param other
         */
        Matrix.prototype.multiply = function (other) {
            var elements = new Array(6);
            this.AxB(this.elements, other.elements, elements);
            return new Matrix(elements);
        };
        Matrix.prototype.preMultiplySelf = function (other) {
            this.AxB(other.elements, this.elements, this.elements);
            return this;
        };
        /**
         * Returns the inverse of this matrix as a new matrix.
         */
        Matrix.prototype.inverse = function () {
            var _a = __read$w(this.elements, 6), a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4], f = _a[5];
            var rD = 1 / (a * d - b * c); // reciprocal of determinant
            a *= rD;
            b *= rD;
            c *= rD;
            d *= rD;
            return new Matrix([d, -b, -c, a, c * f - d * e, b * e - a * f]);
        };
        /**
         * Save the inverse of this matrix to the given matrix.
         */
        Matrix.prototype.inverseTo = function (other) {
            var _a = __read$w(this.elements, 6), a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4], f = _a[5];
            var rD = 1 / (a * d - b * c); // reciprocal of determinant
            a *= rD;
            b *= rD;
            c *= rD;
            d *= rD;
            other.setElements([d, -b, -c, a, c * f - d * e, b * e - a * f]);
            return this;
        };
        Matrix.prototype.invertSelf = function () {
            var el = this.elements;
            var a = el[0], b = el[1], c = el[2], d = el[3], e = el[4], f = el[5];
            var rD = 1 / (a * d - b * c); // reciprocal of determinant
            a *= rD;
            b *= rD;
            c *= rD;
            d *= rD;
            el[0] = d;
            el[1] = -b;
            el[2] = -c;
            el[3] = a;
            el[4] = c * f - d * e;
            el[5] = b * e - a * f;
            return this;
        };
        Matrix.prototype.transformPoint = function (x, y) {
            var e = this.elements;
            return {
                x: x * e[0] + y * e[2] + e[4],
                y: x * e[1] + y * e[3] + e[5],
            };
        };
        Matrix.prototype.transformBBox = function (bbox, target) {
            var elements = this.elements;
            var xx = elements[0];
            var xy = elements[1];
            var yx = elements[2];
            var yy = elements[3];
            var h_w = bbox.width * 0.5;
            var h_h = bbox.height * 0.5;
            var cx = bbox.x + h_w;
            var cy = bbox.y + h_h;
            var w = Math.abs(h_w * xx) + Math.abs(h_h * yx);
            var h = Math.abs(h_w * xy) + Math.abs(h_h * yy);
            if (!target) {
                target = new BBox(0, 0, 0, 0);
            }
            target.x = cx * xx + cy * yx + elements[4] - w;
            target.y = cx * xy + cy * yy + elements[5] - h;
            target.width = w + w;
            target.height = h + h;
            return target;
        };
        Matrix.prototype.toContext = function (ctx) {
            // It's fair to say that matrix multiplications are not cheap.
            // However, updating path definitions on every frame isn't either, so
            // it may be cheaper to just translate paths. It's also fair to
            // say, that most paths will have to be re-rendered anyway, say
            // rectangle paths in a bar chart, where an animation would happen when
            // the data set changes and existing bars are morphed into new ones.
            // Or a pie chart, where old sectors are also morphed into new ones.
            // Same for the line chart. The only plausible case where translating
            // existing paths would be enough, is the scatter chart, where marker
            // icons, typically circles, stay the same size. But if circle radii
            // are bound to some data points, even circle paths would have to be
            // updated. And thus it makes sense to optimize for fewer matrix
            // transforms, where transform matrices of paths are mostly identity
            // matrices and `x`/`y`, `centerX`/`centerY` and similar properties
            // are used to define a path at specific coordinates. And only groups
            // are used to collectively apply a transform to a set of nodes.
            // If the matrix is mostly identity (95% of the time),
            // the `if (this.isIdentity)` check can make this call 3-4 times
            // faster on average: https://jsperf.com/matrix-check-first-vs-always-set
            if (this.identity) {
                return;
            }
            var e = this.elements;
            ctx.transform(e[0], e[1], e[2], e[3], e[4], e[5]);
        };
        Matrix.flyweight = function (sourceMatrix) {
            return Matrix.instance.setElements(sourceMatrix.elements);
        };
        Matrix.updateTransformMatrix = function (matrix, scalingX, scalingY, rotation, translationX, translationY, opts) {
            // Assume that centers of scaling and rotation are at the origin.
            var _a = __read$w([0, 0], 2), bbcx = _a[0], bbcy = _a[1];
            var sx = scalingX;
            var sy = scalingY;
            var scx;
            var scy;
            if (sx === 1 && sy === 1) {
                scx = 0;
                scy = 0;
            }
            else {
                scx = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.scalingCenterX;
                scy = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.scalingCenterY;
            }
            var r = rotation;
            var cos = Math.cos(r);
            var sin = Math.sin(r);
            var rcx;
            var rcy;
            if (r === 0) {
                rcx = 0;
                rcy = 0;
            }
            else {
                rcx = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.rotationCenterX;
                rcy = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.rotationCenterY;
            }
            var tx = translationX;
            var ty = translationY;
            // The transform matrix `M` is a result of the following transformations:
            // 1) translate the center of scaling to the origin
            // 2) scale
            // 3) translate back
            // 4) translate the center of rotation to the origin
            // 5) rotate
            // 6) translate back
            // 7) translate
            //         (7)          (6)             (5)             (4)           (3)           (2)           (1)
            //     | 1 0 tx |   | 1 0 rcx |   | cos -sin 0 |   | 1 0 -rcx |   | 1 0 scx |   | sx 0 0 |   | 1 0 -scx |
            // M = | 0 1 ty | * | 0 1 rcy | * | sin  cos 0 | * | 0 1 -rcy | * | 0 1 scy | * | 0 sy 0 | * | 0 1 -scy |
            //     | 0 0  1 |   | 0 0  1  |   |  0    0  1 |   | 0 0  1   |   | 0 0  1  |   | 0  0 0 |   | 0 0  1   |
            // Translation after steps 1-4 above:
            var tx4 = scx * (1 - sx) - rcx;
            var ty4 = scy * (1 - sy) - rcy;
            matrix.setElements([
                cos * sx,
                sin * sx,
                -sin * sy,
                cos * sy,
                cos * tx4 - sin * ty4 + rcx + tx,
                sin * tx4 + cos * ty4 + rcy + ty,
            ]);
            return matrix;
        };
        Matrix.instance = new Matrix();
        return Matrix;
    }());

    var ID_MAP = {};
    function resetIds() {
        for (var key in ID_MAP) {
            delete ID_MAP[key];
        }
    }
    function createId(instance) {
        var _a;
        var constructor = instance.constructor;
        var className = constructor.hasOwnProperty('className') ? constructor.className : constructor.name;
        if (!className) {
            throw new Error("The " + constructor + " is missing the 'className' property.");
        }
        var nextId = ((_a = ID_MAP[className]) !== null && _a !== void 0 ? _a : 0) + 1;
        ID_MAP[className] = nextId;
        return className + '-' + nextId;
    }

    function windowValue(name) {
        /**
         * Redeclaration of window that is safe for use with Gatsby server-side (webpack) compilation.
         */
        var WINDOW = typeof window !== 'undefined'
            ? window
            : // typeof global !== 'undefined' ? (global as any) :
                undefined;
        return WINDOW === null || WINDOW === void 0 ? void 0 : WINDOW[name];
    }

    var RedrawType;
    (function (RedrawType) {
        RedrawType[RedrawType["NONE"] = 0] = "NONE";
        // Canvas doesn't need clearing, an incremental re-rerender is sufficient.
        RedrawType[RedrawType["TRIVIAL"] = 1] = "TRIVIAL";
        // Group needs clearing, a semi-incremental re-render is sufficient.
        RedrawType[RedrawType["MINOR"] = 2] = "MINOR";
        // Canvas needs to be cleared for these redraw types.
        RedrawType[RedrawType["MAJOR"] = 3] = "MAJOR";
    })(RedrawType || (RedrawType = {}));
    /** @returns true if eval() is disabled in the current execution context. */
    function evalAvailable() {
        try {
            eval('');
            return true;
        }
        catch (e) {
            return false;
        }
    }
    var EVAL_USEABLE = evalAvailable();
    function SceneChangeDetection(opts) {
        var _a = opts || {}, _b = _a.redraw, redraw = _b === void 0 ? RedrawType.TRIVIAL : _b, _c = _a.type, type = _c === void 0 ? 'normal' : _c, changeCb = _a.changeCb, convertor = _a.convertor, _d = _a.checkDirtyOnAssignment, checkDirtyOnAssignment = _d === void 0 ? false : _d;
        var debug = windowValue('agChartsSceneChangeDetectionDebug') != null;
        return function (target, key) {
            // `target` is either a constructor (static member) or prototype (instance member)
            var privateKey = "__" + key;
            if (target[key]) {
                return;
            }
            if (EVAL_USEABLE) {
                // Optimised code-path.
                // Remove all conditional logic from runtime - generate a setter with the exact necessary
                // steps, as these setters are called a LOT during update cycles.
                var setterJs = "\n                " + (debug ? 'var setCount = 0;' : '') + "\n                function set_" + key + "(value) {\n                    const oldValue = this." + privateKey + ";\n                    " + (convertor ? 'value = convertor(value);' : '') + "\n                    if (value !== oldValue) {\n                        this." + privateKey + " = value;\n                        " + (debug
                    ? "console.log({ t: this, property: '" + key + "', oldValue, value, stack: new Error().stack });"
                    : '') + "\n                        " + (type === 'normal' ? "this.markDirty(this, " + redraw + ");" : '') + "\n                        " + (type === 'transform' ? "this.markDirtyTransform(" + redraw + ");" : '') + "\n                        " + (type === 'path'
                    ? "if (!this._dirtyPath) { this._dirtyPath = true; this.markDirty(this, " + redraw + "); }"
                    : '') + "\n                        " + (type === 'font'
                    ? "if (!this._dirtyFont) { this._dirtyFont = true; this.markDirty(this, " + redraw + "); }"
                    : '') + "\n                        " + (changeCb ? 'changeCb(this);' : '') + "\n                    }\n                    " + (checkDirtyOnAssignment
                    ? "if (value != null && value._dirty > " + RedrawType.NONE + ") { this.markDirty(value, value._dirty); }"
                    : '') + "\n                };\n                set_" + key + ";\n            ";
                var getterJs = "\n                function get_" + key + "() {\n                    return this." + privateKey + ";\n                };\n                get_" + key + ";\n            ";
                Object.defineProperty(target, key, {
                    set: eval(setterJs),
                    get: eval(getterJs),
                    enumerable: true,
                    configurable: true,
                });
            }
            else {
                // Unoptimised but 'safe' code-path, for environments with CSP headers and no 'unsafe-eval'.
                // We deliberately do not support debug branches found in the optimised path above, since
                // for large data-set series performance deteriorates with every extra branch here.
                var setter = function (value) {
                    var oldValue = this[privateKey];
                    value = convertor ? convertor(value) : value;
                    if (value !== oldValue) {
                        this[privateKey] = value;
                        if (type === 'normal')
                            this.markDirty(this, redraw);
                        if (type === 'transform')
                            this.markDirtyTransform(redraw);
                        if (type === 'path' && !this._dirtyPath) {
                            this._dirtyPath = true;
                            this.markDirty(this, redraw);
                        }
                        if (type === 'font' && !this._dirtyFont) {
                            this._dirtyFont = true;
                            this.markDirty(this, redraw);
                        }
                        if (changeCb)
                            changeCb(this);
                    }
                    if (checkDirtyOnAssignment && value != null && value._dirty > RedrawType.NONE)
                        this.markDirty(value, value._dirty);
                };
                var getter = function () {
                    return this[privateKey];
                };
                Object.defineProperty(target, key, {
                    set: setter,
                    get: getter,
                    enumerable: true,
                    configurable: true,
                });
            }
        };
    }
    var ChangeDetectable = /** @class */ (function () {
        function ChangeDetectable() {
            this._dirty = RedrawType.MAJOR;
        }
        ChangeDetectable.prototype.markDirty = function (_source, type) {
            if (type === void 0) { type = RedrawType.TRIVIAL; }
            if (this._dirty > type) {
                return;
            }
            this._dirty = type;
        };
        ChangeDetectable.prototype.markClean = function (_opts) {
            this._dirty = RedrawType.NONE;
        };
        ChangeDetectable.prototype.isDirty = function () {
            return this._dirty > RedrawType.NONE;
        };
        return ChangeDetectable;
    }());

    var __extends$Z = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$F = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __values$o = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var PointerEvents;
    (function (PointerEvents) {
        PointerEvents[PointerEvents["All"] = 0] = "All";
        PointerEvents[PointerEvents["None"] = 1] = "None";
    })(PointerEvents || (PointerEvents = {}));
    var zIndexChangedCallback = function (o) {
        if (o.parent) {
            o.parent.dirtyZIndex = true;
        }
        o.zIndexChanged();
    };
    /**
     * Abstract scene graph node.
     * Each node can have zero or one parent and belong to zero or one scene.
     */
    var Node = /** @class */ (function (_super) {
        __extends$Z(Node, _super);
        function Node() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /** Unique number to allow creation order to be easily determined. */
            _this.serialNumber = Node._nextSerialNumber++;
            /**
             * Unique node ID in the form `ClassName-NaturalNumber`.
             */
            _this.id = createId(_this);
            /**
             * Some number to identify this node, typically within a `Group` node.
             * Usually this will be some enum value used as a selector.
             */
            _this.tag = NaN;
            /**
             * To simplify the type system (especially in Selections) we don't have the `Parent` node
             * (one that has children). Instead, we mimic HTML DOM, where any node can have children.
             * But we still need to distinguish regular leaf nodes from container leafs somehow.
             */
            _this.isContainerNode = false;
            _this._children = [];
            // Used to check for duplicate nodes.
            _this.childSet = {}; // new Set<Node>()
            // These matrices may need to have package level visibility
            // for performance optimization purposes.
            _this.matrix = new Matrix();
            _this.inverseMatrix = new Matrix();
            _this._dirtyTransform = false;
            _this.scalingX = 1;
            _this.scalingY = 1;
            /**
             * The center of scaling.
             * The default value of `null` means the scaling center will be
             * determined automatically, as the center of the bounding box
             * of a node.
             */
            _this.scalingCenterX = null;
            _this.scalingCenterY = null;
            _this.rotationCenterX = null;
            _this.rotationCenterY = null;
            /**
             * Rotation angle in radians.
             * The value is set as is. No normalization to the [-180, 180) or [0, 360)
             * interval is performed.
             */
            _this.rotation = 0;
            _this.translationX = 0;
            _this.translationY = 0;
            _this.visible = true;
            _this.dirtyZIndex = false;
            _this.zIndex = 0;
            /** Discriminators for render order within a zIndex. */
            _this.zIndexSubOrder = undefined;
            _this.pointerEvents = PointerEvents.All;
            return _this;
        }
        /**
         * This is meaningfully faster than `instanceof` and should be the preferred way
         * of checking inside loops.
         * @param node
         */
        Node.isNode = function (node) {
            return node ? node.matrix !== undefined : false;
        };
        Node.prototype._setScene = function (value) {
            var e_1, _a;
            this._scene = value;
            this._debug = value === null || value === void 0 ? void 0 : value.debug;
            try {
                for (var _b = __values$o(this.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    child._setScene(value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Object.defineProperty(Node.prototype, "scene", {
            get: function () {
                return this._scene;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "children", {
            get: function () {
                return this._children;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Appends one or more new node instances to this parent.
         * If one needs to:
         * - move a child to the end of the list of children
         * - move a child from one parent to another (including parents in other scenes)
         * one should use the {@link insertBefore} method instead.
         * @param nodes A node or nodes to append.
         */
        Node.prototype.append = function (nodes) {
            var e_2, _a;
            // Passing a single parameter to an open-ended version of `append`
            // would be 30-35% slower than this.
            if (Node.isNode(nodes)) {
                nodes = [nodes];
            }
            try {
                for (var nodes_1 = __values$o(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                    var node = nodes_1_1.value;
                    if (node.parent) {
                        throw new Error(node + " already belongs to another parent: " + node.parent + ".");
                    }
                    if (node.scene) {
                        throw new Error(node + " already belongs to a scene: " + node.scene + ".");
                    }
                    if (this.childSet[node.id]) {
                        // Cast to `any` to avoid `Property 'name' does not exist on type 'Function'`.
                        throw new Error("Duplicate " + node.constructor.name + " node: " + node);
                    }
                    this._children.push(node);
                    this.childSet[node.id] = true;
                    node._parent = this;
                    node._setScene(this.scene);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.dirtyZIndex = true;
            this.markDirty(this, RedrawType.MAJOR);
        };
        Node.prototype.appendChild = function (node) {
            this.append(node);
            return node;
        };
        Node.prototype.removeChild = function (node) {
            if (node.parent === this) {
                var i = this.children.indexOf(node);
                if (i >= 0) {
                    this._children.splice(i, 1);
                    delete this.childSet[node.id];
                    node._parent = undefined;
                    node._setScene();
                    this.dirtyZIndex = true;
                    this.markDirty(node, RedrawType.MAJOR);
                    return node;
                }
            }
            throw new Error("The node to be removed is not a child of this node.");
        };
        /**
         * Inserts the node `node` before the existing child node `nextNode`.
         * If `nextNode` is null, insert `node` at the end of the list of children.
         * If the `node` belongs to another parent, it is first removed.
         * Returns the `node`.
         * @param node
         * @param nextNode
         */
        Node.prototype.insertBefore = function (node, nextNode) {
            var parent = node.parent;
            if (node.parent) {
                node.parent.removeChild(node);
            }
            if (nextNode && nextNode.parent === this) {
                var i = this.children.indexOf(nextNode);
                if (i >= 0) {
                    this._children.splice(i, 0, node);
                    this.childSet[node.id] = true;
                    node._parent = this;
                    node._setScene(this.scene);
                }
                else {
                    throw new Error(nextNode + " has " + parent + " as the parent, " + "but is not in its list of children.");
                }
                this.dirtyZIndex = true;
                this.markDirty(node, RedrawType.MAJOR);
            }
            else {
                this.append(node);
            }
            return node;
        };
        Object.defineProperty(Node.prototype, "nextSibling", {
            get: function () {
                var parent = this.parent;
                if (parent) {
                    var children = parent.children;
                    var index = children.indexOf(this);
                    if (index >= 0 && index <= children.length - 1) {
                        return children[index + 1];
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Node.prototype.transformPoint = function (x, y) {
            var matrix = Matrix.flyweight(this.matrix);
            var parent = this.parent;
            while (parent) {
                matrix.preMultiplySelf(parent.matrix);
                parent = parent.parent;
            }
            return matrix.invertSelf().transformPoint(x, y);
        };
        Node.prototype.inverseTransformPoint = function (x, y) {
            var matrix = Matrix.flyweight(this.matrix);
            var parent = this.parent;
            while (parent) {
                matrix.preMultiplySelf(parent.matrix);
                parent = parent.parent;
            }
            return matrix.transformPoint(x, y);
        };
        Node.prototype.markDirtyTransform = function () {
            this._dirtyTransform = true;
            this.markDirty(this, RedrawType.MAJOR);
        };
        Node.prototype.containsPoint = function (_x, _y) {
            return false;
        };
        /**
         * Hit testing method.
         * Recursively checks if the given point is inside this node or any of its children.
         * Returns the first matching node or `undefined`.
         * Nodes that render later (show on top) are hit tested first.
         */
        Node.prototype.pickNode = function (x, y) {
            var _a;
            if (!this.visible || this.pointerEvents === PointerEvents.None || !this.containsPoint(x, y)) {
                return;
            }
            var children = this.children;
            if (children.length > 1000) {
                // Try to optimise which children to interrogate; BBox calculation is an approximation
                // for more complex shapes, so discarding items based on this will save a lot of
                // processing when the point is nowhere near the child.
                for (var i = children.length - 1; i >= 0; i--) {
                    var hit = ((_a = children[i].computeBBox()) === null || _a === void 0 ? void 0 : _a.containsPoint(x, y)) ? children[i].pickNode(x, y) : undefined;
                    if (hit) {
                        return hit;
                    }
                }
            }
            else if (children.length) {
                // Nodes added later should be hit-tested first,
                // as they are rendered on top of the previously added nodes.
                for (var i = children.length - 1; i >= 0; i--) {
                    var hit = children[i].pickNode(x, y);
                    if (hit) {
                        return hit;
                    }
                }
            }
            else if (!this.isContainerNode) {
                // a leaf node, but not a container leaf
                return this;
            }
        };
        Node.prototype.computeBBox = function () {
            return;
        };
        Node.prototype.computeTransformedBBox = function () {
            var bbox = this.computeBBox();
            if (!bbox) {
                return undefined;
            }
            this.computeTransformMatrix();
            var matrix = Matrix.flyweight(this.matrix);
            var parent = this.parent;
            while (parent) {
                parent.computeTransformMatrix();
                matrix.preMultiplySelf(parent.matrix);
                parent = parent.parent;
            }
            matrix.transformBBox(bbox, bbox);
            return bbox;
        };
        Node.prototype.computeBBoxCenter = function () {
            var bbox = this.computeBBox && this.computeBBox();
            if (bbox) {
                return [bbox.x + bbox.width * 0.5, bbox.y + bbox.height * 0.5];
            }
            return [0, 0];
        };
        Node.prototype.computeTransformMatrix = function () {
            if (!this._dirtyTransform) {
                return;
            }
            var _a = this, matrix = _a.matrix, scalingX = _a.scalingX, scalingY = _a.scalingY, rotation = _a.rotation, translationX = _a.translationX, translationY = _a.translationY, scalingCenterX = _a.scalingCenterX, scalingCenterY = _a.scalingCenterY, rotationCenterX = _a.rotationCenterX, rotationCenterY = _a.rotationCenterY;
            Matrix.updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, {
                scalingCenterX: scalingCenterX,
                scalingCenterY: scalingCenterY,
                rotationCenterX: rotationCenterX,
                rotationCenterY: rotationCenterY,
            });
            matrix.inverseTo(this.inverseMatrix);
            this._dirtyTransform = false;
        };
        Node.prototype.render = function (renderCtx) {
            var stats = renderCtx.stats;
            this._dirty = RedrawType.NONE;
            if (stats)
                stats.nodesRendered++;
        };
        Node.prototype.clearBBox = function (ctx) {
            var bbox = this.computeBBox();
            if (bbox == null) {
                return;
            }
            var x = bbox.x, y = bbox.y, width = bbox.width, height = bbox.height;
            var topLeft = this.transformPoint(x, y);
            var bottomRight = this.transformPoint(x + width, y + height);
            ctx.clearRect(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
        };
        Node.prototype.markDirty = function (_source, type, parentType) {
            if (type === void 0) { type = RedrawType.TRIVIAL; }
            if (parentType === void 0) { parentType = type; }
            if (this._dirty > type) {
                return;
            }
            if (this._dirty === type && type === parentType) {
                return;
            }
            this._dirty = type;
            if (this.parent) {
                this.parent.markDirty(this, parentType);
            }
            else if (this.scene) {
                this.scene.markDirty();
            }
        };
        Object.defineProperty(Node.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            enumerable: false,
            configurable: true
        });
        Node.prototype.markClean = function (opts) {
            var e_3, _a;
            var _b = opts || {}, _c = _b.force, force = _c === void 0 ? false : _c, _d = _b.recursive, recursive = _d === void 0 ? true : _d;
            if (this._dirty === RedrawType.NONE && !force) {
                return;
            }
            this._dirty = RedrawType.NONE;
            if (recursive) {
                try {
                    for (var _e = __values$o(this.children), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var child = _f.value;
                        child.markClean();
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        };
        Node.prototype.visibilityChanged = function () {
            // Override point for sub-classes to react to visibility changes.
        };
        Object.defineProperty(Node.prototype, "nodeCount", {
            get: function () {
                var e_4, _a;
                var count = 1;
                var dirtyCount = this._dirty >= RedrawType.NONE || this._dirtyTransform ? 1 : 0;
                var visibleCount = this.visible ? 1 : 0;
                try {
                    for (var _b = __values$o(this._children), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        var _d = child.nodeCount, childCount = _d.count, childVisibleCount = _d.visibleCount, childDirtyCount = _d.dirtyCount;
                        count += childCount;
                        visibleCount += childVisibleCount;
                        dirtyCount += childDirtyCount;
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                return { count: count, visibleCount: visibleCount, dirtyCount: dirtyCount };
            },
            enumerable: false,
            configurable: true
        });
        Node.prototype.zIndexChanged = function () {
            // Override point for sub-classes.
        };
        Node._nextSerialNumber = 0;
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "scalingX", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "scalingY", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "scalingCenterX", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "scalingCenterY", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "rotationCenterX", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "rotationCenterY", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "rotation", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "translationX", void 0);
        __decorate$F([
            SceneChangeDetection({ type: 'transform' })
        ], Node.prototype, "translationY", void 0);
        __decorate$F([
            SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: function (o) { return o.visibilityChanged(); } })
        ], Node.prototype, "visible", void 0);
        __decorate$F([
            SceneChangeDetection({
                redraw: RedrawType.TRIVIAL,
                changeCb: zIndexChangedCallback,
            })
        ], Node.prototype, "zIndex", void 0);
        __decorate$F([
            SceneChangeDetection({
                redraw: RedrawType.TRIVIAL,
                changeCb: zIndexChangedCallback,
            })
        ], Node.prototype, "zIndexSubOrder", void 0);
        return Node;
    }(ChangeDetectable));

    /**
     * Finds the roots of a parametric linear equation in `t`,
     * where `t` lies in the interval of `[0,1]`.
     */
    function linearRoot(a, b) {
        var t = -b / a;
        return a !== 0 && t >= 0 && t <= 1 ? [t] : [];
    }
    /**
     * Finds the roots of a parametric quadratic equation in `t`,
     * where `t` lies in the interval of `[0,1]`.
     */
    function quadraticRoots(a, b, c) {
        if (a === 0) {
            return linearRoot(b, c);
        }
        var D = b * b - 4 * a * c; // The polynomial's discriminant.
        var roots = [];
        if (D === 0) {
            // A single real root.
            var t = -b / (2 * a);
            if (t >= 0 && t <= 1) {
                roots.push(t);
            }
        }
        else if (D > 0) {
            // A pair of distinct real roots.
            var rD = Math.sqrt(D);
            var t1 = (-b - rD) / (2 * a);
            var t2 = (-b + rD) / (2 * a);
            if (t1 >= 0 && t1 <= 1) {
                roots.push(t1);
            }
            if (t2 >= 0 && t2 <= 1) {
                roots.push(t2);
            }
        }
        // else -> Complex roots.
        return roots;
    }
    /**
     * Finds the roots of a parametric cubic equation in `t`,
     * where `t` lies in the interval of `[0,1]`.
     * Returns an array of parametric intersection locations along the cubic,
     * excluding out-of-bounds intersections (before or after the end point
     * or in the imaginary plane).
     * An adaptation of http://www.particleincell.com/blog/2013/cubic-line-intersection/
     */
    function cubicRoots(a, b, c, d) {
        if (a === 0) {
            return quadraticRoots(b, c, d);
        }
        var A = b / a;
        var B = c / a;
        var C = d / a;
        var Q = (3 * B - A * A) / 9;
        var R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;
        var D = Q * Q * Q + R * R; // The polynomial's discriminant.
        var third = 1 / 3;
        var roots = [];
        if (D >= 0) {
            // Complex or duplicate roots.
            var rD = Math.sqrt(D);
            var S = Math.sign(R + rD) * Math.pow(Math.abs(R + rD), third);
            var T = Math.sign(R - rD) * Math.pow(Math.abs(R - rD), third);
            var Im = Math.abs((Math.sqrt(3) * (S - T)) / 2); // Complex part of the root pair.
            var t = -third * A + (S + T); // A real root.
            if (t >= 0 && t <= 1) {
                roots.push(t);
            }
            if (Im === 0) {
                var t_1 = -third * A - (S + T) / 2; // The real part of a complex root.
                if (t_1 >= 0 && t_1 <= 1) {
                    roots.push(t_1);
                }
            }
        }
        else {
            // Distinct real roots.
            var theta = Math.acos(R / Math.sqrt(-Q * Q * Q));
            var thirdA = third * A;
            var twoSqrtQ = 2 * Math.sqrt(-Q);
            var t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;
            var t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;
            var t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;
            if (t1 >= 0 && t1 <= 1) {
                roots.push(t1);
            }
            if (t2 >= 0 && t2 <= 1) {
                roots.push(t2);
            }
            if (t3 >= 0 && t3 <= 1) {
                roots.push(t3);
            }
        }
        return roots;
    }

    var __values$n = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    /**
     * Returns the intersection point for the given pair of line segments, or null,
     * if the segments are parallel or don't intersect.
     * Based on http://paulbourke.net/geometry/pointlineplane/
     */
    function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
        var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);
        if (d === 0) {
            // The lines are parallel.
            return null;
        }
        var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;
        var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;
        if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
            return {
                x: ax1 + ua * (ax2 - ax1),
                y: ay1 + ua * (ay2 - ay1),
            };
        }
        return null; // The intersection point is outside either or both segments.
    }
    /**
     * Returns intersection points of the given cubic curve and the line segment.
     * Takes in x/y components of cubic control points and line segment start/end points
     * as parameters.
     */
    function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {
        var e_1, _a;
        var intersections = [];
        // Find line equation coefficients.
        var A = y1 - y2;
        var B = x2 - x1;
        var C = x1 * (y2 - y1) - y1 * (x2 - x1);
        // Find cubic Bezier curve equation coefficients from control points.
        var bx = bezierCoefficients(px1, px2, px3, px4);
        var by = bezierCoefficients(py1, py2, py3, py4);
        var a = A * bx[0] + B * by[0]; // t^3
        var b = A * bx[1] + B * by[1]; // t^2
        var c = A * bx[2] + B * by[2]; // t
        var d = A * bx[3] + B * by[3] + C; // 1
        var roots = cubicRoots(a, b, c, d);
        try {
            // Verify that the roots are within bounds of the linear segment.
            for (var roots_1 = __values$n(roots), roots_1_1 = roots_1.next(); !roots_1_1.done; roots_1_1 = roots_1.next()) {
                var t = roots_1_1.value;
                var tt = t * t;
                var ttt = t * tt;
                // Find the cartesian plane coordinates for the parametric root `t`.
                var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];
                var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];
                // The parametric cubic roots we found are intersection points
                // with an infinite line, and so the x/y coordinates above are as well.
                // Make sure the x/y is also within the bounds of the given segment.
                var s = void 0;
                if (x1 !== x2) {
                    s = (x - x1) / (x2 - x1);
                }
                else {
                    // the line is vertical
                    s = (y - y1) / (y2 - y1);
                }
                if (s >= 0 && s <= 1) {
                    intersections.push({ x: x, y: y });
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (roots_1_1 && !roots_1_1.done && (_a = roots_1.return)) _a.call(roots_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return intersections;
    }
    /**
     * Returns the given coordinates vector multiplied by the coefficient matrix
     * of the parametric cubic Bézier equation.
     */
    function bezierCoefficients(P1, P2, P3, P4) {
        return [
            // Bézier expressed as matrix operations:
            -P1 + 3 * P2 - 3 * P3 + P4,
            3 * P1 - 6 * P2 + 3 * P3,
            -3 * P1 + 3 * P2,
            P1,
        ];
    }

    var __values$m = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var Path2D = /** @class */ (function () {
        function Path2D() {
            // The methods of this class will likely be called many times per animation frame,
            // and any allocation can trigger a GC cycle during animation, so we attempt
            // to minimize the number of allocations.
            this.previousCommands = [];
            this.previousParams = [];
            this.previousClosedPath = false;
            this.commands = [];
            this.params = [];
            this._closedPath = false;
        }
        Path2D.prototype.isDirty = function () {
            if (this._closedPath !== this.previousClosedPath) {
                return true;
            }
            if (this.previousCommands.length !== this.commands.length) {
                return true;
            }
            if (this.previousParams.length !== this.params.length) {
                return true;
            }
            for (var i = 0; i < this.commands.length; i++) {
                if (this.commands[i] !== this.previousCommands[i]) {
                    return true;
                }
            }
            for (var i = 0; i < this.params.length; i++) {
                if (this.params[i] !== this.previousParams[i]) {
                    return true;
                }
            }
            return false;
        };
        Path2D.prototype.draw = function (ctx) {
            var e_1, _a;
            var commands = this.commands;
            var params = this.params;
            var j = 0;
            ctx.beginPath();
            try {
                for (var commands_1 = __values$m(commands), commands_1_1 = commands_1.next(); !commands_1_1.done; commands_1_1 = commands_1.next()) {
                    var command = commands_1_1.value;
                    switch (command) {
                        case 'M':
                            ctx.moveTo(params[j++], params[j++]);
                            break;
                        case 'L':
                            ctx.lineTo(params[j++], params[j++]);
                            break;
                        case 'C':
                            ctx.bezierCurveTo(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++]);
                            break;
                        case 'Z':
                            ctx.closePath();
                            break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (commands_1_1 && !commands_1_1.done && (_a = commands_1.return)) _a.call(commands_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (commands.length === 0) {
                ctx.closePath();
            }
        };
        Path2D.prototype.moveTo = function (x, y) {
            if (this.xy) {
                this.xy[0] = x;
                this.xy[1] = y;
            }
            else {
                this.xy = [x, y];
            }
            this.commands.push('M');
            this.params.push(x, y);
        };
        Path2D.prototype.lineTo = function (x, y) {
            if (this.xy) {
                this.commands.push('L');
                this.params.push(x, y);
                this.xy[0] = x;
                this.xy[1] = y;
            }
            else {
                this.moveTo(x, y);
            }
        };
        Path2D.prototype.rect = function (x, y, width, height) {
            this.moveTo(x, y);
            this.lineTo(x + width, y);
            this.lineTo(x + width, y + height);
            this.lineTo(x, y + height);
            this.closePath();
        };
        /**
         * Approximates an elliptical arc with up to four cubic Bézier curves.
         * @param commands The string array to write SVG command letters to.
         * @param params The number array to write SVG command parameters (cubic control points) to.
         * @param cx The x-axis coordinate for the ellipse's center.
         * @param cy The y-axis coordinate for the ellipse's center.
         * @param rx The ellipse's major-axis radius.
         * @param ry The ellipse's minor-axis radius.
         * @param phi The rotation for this ellipse, expressed in radians.
         * @param theta1 The starting angle, measured clockwise from the positive x-axis and expressed in radians.
         * @param theta2 The ending angle, measured clockwise from the positive x-axis and expressed in radians.
         * @param anticlockwise The arc control points are always placed clockwise from `theta1` to `theta2`,
         * even when `theta1 > theta2`, unless this flag is set to `1`.
         */
        Path2D.cubicArc = function (commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {
            if (anticlockwise) {
                var temp = theta1;
                theta1 = theta2;
                theta2 = temp;
            }
            var start = params.length;
            // See https://pomax.github.io/bezierinfo/#circles_cubic
            // Arc of unit circle (start angle = 0, end angle <= π/2) in cubic Bézier coordinates:
            // S = [1, 0]
            // C1 = [1, f]
            // C2 = [cos(θ) + f * sin(θ), sin(θ) - f * cos(θ)]
            // E = [cos(θ), sin(θ)]
            // f = 4/3 * tan(θ/4)
            var f90 = 0.5522847498307935; // f for θ = π/2 is 4/3 * (Math.sqrt(2) - 1)
            var sinTheta1 = Math.sin(theta1);
            var cosTheta1 = Math.cos(theta1);
            var sinPhi = Math.sin(phi);
            var cosPhi = Math.cos(phi);
            var rightAngle = Math.PI / 2;
            // Since we know how to draw an arc of a unit circle with a cubic Bézier,
            // to draw an elliptical arc with arbitrary rotation and radii we:
            // 1) rotate the Bézier coordinates that represent a circular arc by θ
            // 2) scale the circular arc separately along the x/y axes, making it elliptical
            // 3) rotate elliptical arc by φ
            // |cos(φ) -sin(φ)| |sx  0| |cos(θ) -sin(θ)| -> |xx xy|
            // |sin(φ)  cos(φ)| | 0 sy| |sin(θ)  cos(θ)| -> |yx yy|
            var xx = cosPhi * cosTheta1 * rx - sinPhi * sinTheta1 * ry;
            var yx = sinPhi * cosTheta1 * rx + cosPhi * sinTheta1 * ry;
            var xy = -cosPhi * sinTheta1 * rx - sinPhi * cosTheta1 * ry;
            var yy = -sinPhi * sinTheta1 * rx + cosPhi * cosTheta1 * ry;
            // Always draw clockwise from θ1 to θ2.
            theta2 -= theta1;
            if (theta2 < 0) {
                theta2 += Math.PI * 2;
            }
            // Multiplying each point [x, y] by:
            // |xx xy cx| |x|
            // |yx yy cy| |y|
            // | 0  0  1| |1|
            commands.push('M');
            params.push(xx + cx, yx + cy);
            while (theta2 >= rightAngle) {
                theta2 -= rightAngle;
                commands.push('C');
                // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330
                // Revert this commit when fixed ^^.
                var lastX = xy + cx;
                params.push(xx + xy * f90 + cx, yx + yy * f90 + cy, xx * f90 + xy + cx, yx * f90 + yy + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yy + cy);
                // Prepend π/2 rotation matrix.
                // |xx xy| | 0 1| -> | xy -xx|
                // |yx yy| |-1 0| -> | yy -yx|
                // [xx, yx, xy, yy] = [xy, yy, -xx, -yx];
                // Compared to swapping with a temp variable, destructuring is:
                // - 10% faster in Chrome 70
                // - 99% slower in Firefox 63
                // Temp variable solution is 45% faster in FF than Chrome.
                // https://jsperf.com/multi-swap
                // https://bugzilla.mozilla.org/show_bug.cgi?id=1165569
                var temp = xx;
                xx = xy;
                xy = -temp;
                temp = yx;
                yx = yy;
                yy = -temp;
            }
            if (theta2) {
                var f = (4 / 3) * Math.tan(theta2 / 4);
                var sinPhi2 = Math.sin(theta2);
                var cosPhi2 = Math.cos(theta2);
                var C2x = cosPhi2 + f * sinPhi2;
                var C2y = sinPhi2 - f * cosPhi2;
                commands.push('C');
                // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330
                // Revert this commit when fixed ^^.
                var lastX = xx * cosPhi2 + xy * sinPhi2 + cx;
                params.push(xx + xy * f + cx, yx + yy * f + cy, xx * C2x + xy * C2y + cx, yx * C2x + yy * C2y + cy, Math.abs(lastX) < 1e-8 ? 0 : lastX, yx * cosPhi2 + yy * sinPhi2 + cy);
            }
            if (anticlockwise) {
                for (var i = start, j = params.length - 2; i < j; i += 2, j -= 2) {
                    var temp = params[i];
                    params[i] = params[j];
                    params[j] = temp;
                    temp = params[i + 1];
                    params[i + 1] = params[j + 1];
                    params[j + 1] = temp;
                }
            }
        };
        Path2D.prototype.cubicArc = function (cx, cy, rx, ry, phi, theta1, theta2, anticlockwise) {
            var commands = this.commands;
            var params = this.params;
            var start = commands.length;
            Path2D.cubicArc(commands, params, cx, cy, rx, ry, phi, theta1, theta2, anticlockwise);
            var x = params[params.length - 2];
            var y = params[params.length - 1];
            if (this.xy) {
                commands[start] = 'L';
                this.xy[0] = x;
                this.xy[1] = y;
            }
            else {
                this.xy = [x, y];
            }
        };
        Path2D.prototype.cubicCurveTo = function (cx1, cy1, cx2, cy2, x, y) {
            if (!this.xy) {
                this.moveTo(cx1, cy1);
            }
            this.commands.push('C');
            this.params.push(cx1, cy1, cx2, cy2, x, y);
            this.xy[0] = x;
            this.xy[1] = y;
        };
        Object.defineProperty(Path2D.prototype, "closedPath", {
            get: function () {
                return this._closedPath;
            },
            enumerable: false,
            configurable: true
        });
        Path2D.prototype.closePath = function () {
            if (this.xy) {
                this.xy = undefined;
                this.commands.push('Z');
                this._closedPath = true;
            }
        };
        Path2D.prototype.clear = function (_a) {
            var trackChanges = (_a === void 0 ? { trackChanges: false } : _a).trackChanges;
            if (trackChanges) {
                this.previousCommands = this.commands;
                this.previousParams = this.params;
                this.previousClosedPath = this._closedPath;
                this.commands = [];
                this.params = [];
            }
            else {
                this.commands.length = 0;
                this.params.length = 0;
            }
            this.xy = undefined;
            this._closedPath = false;
        };
        Path2D.prototype.isPointInPath = function (x, y) {
            var commands = this.commands;
            var params = this.params;
            var cn = commands.length;
            // Hit testing using ray casting method, where the ray's origin is some point
            // outside the path. In this case, an offscreen point that is remote enough, so that
            // even if the path itself is large and is partially offscreen, the ray's origin
            // will likely be outside the path anyway. To test if the given point is inside the
            // path or not, we cast a ray from the origin to the given point and check the number
            // of intersections of this segment with the path. If the number of intersections is
            // even, then the ray both entered and exited the path an equal number of times,
            // therefore the point is outside the path, and inside the path, if the number of
            // intersections is odd. Since the path is compound, we check if the ray segment
            // intersects with each of the path's segments, which can be either a line segment
            // (one or no intersection points) or a Bézier curve segment (up to 3 intersection
            // points).
            var ox = -10000;
            var oy = -10000;
            // the starting point of the  current path
            var sx = NaN;
            var sy = NaN;
            // the previous point of the current path
            var px = 0;
            var py = 0;
            var intersectionCount = 0;
            for (var ci = 0, pi = 0; ci < cn; ci++) {
                switch (commands[ci]) {
                    case 'M':
                        if (!isNaN(sx)) {
                            if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
                                intersectionCount++;
                            }
                        }
                        px = params[pi++];
                        sx = px;
                        py = params[pi++];
                        sy = py;
                        break;
                    case 'L':
                        if (segmentIntersection(px, py, params[pi++], params[pi++], ox, oy, x, y)) {
                            intersectionCount++;
                        }
                        px = params[pi - 2];
                        py = params[pi - 1];
                        break;
                    case 'C':
                        intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], ox, oy, x, y).length;
                        px = params[pi - 2];
                        py = params[pi - 1];
                        break;
                    case 'Z':
                        if (!isNaN(sx)) {
                            if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
                                intersectionCount++;
                            }
                        }
                        break;
                }
            }
            return intersectionCount % 2 === 1;
        };
        return Path2D;
    }());

    function ascendingStringNumberUndefined(a, b) {
        var diff = 0;
        if (typeof a === 'number' && typeof b === 'number') {
            diff = a - b;
        }
        else if (typeof a === 'string' && typeof b === 'string') {
            diff = a.localeCompare(b);
        }
        else if (a == null && b == null) ;
        else if (a == null) {
            diff = -1;
        }
        else if (b == null) {
            diff = 1;
        }
        else {
            diff = String(a).localeCompare(String(b));
        }
        return diff;
    }
    function compoundAscending(a, b, comparator) {
        for (var idx in a) {
            var diff = comparator(a[idx], b[idx]);
            if (diff !== 0) {
                return diff;
            }
        }
        return 0;
    }

    var __extends$Y = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$i = (undefined && undefined.__assign) || function () {
        __assign$i = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$i.apply(this, arguments);
    };
    var __decorate$E = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __values$l = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$v = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$j = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$v(arguments[i]));
        return ar;
    };
    var Group = /** @class */ (function (_super) {
        __extends$Y(Group, _super);
        function Group(opts) {
            var _a;
            var _this = _super.call(this) || this;
            _this.opts = opts;
            _this.clipPath = new Path2D();
            _this.opacity = 1;
            _this.lastBBox = undefined;
            var _b = opts || {}, zIndex = _b.zIndex, zIndexSubOrder = _b.zIndexSubOrder;
            _this.isContainerNode = true;
            if (zIndex !== undefined) {
                _this.zIndex = zIndex;
            }
            if (zIndexSubOrder !== undefined) {
                _this.zIndexSubOrder = zIndexSubOrder;
            }
            _this.name = (_a = _this.opts) === null || _a === void 0 ? void 0 : _a.name;
            return _this;
        }
        Group.prototype.zIndexChanged = function () {
            var _a;
            if (this.layer) {
                (_a = this._scene) === null || _a === void 0 ? void 0 : _a.moveLayer(this.layer, this.zIndex, this.zIndexSubOrder);
            }
        };
        Group.prototype.isLayer = function () {
            return this.layer != null;
        };
        Group.prototype._setScene = function (scene) {
            var _this = this;
            var _a;
            if (this._scene && this.layer) {
                this._scene.removeLayer(this.layer);
                this.layer = undefined;
            }
            if (this.layer) {
                throw new Error('AG Charts - unable to deregister scene rendering layer!');
            }
            _super.prototype._setScene.call(this, scene);
            if (scene && ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.layer)) {
                var _b = this.opts || {}, zIndex = _b.zIndex, zIndexSubOrder = _b.zIndexSubOrder, name_1 = _b.name;
                var getComputedOpacity = function () { return _this.getComputedOpacity(); };
                var getVisibility = function () { return _this.getVisibility(); };
                this.layer = scene.addLayer({ zIndex: zIndex, zIndexSubOrder: zIndexSubOrder, name: name_1, getComputedOpacity: getComputedOpacity, getVisibility: getVisibility });
            }
        };
        Group.prototype.getComputedOpacity = function () {
            var opacity = 1;
            var node = this;
            do {
                if (node instanceof Group) {
                    opacity *= node.opacity;
                }
            } while ((node = node.parent));
            return opacity;
        };
        Group.prototype.getVisibility = function () {
            var node = this;
            var visible = this.visible;
            while ((node = node.parent)) {
                if (node.visible) {
                    continue;
                }
                visible = node.visible;
            }
            return visible;
        };
        Group.prototype.visibilityChanged = function () {
            if (this.layer) {
                this.layer.enabled = this.visible;
            }
        };
        Group.prototype.markDirty = function (source, type) {
            if (type === void 0) { type = RedrawType.TRIVIAL; }
            var parentType = type <= RedrawType.MINOR ? RedrawType.TRIVIAL : type;
            _super.prototype.markDirty.call(this, source, type, parentType);
        };
        // We consider a group to be boundless, thus any point belongs to it.
        Group.prototype.containsPoint = function (_x, _y) {
            return true;
        };
        Group.prototype.computeBBox = function () {
            var left = Infinity;
            var right = -Infinity;
            var top = Infinity;
            var bottom = -Infinity;
            this.computeTransformMatrix();
            this.children.forEach(function (child) {
                if (!child.visible) {
                    return;
                }
                var bbox = child.computeTransformedBBox();
                if (!bbox) {
                    return;
                }
                var x = bbox.x;
                var y = bbox.y;
                if (x < left) {
                    left = x;
                }
                if (y < top) {
                    top = y;
                }
                if (x + bbox.width > right) {
                    right = x + bbox.width;
                }
                if (y + bbox.height > bottom) {
                    bottom = y + bbox.height;
                }
            });
            return new BBox(left, top, right - left, bottom - top);
        };
        Group.prototype.computeTransformedBBox = function () {
            return this.computeBBox();
        };
        Group.prototype.render = function (renderCtx) {
            var e_1, _a;
            var _b = this.opts, _c = (_b === void 0 ? {} : _b).name, name = _c === void 0 ? undefined : _c;
            var _d = this._debug, _e = (_d === void 0 ? {} : _d).consoleLog, consoleLog = _e === void 0 ? false : _e;
            var _f = this, dirty = _f.dirty, dirtyZIndex = _f.dirtyZIndex, clipPath = _f.clipPath, layer = _f.layer, children = _f.children;
            var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, clipBBox = renderCtx.clipBBox, resized = renderCtx.resized, stats = renderCtx.stats;
            var isDirty = dirty >= RedrawType.MINOR || dirtyZIndex || resized;
            var isChildDirty = isDirty || children.some(function (n) { return n.dirty >= RedrawType.TRIVIAL; });
            if (name && consoleLog) {
                console.log({ name: name, group: this, isDirty: isDirty, isChildDirty: isChildDirty, renderCtx: renderCtx, forceRender: forceRender });
            }
            if (layer) {
                // If bounding-box of a layer changes, force re-render.
                var currentBBox = this.computeBBox();
                if (this.lastBBox === undefined || !this.lastBBox.equals(currentBBox)) {
                    forceRender = true;
                    this.lastBBox = currentBBox;
                }
                else if (!currentBBox.isInfinite()) {
                    // bbox for path2D is currently (Infinity) not calculated
                    // If it's not a path2D, turn off forceRender
                    // By default there is no need to force redraw a group which has it's own canvas layer
                    // as the layer is independent of any other layer
                    forceRender = false;
                }
            }
            if (!isDirty && !isChildDirty && !forceRender) {
                if (name && consoleLog && stats) {
                    var counts = this.nodeCount;
                    console.log({ name: name, result: 'skipping', renderCtx: renderCtx, counts: counts, group: this });
                }
                if (layer && stats) {
                    stats.layersSkipped++;
                    stats.nodesSkipped += this.nodeCount.count;
                }
                this.markClean({ recursive: false });
                // Nothing to do.
                return;
            }
            var groupVisible = this.visible;
            if (layer) {
                // Switch context to the canvas layer we use for this group.
                ctx = layer.context;
                ctx.save();
                ctx.setTransform(renderCtx.ctx.getTransform());
                forceRender = true;
                layer.clear();
                if (clipBBox) {
                    var width = clipBBox.width, height = clipBBox.height, x = clipBBox.x, y = clipBBox.y;
                    if (consoleLog) {
                        console.log({ name: name, clipBBox: clipBBox, ctxTransform: ctx.getTransform(), renderCtx: renderCtx, group: this });
                    }
                    clipPath.clear();
                    clipPath.rect(x, y, width, height);
                    clipPath.draw(ctx);
                    ctx.clip();
                }
            }
            else {
                // Only apply opacity if this isn't a distinct layer - opacity will be applied
                // at composition time.
                ctx.globalAlpha *= this.opacity;
            }
            // A group can have `scaling`, `rotation`, `translation` properties
            // that are applied to the canvas context before children are rendered,
            // so all children can be transformed at once.
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            clipBBox = clipBBox ? this.matrix.inverse().transformBBox(clipBBox) : undefined;
            if (dirtyZIndex) {
                this.sortChildren();
                forceRender = true;
            }
            // Reduce churn if renderCtx is identical.
            var renderContextChanged = forceRender !== renderCtx.forceRender || clipBBox !== renderCtx.clipBBox || ctx !== renderCtx.ctx;
            var childRenderContext = renderContextChanged ? __assign$i(__assign$i({}, renderCtx), { ctx: ctx, forceRender: forceRender, clipBBox: clipBBox }) : renderCtx;
            // Render visible children.
            var skipped = 0;
            try {
                for (var children_1 = __values$l(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                    var child = children_1_1.value;
                    if (!child.visible || !groupVisible) {
                        // Skip invisible children, but make sure their dirty flag is reset.
                        child.markClean();
                        if (stats)
                            skipped += child.nodeCount.count;
                        continue;
                    }
                    if (!forceRender && child.dirty === RedrawType.NONE) {
                        // Skip children that don't need to be redrawn.
                        if (stats)
                            skipped += child.nodeCount.count;
                        continue;
                    }
                    // Render marks this node (and children) as clean - no need to explicitly markClean().
                    ctx.save();
                    child.render(childRenderContext);
                    ctx.restore();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (stats)
                stats.nodesSkipped += skipped;
            // Render marks this node as clean - no need to explicitly markClean().
            _super.prototype.render.call(this, renderCtx);
            if (layer) {
                if (stats)
                    stats.layersRendered++;
                ctx.restore();
                layer.snapshot();
            }
            if (name && consoleLog && stats) {
                var counts = this.nodeCount;
                console.log({ name: name, result: 'rendered', skipped: skipped, renderCtx: renderCtx, counts: counts, group: this });
            }
        };
        Group.prototype.sortChildren = function () {
            this.dirtyZIndex = false;
            this.children.sort(function (a, b) {
                var _a, _b;
                return compoundAscending(__spread$j([a.zIndex], ((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), [a.serialNumber]), __spread$j([b.zIndex], ((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), [b.serialNumber]), ascendingStringNumberUndefined);
            });
        };
        Group.className = 'Group';
        __decorate$E([
            SceneChangeDetection({
                convertor: function (v) { return Math.min(1, Math.max(0, v)); },
            })
        ], Group.prototype, "opacity", void 0);
        return Group;
    }(Node));

    /**
     * Wraps a native OffscreenCanvas and overrides its OffscreenCanvasRenderingContext2D to
     * provide resolution independent rendering based on `window.devicePixelRatio`.
     */
    var HdpiOffscreenCanvas = /** @class */ (function () {
        // The width/height attributes of the Canvas element default to
        // 300/150 according to w3.org.
        function HdpiOffscreenCanvas(_a) {
            var _b = _a.width, width = _b === void 0 ? 600 : _b, _c = _a.height, height = _c === void 0 ? 300 : _c, _d = _a.overrideDevicePixelRatio, overrideDevicePixelRatio = _d === void 0 ? undefined : _d;
            this.enabled = true;
            // `NaN` is deliberate here, so that overrides are always applied
            // and the `resetTransform` inside the `resize` method works in IE11.
            this._pixelRatio = NaN;
            this._width = 0;
            this._height = 0;
            this.canvas = new OffscreenCanvas(width, height);
            this.context = this.canvas.getContext('2d');
            this.imageSource = this.canvas.transferToImageBitmap();
            this.setPixelRatio(overrideDevicePixelRatio);
            this.resize(width, height);
        }
        HdpiOffscreenCanvas.isSupported = function () {
            return window['OffscreenCanvas'] != null;
        };
        HdpiOffscreenCanvas.prototype.snapshot = function () {
            this.imageSource.close();
            this.imageSource = this.canvas.transferToImageBitmap();
        };
        HdpiOffscreenCanvas.prototype.destroy = function () {
            this.imageSource.close();
            // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.
            // See https://bugs.webkit.org/show_bug.cgi?id=195325.
            this.canvas.width = 0;
            this.canvas.height = 0;
            this.context.clearRect(0, 0, 0, 0);
        };
        HdpiOffscreenCanvas.prototype.clear = function () {
            this.context.save();
            this.context.resetTransform();
            this.context.clearRect(0, 0, this.width, this.height);
            this.context.restore();
        };
        Object.defineProperty(HdpiOffscreenCanvas.prototype, "pixelRatio", {
            get: function () {
                return this._pixelRatio;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Changes the pixel ratio of the Canvas element to the given value,
         * or uses the window.devicePixelRatio (default), then resizes the Canvas
         * element accordingly (default).
         */
        HdpiOffscreenCanvas.prototype.setPixelRatio = function (ratio) {
            var pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;
            if (!isDesktop()) {
                // Mobile browsers have stricter memory limits, we reduce rendering resolution to
                // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they
                // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.
                pixelRatio = 1;
            }
            if (pixelRatio === this.pixelRatio) {
                return;
            }
            HdpiCanvas.overrideScale(this.context, pixelRatio);
            this._pixelRatio = pixelRatio;
            this.resize(this.width, this.height);
        };
        Object.defineProperty(HdpiOffscreenCanvas.prototype, "width", {
            get: function () {
                return this._width;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HdpiOffscreenCanvas.prototype, "height", {
            get: function () {
                return this._height;
            },
            enumerable: false,
            configurable: true
        });
        HdpiOffscreenCanvas.prototype.resize = function (width, height) {
            if (!(width > 0 && height > 0)) {
                return;
            }
            var _a = this, canvas = _a.canvas, context = _a.context, pixelRatio = _a.pixelRatio;
            canvas.width = Math.round(width * pixelRatio);
            canvas.height = Math.round(height * pixelRatio);
            context.resetTransform();
            this._width = width;
            this._height = height;
        };
        return HdpiOffscreenCanvas;
    }());

    var __assign$h = (undefined && undefined.__assign) || function () {
        __assign$h = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$h.apply(this, arguments);
    };
    var __awaiter$f = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$f = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$u = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$i = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$u(arguments[i]));
        return ar;
    };
    var __values$k = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var Scene = /** @class */ (function () {
        function Scene(opts) {
            var _a, _b;
            this.id = createId(this);
            this.layers = [];
            this._nextZIndex = 0;
            this._nextLayerId = 0;
            this._dirty = false;
            this._root = null;
            this.debug = {
                dirtyTree: false,
                stats: false,
                renderBoundingBoxes: false,
                consoleLog: false,
            };
            var _c = opts.document, document = _c === void 0 ? window.document : _c, _d = opts.mode, mode = _d === void 0 ? windowValue('agChartsSceneRenderModel') || 'adv-composite' : _d, width = opts.width, height = opts.height, _e = opts.overrideDevicePixelRatio, overrideDevicePixelRatio = _e === void 0 ? undefined : _e;
            this.overrideDevicePixelRatio = overrideDevicePixelRatio;
            this.opts = { document: document, mode: mode };
            this.debug.consoleLog = windowValue('agChartsDebug') === true;
            this.debug.stats = (_a = windowValue('agChartsSceneStats')) !== null && _a !== void 0 ? _a : false;
            this.debug.dirtyTree = (_b = windowValue('agChartsSceneDirtyTree')) !== null && _b !== void 0 ? _b : false;
            this.canvas = new HdpiCanvas({ document: document, width: width, height: height, overrideDevicePixelRatio: overrideDevicePixelRatio });
            this.ctx = this.canvas.context;
        }
        Object.defineProperty(Scene.prototype, "container", {
            get: function () {
                return this.canvas.container;
            },
            set: function (value) {
                this.canvas.container = value;
            },
            enumerable: false,
            configurable: true
        });
        Scene.prototype.download = function (fileName, fileFormat) {
            this.canvas.download(fileName, fileFormat);
        };
        Scene.prototype.getDataURL = function (type) {
            return this.canvas.getDataURL(type);
        };
        Object.defineProperty(Scene.prototype, "width", {
            get: function () {
                return this.pendingSize ? this.pendingSize[0] : this.canvas.width;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Scene.prototype, "height", {
            get: function () {
                return this.pendingSize ? this.pendingSize[1] : this.canvas.height;
            },
            enumerable: false,
            configurable: true
        });
        Scene.prototype.resize = function (width, height) {
            width = Math.round(width);
            height = Math.round(height);
            // HdpiCanvas doesn't allow width/height <= 0.
            var lessThanZero = width <= 0 || height <= 0;
            var unchanged = width === this.width && height === this.height;
            if (unchanged || lessThanZero) {
                return false;
            }
            this.pendingSize = [width, height];
            this.markDirty();
            return true;
        };
        Scene.prototype.addLayer = function (opts) {
            var _a;
            var mode = this.opts.mode;
            var layeredModes = ['composite', 'dom-composite', 'adv-composite'];
            if (!layeredModes.includes(mode)) {
                return undefined;
            }
            var _b = opts.zIndex, zIndex = _b === void 0 ? this._nextZIndex++ : _b, name = opts.name, zIndexSubOrder = opts.zIndexSubOrder, getComputedOpacity = opts.getComputedOpacity, getVisibility = opts.getVisibility;
            var _c = this, width = _c.width, height = _c.height, overrideDevicePixelRatio = _c.overrideDevicePixelRatio;
            var domLayer = mode === 'dom-composite';
            var advLayer = mode === 'adv-composite';
            var canvas = !advLayer || !HdpiOffscreenCanvas.isSupported()
                ? new HdpiCanvas({
                    document: this.opts.document,
                    width: width,
                    height: height,
                    domLayer: domLayer,
                    zIndex: zIndex,
                    name: name,
                    overrideDevicePixelRatio: overrideDevicePixelRatio,
                })
                : new HdpiOffscreenCanvas({
                    width: width,
                    height: height,
                    overrideDevicePixelRatio: overrideDevicePixelRatio,
                });
            var newLayer = {
                id: this._nextLayerId++,
                name: name,
                zIndex: zIndex,
                zIndexSubOrder: zIndexSubOrder,
                canvas: canvas,
                getComputedOpacity: getComputedOpacity,
                getVisibility: getVisibility,
            };
            if (zIndex >= this._nextZIndex) {
                this._nextZIndex = zIndex + 1;
            }
            this.layers.push(newLayer);
            this.sortLayers();
            if (domLayer) {
                var domCanvases = this.layers
                    .map(function (v) { return v.canvas; })
                    .filter(function (v) { return v instanceof HdpiCanvas; });
                var newLayerIndex = domCanvases.findIndex(function (v) { return v === canvas; });
                var lastLayer = (_a = domCanvases[newLayerIndex - 1]) !== null && _a !== void 0 ? _a : this.canvas;
                lastLayer.element.insertAdjacentElement('afterend', canvas.element);
            }
            if (this.debug.consoleLog) {
                console.log({ layers: this.layers });
            }
            return newLayer.canvas;
        };
        Scene.prototype.removeLayer = function (canvas) {
            var index = this.layers.findIndex(function (l) { return l.canvas === canvas; });
            if (index >= 0) {
                this.layers.splice(index, 1);
                canvas.destroy();
                this.markDirty();
                if (this.debug.consoleLog) {
                    console.log({ layers: this.layers });
                }
            }
        };
        Scene.prototype.moveLayer = function (canvas, newZIndex, newZIndexSubOrder) {
            var layer = this.layers.find(function (l) { return l.canvas === canvas; });
            if (layer) {
                layer.zIndex = newZIndex;
                layer.zIndexSubOrder = newZIndexSubOrder;
                this.sortLayers();
                this.markDirty();
                if (this.debug.consoleLog) {
                    console.log({ layers: this.layers });
                }
            }
        };
        Scene.prototype.sortLayers = function () {
            this.layers.sort(function (a, b) {
                var _a, _b;
                return compoundAscending(__spread$i([a.zIndex], ((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), [a.id]), __spread$i([b.zIndex], ((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), [b.id]), ascendingStringNumberUndefined);
            });
        };
        Scene.prototype.markDirty = function () {
            this._dirty = true;
        };
        Object.defineProperty(Scene.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Scene.prototype, "root", {
            get: function () {
                return this._root;
            },
            set: function (node) {
                if (node === this._root) {
                    return;
                }
                if (this._root) {
                    this._root._setScene();
                }
                this._root = node;
                if (node) {
                    // If `node` is the root node of another scene ...
                    if (node.parent === null && node.scene && node.scene !== this) {
                        node.scene.root = null;
                    }
                    node._setScene(this);
                }
                this.markDirty();
            },
            enumerable: false,
            configurable: true
        });
        /** Alternative to destroy() that preserves re-usable resources. */
        Scene.prototype.strip = function () {
            var e_1, _a;
            var layers = this.layers;
            try {
                for (var layers_1 = __values$k(layers), layers_1_1 = layers_1.next(); !layers_1_1.done; layers_1_1 = layers_1.next()) {
                    var layer = layers_1_1.value;
                    layer.canvas.destroy();
                    delete layer['canvas'];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (layers_1_1 && !layers_1_1.done && (_a = layers_1.return)) _a.call(layers_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            layers.splice(0, layers.length);
            this.root = null;
            this._dirty = false;
            this.ctx.resetTransform();
        };
        Scene.prototype.destroy = function () {
            this.container = undefined;
            this.strip();
            this.canvas.destroy();
            Object.assign(this, { canvas: undefined, ctx: undefined });
        };
        Scene.prototype.render = function (opts) {
            return __awaiter$f(this, void 0, void 0, function () {
                var _a, _b, debugSplitTimes, _c, extraDebugStats, _d, canvas, ctx, root, layers, pendingSize, mode, renderCtx, canvasCleared, _e, dirtyTree, paths;
                var _f;
                return __generator$f(this, function (_g) {
                    _a = opts || {}, _b = _a.debugSplitTimes, debugSplitTimes = _b === void 0 ? [performance.now()] : _b, _c = _a.extraDebugStats, extraDebugStats = _c === void 0 ? {} : _c;
                    _d = this, canvas = _d.canvas, ctx = _d.ctx, root = _d.root, layers = _d.layers, pendingSize = _d.pendingSize, mode = _d.opts.mode;
                    if (pendingSize) {
                        (_f = this.canvas).resize.apply(_f, __spread$i(pendingSize));
                        this.layers.forEach(function (layer) {
                            var _a;
                            return (_a = layer.canvas).resize.apply(_a, __spread$i(pendingSize));
                        });
                        this.pendingSize = undefined;
                    }
                    if (root && !root.visible) {
                        this._dirty = false;
                        return [2 /*return*/];
                    }
                    if (root && !this.dirty) {
                        if (this.debug.consoleLog) {
                            console.log('no-op', {
                                redrawType: RedrawType[root.dirty],
                                tree: this.buildTree(root),
                            });
                        }
                        this.debugStats(debugSplitTimes, ctx, undefined, extraDebugStats);
                        return [2 /*return*/];
                    }
                    renderCtx = {
                        ctx: ctx,
                        forceRender: true,
                        resized: !!pendingSize,
                    };
                    if (this.debug.stats === 'detailed') {
                        renderCtx.stats = { layersRendered: 0, layersSkipped: 0, nodesRendered: 0, nodesSkipped: 0 };
                    }
                    canvasCleared = false;
                    if (!root || root.dirty >= RedrawType.TRIVIAL) {
                        // start with a blank canvas, clear previous drawing
                        canvasCleared = true;
                        canvas.clear();
                    }
                    if (root && this.debug.dirtyTree) {
                        _e = this.buildDirtyTree(root), dirtyTree = _e.dirtyTree, paths = _e.paths;
                        console.log({ dirtyTree: dirtyTree, paths: paths });
                    }
                    if (root && canvasCleared) {
                        if (this.debug.consoleLog) {
                            console.log('before', {
                                redrawType: RedrawType[root.dirty],
                                canvasCleared: canvasCleared,
                                tree: this.buildTree(root),
                            });
                        }
                        if (root.visible) {
                            ctx.save();
                            root.render(renderCtx);
                            ctx.restore();
                        }
                    }
                    if (mode !== 'dom-composite' && layers.length > 0 && canvasCleared) {
                        ctx.save();
                        ctx.setTransform(1 / canvas.pixelRatio, 0, 0, 1 / canvas.pixelRatio, 0, 0);
                        layers.forEach(function (_a) {
                            var _b = _a.canvas, imageSource = _b.imageSource, enabled = _b.enabled, getComputedOpacity = _a.getComputedOpacity, getVisibility = _a.getVisibility;
                            if (!enabled || !getVisibility()) {
                                return;
                            }
                            ctx.globalAlpha = getComputedOpacity();
                            ctx.drawImage(imageSource, 0, 0);
                        });
                        ctx.restore();
                    }
                    this._dirty = false;
                    this.debugStats(debugSplitTimes, ctx, renderCtx.stats, extraDebugStats);
                    if (root && this.debug.consoleLog) {
                        console.log('after', { redrawType: RedrawType[root.dirty], canvasCleared: canvasCleared, tree: this.buildTree(root) });
                    }
                    return [2 /*return*/];
                });
            });
        };
        Scene.prototype.debugStats = function (debugSplitTimes, ctx, renderCtxStats, extraDebugStats) {
            var e_2, _a;
            if (extraDebugStats === void 0) { extraDebugStats = {}; }
            var end = performance.now();
            if (this.debug.stats) {
                var start = debugSplitTimes[0];
                debugSplitTimes.push(end);
                var pct = function (rendered, skipped) {
                    var total = rendered + skipped;
                    return rendered + " / " + total + " (" + Math.round((100 * rendered) / total) + "%)";
                };
                var time_1 = function (start, end) {
                    return Math.round((end - start) * 100) / 100 + "ms";
                };
                var _b = renderCtxStats !== null && renderCtxStats !== void 0 ? renderCtxStats : {}, _c = _b.layersRendered, layersRendered = _c === void 0 ? 0 : _c, _d = _b.layersSkipped, layersSkipped = _d === void 0 ? 0 : _d, _e = _b.nodesRendered, nodesRendered = _e === void 0 ? 0 : _e, _f = _b.nodesSkipped, nodesSkipped = _f === void 0 ? 0 : _f;
                var splits = debugSplitTimes
                    .map(function (t, i) { return (i > 0 ? time_1(debugSplitTimes[i - 1], t) : null); })
                    .filter(function (v) { return v != null; })
                    .join(' + ');
                var extras = Object.entries(extraDebugStats)
                    .map(function (_a) {
                    var _b = __read$u(_a, 2), k = _b[0], v = _b[1];
                    return k + ": " + v;
                })
                    .join(' ; ');
                var stats = [
                    time_1(start, end) + " (" + splits + ")",
                    "" + extras,
                    this.debug.stats === 'detailed' ? "Layers: " + pct(layersRendered, layersSkipped) : null,
                    this.debug.stats === 'detailed' ? "Nodes: " + pct(nodesRendered, nodesSkipped) : null,
                ].filter(function (v) { return v != null; });
                var lineHeight = 15;
                ctx.save();
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, 200, 10 + lineHeight * stats.length);
                ctx.fillStyle = 'black';
                var index = 0;
                try {
                    for (var stats_1 = __values$k(stats), stats_1_1 = stats_1.next(); !stats_1_1.done; stats_1_1 = stats_1.next()) {
                        var stat = stats_1_1.value;
                        ctx.fillText(stat, 2, 10 + index++ * lineHeight);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (stats_1_1 && !stats_1_1.done && (_a = stats_1.return)) _a.call(stats_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                ctx.restore();
            }
        };
        Scene.prototype.buildTree = function (node) {
            var _this = this;
            var _a;
            var name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;
            return __assign$h({ name: name,
                node: node, dirty: RedrawType[node.dirty] }, node.children
                .map(function (c) { return _this.buildTree(c); })
                .reduce(function (result, childTree) {
                var treeNodeName = childTree.name, _a = childTree.node, visible = _a.visible, opacity = _a.opacity, zIndex = _a.zIndex, zIndexSubOrder = _a.zIndexSubOrder, childNode = childTree.node;
                if (!visible || opacity <= 0) {
                    treeNodeName = "(" + treeNodeName + ")";
                }
                if (childNode instanceof Group && childNode.isLayer()) {
                    treeNodeName = "*" + treeNodeName + "*";
                }
                var key = [
                    "" + (treeNodeName !== null && treeNodeName !== void 0 ? treeNodeName : '<unknown>'),
                    "z: " + zIndex,
                    zIndexSubOrder && "zo: " + zIndexSubOrder.join(' / '),
                ]
                    .filter(function (v) { return !!v; })
                    .join(' ');
                result[key] = childTree;
                return result;
            }, {}));
        };
        Scene.prototype.buildDirtyTree = function (node) {
            var _this = this;
            var _a;
            if (node.dirty === RedrawType.NONE) {
                return { dirtyTree: {}, paths: [] };
            }
            var childrenDirtyTree = node.children.map(function (c) { return _this.buildDirtyTree(c); }).filter(function (c) { return c.paths.length > 0; });
            var name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;
            var paths = childrenDirtyTree.length === 0
                ? [name]
                : childrenDirtyTree
                    .map(function (c) { return c.paths; })
                    .reduce(function (r, p) { return r.concat(p); }, [])
                    .map(function (p) { return name + "." + p; });
            return {
                dirtyTree: __assign$h({ name: name,
                    node: node, dirty: RedrawType[node.dirty] }, childrenDirtyTree
                    .map(function (c) { return c.dirtyTree; })
                    .filter(function (t) { return t.dirty !== undefined; })
                    .reduce(function (result, childTree) {
                    result[childTree.name || '<unknown>'] = childTree;
                    return result;
                }, {})),
                paths: paths,
            };
        };
        Scene.className = 'Scene';
        return Scene;
    }());

    var Observable = /** @class */ (function () {
        function Observable() {
            // Note that these maps can't be specified generically, so they are kept untyped.
            // Some methods in this class only need generics in their signatures, the generics inside the methods
            // are just for clarity. The generics in signatures allow for static type checking of user provided
            // listeners and for type inference, so that the users wouldn't have to specify the type of parameters
            // of their inline lambdas.
            this.allEventListeners = new Map(); // event type => event listener => scopes
        }
        Observable.prototype.addEventListener = function (type, listener, scope) {
            if (scope === void 0) { scope = this; }
            var allEventListeners = this.allEventListeners;
            var eventListeners = allEventListeners.get(type);
            if (!eventListeners) {
                eventListeners = new Map();
                allEventListeners.set(type, eventListeners);
            }
            if (!eventListeners.has(listener)) {
                var scopes_1 = new Set();
                eventListeners.set(listener, scopes_1);
            }
            var scopes = eventListeners.get(listener);
            if (scopes) {
                scopes.add(scope);
            }
        };
        Observable.prototype.removeEventListener = function (type, listener, scope) {
            if (scope === void 0) { scope = this; }
            var allEventListeners = this.allEventListeners;
            var eventListeners = allEventListeners.get(type);
            if (eventListeners) {
                if (listener) {
                    var scopes = eventListeners.get(listener);
                    if (scopes) {
                        scopes.delete(scope);
                        if (!scopes.size) {
                            eventListeners.delete(listener);
                        }
                    }
                }
                else {
                    eventListeners.clear();
                }
            }
        };
        Observable.prototype.clearEventListeners = function () {
            this.allEventListeners = new Map();
        };
        Observable.prototype.notifyEventListeners = function (types) {
            var _this = this;
            var allEventListeners = this.allEventListeners;
            types.forEach(function (type) {
                var listeners = allEventListeners.get(type);
                if (listeners) {
                    listeners.forEach(function (scopes, listener) {
                        scopes.forEach(function (scope) { return listener.call(scope, { type: type, source: _this }); });
                    });
                }
            });
        };
        // 'source' is added automatically and is always the object this method belongs to.
        Observable.prototype.fireEvent = function (event) {
            var listeners = this.allEventListeners.get(event.type);
            if (listeners) {
                var eventWithSource_1 = Object.assign(event, { source: this });
                listeners.forEach(function (scopes, listener) {
                    scopes.forEach(function (scope) { return listener.call(scope, eventWithSource_1); });
                });
            }
        };
        Observable.privateKeyPrefix = '_';
        return Observable;
    }());

    var __values$j = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var EnterNode = /** @class */ (function () {
        function EnterNode(parent, datum) {
            this.next = null;
            this.scene = parent.scene;
            this.parent = parent;
            this.datum = datum;
        }
        EnterNode.prototype.appendChild = function (node) {
            // This doesn't work without the `strict: true` in the `tsconfig.json`,
            // so we must have two `if` checks below, instead of this single one.
            // if (this.next && !Node.isNode(this.next)) {
            //     throw new Error(`${this.next} is not a Node.`);
            // }
            if (this.next === null) {
                return this.parent.insertBefore(node, null);
            }
            if (!Node.isNode(this.next)) {
                throw new Error(this.next + " is not a Node.");
            }
            return this.parent.insertBefore(node, this.next);
        };
        EnterNode.prototype.insertBefore = function (node, nextNode) {
            return this.parent.insertBefore(node, nextNode);
        };
        return EnterNode;
    }());
    /**
     * G - type of the selected node(s).
     * GDatum - type of the datum of the selected node(s).
     * P - type of the parent node(s).
     * PDatum - type of the datum of the parent node(s).
     */
    var Selection = /** @class */ (function () {
        function Selection(groups, parents) {
            this.groups = groups;
            this.parents = parents;
        }
        Selection.select = function (node) {
            return new Selection([[typeof node === 'function' ? node() : node]], [undefined]);
        };
        Selection.selectAll = function (nodes) {
            return new Selection([nodes == null ? [] : nodes], [undefined]);
        };
        /**
         * Creates new nodes, appends them to the nodes of this selection and returns them
         * as a new selection. The created nodes inherit the datums and the parents of the nodes
         * they replace.
         * @param Class The constructor function to use to create the new nodes.
         */
        Selection.prototype.append = function (Class) {
            return this.select(function (node) {
                return node.appendChild(new Class());
            });
        };
        /**
         * Runs the given selector that returns a single node for every node in each group.
         * The original nodes are then replaced by the nodes returned by the selector
         * and returned as a new selection.
         * The selected nodes inherit the datums and the parents of the original nodes.
         */
        Selection.prototype.select = function (selector) {
            var groups = this.groups;
            var numGroups = groups.length;
            var subgroups = [];
            for (var j = 0; j < numGroups; j++) {
                var group = groups[j];
                var groupSize = group.length;
                var subgroup = (subgroups[j] = new Array(groupSize));
                for (var i = 0; i < groupSize; i++) {
                    var node = group[i];
                    if (node) {
                        var subnode = selector(node, node.datum, i, group);
                        if (subnode) {
                            subnode.datum = node.datum;
                        }
                        subgroup[i] = subnode;
                    }
                    // else this can be a group of the `enter` selection,
                    // for example, with no nodes at the i-th position,
                    // only nodes at the end of the group
                }
            }
            return new Selection(subgroups, this.parents);
        };
        /**
         * Same as {@link select}, but uses the given {@param Class} (constructor) as a selector.
         * @param Class The constructor function to use to find matching nodes.
         */
        Selection.prototype.selectByClass = function (Class) {
            return this.select(function (node) {
                if (Node.isNode(node)) {
                    var children = node.children;
                    var n = children.length;
                    for (var i = 0; i < n; i++) {
                        var child = children[i];
                        if (child instanceof Class) {
                            return child;
                        }
                    }
                }
            });
        };
        Selection.prototype.selectByTag = function (tag) {
            return this.select(function (node) {
                if (Node.isNode(node)) {
                    var children = node.children;
                    var n = children.length;
                    for (var i = 0; i < n; i++) {
                        var child = children[i];
                        if (child.tag === tag) {
                            return child;
                        }
                    }
                }
            });
        };
        Selection.prototype.selectAllByClass = function (Class) {
            return this.selectAll(function (node) {
                var nodes = [];
                if (Node.isNode(node)) {
                    var children = node.children;
                    var n = children.length;
                    for (var i = 0; i < n; i++) {
                        var child = children[i];
                        if (child instanceof Class) {
                            nodes.push(child);
                        }
                    }
                }
                return nodes;
            });
        };
        Selection.prototype.selectAllByTag = function (tag) {
            return this.selectAll(function (node) {
                var nodes = [];
                if (Node.isNode(node)) {
                    var children = node.children;
                    var n = children.length;
                    for (var i = 0; i < n; i++) {
                        var child = children[i];
                        if (child.tag === tag) {
                            nodes.push(child);
                        }
                    }
                }
                return nodes;
            });
        };
        Selection.prototype.selectNone = function () {
            return [];
        };
        /**
         * Runs the given selector that returns a group of nodes for every node in each group.
         * The original nodes are then replaced by the groups of nodes returned by the selector
         * and returned as a new selection. The original nodes become the parent nodes for each
         * group in the new selection. The selected nodes do not inherit the datums of the original nodes.
         * If called without any parameters, creates a new selection with an empty group for each
         * node in this selection.
         */
        Selection.prototype.selectAll = function (selectorAll) {
            if (!selectorAll) {
                selectorAll = this.selectNone;
            }
            // Each subgroup is populated with the selector (run on each group node) results.
            var subgroups = [];
            // In the new selection that we return, subgroups become groups,
            // and group nodes become parents.
            var parents = [];
            var groups = this.groups;
            var groupCount = groups.length;
            for (var j = 0; j < groupCount; j++) {
                var group = groups[j];
                var groupLength = group.length;
                for (var i = 0; i < groupLength; i++) {
                    var node = group[i];
                    if (node) {
                        subgroups.push(selectorAll(node, node.datum, i, group));
                        parents.push(node);
                    }
                }
            }
            return new Selection(subgroups, parents);
        };
        /**
         * Runs the given callback for every node in this selection and returns this selection.
         * @param cb
         */
        Selection.prototype.each = function (cb) {
            var e_1, _a, e_2, _b;
            try {
                for (var _c = __values$j(this.groups), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var group = _d.value;
                    var i = 0;
                    try {
                        for (var group_1 = (e_2 = void 0, __values$j(group)), group_1_1 = group_1.next(); !group_1_1.done; group_1_1 = group_1.next()) {
                            var node = group_1_1.value;
                            if (node) {
                                cb(node, node.datum, i, group);
                            }
                            i++;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (group_1_1 && !group_1_1.done && (_b = group_1.return)) _b.call(group_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return this;
        };
        Selection.prototype.remove = function () {
            return this.each(function (node) {
                if (Node.isNode(node)) {
                    var parent_1 = node.parent;
                    if (parent_1) {
                        parent_1.removeChild(node);
                    }
                }
            });
        };
        Selection.prototype.merge = function (other) {
            var groups0 = this.groups;
            var groups1 = other.groups;
            var m0 = groups0.length;
            var m1 = groups1.length;
            var m = Math.min(m0, m1);
            var merges = new Array(m0);
            var j = 0;
            for (; j < m; j++) {
                var group0 = groups0[j];
                var group1 = groups1[j];
                var n = group0.length;
                var merge = (merges[j] = new Array(n));
                for (var i = 0; i < n; i++) {
                    var node = group0[i] || group1[i];
                    merge[i] = node || undefined;
                }
            }
            for (; j < m0; j++) {
                merges[j] = groups0[j];
            }
            return new Selection(merges, this.parents);
        };
        /**
         * Return the first non-null element in this selection.
         * If the selection is empty, returns null.
         */
        Selection.prototype.node = function () {
            var groups = this.groups;
            var numGroups = groups.length;
            for (var j = 0; j < numGroups; j++) {
                var group = groups[j];
                var groupSize = group.length;
                for (var i = 0; i < groupSize; i++) {
                    var node = group[i];
                    if (node) {
                        return node;
                    }
                }
            }
            return null;
        };
        Selection.prototype.attr = function (name, value) {
            this.each(function (node) {
                node[name] = value;
            });
            return this;
        };
        Selection.prototype.attrFn = function (name, value) {
            this.each(function (node, datum, index, group) {
                node[name] = value(node, datum, index, group);
            });
            return this;
        };
        /**
         * Invokes the given function once, passing in this selection.
         * Returns this selection. Facilitates method chaining.
         * @param cb
         */
        Selection.prototype.call = function (cb) {
            cb(this);
            return this;
        };
        Object.defineProperty(Selection.prototype, "size", {
            /**
             * Returns the total number of nodes in this selection.
             */
            get: function () {
                var e_3, _a, e_4, _b;
                var size = 0;
                try {
                    for (var _c = __values$j(this.groups), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var group = _d.value;
                        try {
                            for (var group_2 = (e_4 = void 0, __values$j(group)), group_2_1 = group_2.next(); !group_2_1.done; group_2_1 = group_2.next()) {
                                var node = group_2_1.value;
                                if (node) {
                                    size++;
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (group_2_1 && !group_2_1.done && (_b = group_2.return)) _b.call(group_2);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return size;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Selection.prototype, "data", {
            /**
             * Returns the array of data for the selected elements.
             */
            get: function () {
                var e_5, _a, e_6, _b;
                var data = new Array(this.size);
                var i = 0;
                try {
                    for (var _c = __values$j(this.groups), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var group = _d.value;
                        try {
                            for (var group_3 = (e_6 = void 0, __values$j(group)), group_3_1 = group_3.next(); !group_3_1.done; group_3_1 = group_3.next()) {
                                var node = group_3_1.value;
                                if (node) {
                                    data[i++] = node.datum;
                                }
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (group_3_1 && !group_3_1.done && (_b = group_3.return)) _b.call(group_3);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                return data;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Selection.prototype, "enter", {
            get: function () {
                return new Selection(this.enterGroups ? this.enterGroups : [[]], this.parents);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Selection.prototype, "exit", {
            get: function () {
                return new Selection(this.exitGroups ? this.exitGroups : [[]], this.parents);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Binds the given value to each selected node and returns this selection
         * with its {@link GDatum} type changed to the type of the given value.
         * This method doesn't compute a join and doesn't affect indexes or the enter and exit selections.
         * This method can also be used to clear bound data.
         * @param value
         */
        Selection.prototype.setDatum = function (value) {
            return this.each(function (node) {
                node.datum = value;
            });
        };
        Object.defineProperty(Selection.prototype, "datum", {
            /**
             * Returns the bound datum for the first non-null element in the selection.
             * This is generally useful only if you know the selection contains exactly one element.
             */
            get: function () {
                var node = this.node();
                return node ? node.datum : null;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Binds the specified array of values with the selected nodes, returning a new selection
         * that represents the _update_ selection: the nodes successfully bound to the values.
         * Also defines the {@link enter} and {@link exit} selections on the returned selection,
         * which can be used to add or remove the nodes to correspond to the new data.
         * The `values` is an array of values of a particular type, or a function that returns
         * an array of values for each group.
         * When values are assigned to the nodes, they are stored in the {@link Node.datum} property.
         * @param values
         * @param key
         */
        Selection.prototype.setData = function (values, key) {
            if (typeof values !== 'function') {
                var data_1 = values;
                values = function () { return data_1; };
            }
            var groups = this.groups;
            var parents = this.parents;
            var numGroups = groups.length;
            var updateGroups = new Array(numGroups);
            var enterGroups = new Array(numGroups);
            var exitGroups = new Array(numGroups);
            for (var j = 0; j < numGroups; j++) {
                var group = groups[j];
                var parent_2 = parents[j];
                if (!parent_2) {
                    throw new Error("Group #" + j + " has no parent: " + group);
                }
                var groupSize = group.length;
                var data = values(parent_2, parent_2.datum, j, parents);
                var dataSize = data.length;
                var enterGroup = (enterGroups[j] = new Array(dataSize));
                var updateGroup = (updateGroups[j] = new Array(dataSize));
                var exitGroup = (exitGroups[j] = new Array(groupSize));
                if (key) {
                    this.bindKey(parent_2, group, enterGroup, updateGroup, exitGroup, data, key);
                }
                else {
                    this.bindIndex(parent_2, group, enterGroup, updateGroup, exitGroup, data);
                }
                // Now connect the enter nodes to their following update node, such that
                // appendChild can insert the materialized enter node before this node,
                // rather than at the end of the parent node.
                for (var i0 = 0, i1 = 0; i0 < dataSize; i0++) {
                    var previous = enterGroup[i0];
                    if (previous) {
                        if (i0 >= i1) {
                            i1 = i0 + 1;
                        }
                        var next = updateGroup[i1];
                        while (!next && i1 < dataSize) {
                            i1++;
                            next = updateGroup[i1];
                        }
                        previous.next = next || null;
                    }
                }
            }
            var result = new Selection(updateGroups, parents);
            result.enterGroups = enterGroups;
            result.exitGroups = exitGroups;
            return result;
        };
        Selection.prototype.bindIndex = function (parent, group, enter, update, exit, data) {
            var groupSize = group.length;
            var dataSize = data.length;
            var i = 0;
            for (; i < dataSize; i++) {
                var node = group[i];
                if (node) {
                    node.datum = data[i];
                    update[i] = node;
                }
                else {
                    // more datums than group nodes
                    enter[i] = new EnterNode(parent, data[i]);
                }
            }
            // more group nodes than datums
            for (; i < groupSize; i++) {
                var node = group[i];
                if (node) {
                    exit[i] = node;
                }
            }
        };
        Selection.prototype.bindKey = function (parent, group, enter, update, exit, data, key) {
            var groupSize = group.length;
            var dataSize = data.length;
            var keyValues = new Array(groupSize);
            var nodeByKeyValue = {};
            // Compute the key for each node.
            // If multiple nodes have the same key, the duplicates are added to exit.
            for (var i = 0; i < groupSize; i++) {
                var node = group[i];
                if (node) {
                    var keyValue = (keyValues[i] = Selection.keyPrefix + key(node, node.datum, i, group));
                    if (keyValue in nodeByKeyValue) {
                        exit[i] = node;
                    }
                    else {
                        nodeByKeyValue[keyValue] = node;
                    }
                }
            }
            // Compute the key for each datum.
            // If there is a node associated with this key, join and add it to update.
            // If there is not (or the key is a duplicate), add it to enter.
            for (var i = 0; i < dataSize; i++) {
                var keyValue = Selection.keyPrefix + key(parent, data[i], i, data);
                var node = nodeByKeyValue[keyValue];
                if (node) {
                    update[i] = node;
                    node.datum = data[i];
                    nodeByKeyValue[keyValue] = undefined;
                }
                else {
                    enter[i] = new EnterNode(parent, data[i]);
                }
            }
            // Add any remaining nodes that were not bound to data to exit.
            for (var i = 0; i < groupSize; i++) {
                var node = group[i];
                if (node && nodeByKeyValue[keyValues[i]] === node) {
                    exit[i] = node;
                }
            }
        };
        Selection.keyPrefix = '$'; // Protect against keys like '__proto__'.
        return Selection;
    }());

    /**
     * Creates a new object with a `parent` as its prototype
     * and copies properties from the `child` into it.
     * @param parent
     * @param child
     */
    function chainObjects(parent, child) {
        var obj = Object.create(parent);
        for (var prop in child) {
            if (child.hasOwnProperty(prop)) {
                obj[prop] = child[prop];
            }
        }
        return obj;
    }
    function getValue(object, path, defaultValue) {
        var parts = Array.isArray(path) ? path : path.split('.');
        var value = object;
        try {
            parts.forEach(function (part) {
                value = value[part];
            });
        }
        catch (e) {
            if (arguments.length === 3) {
                value = defaultValue;
            }
            else {
                throw e;
            }
        }
        return value;
    }
    function emptyTarget(value) {
        return Array.isArray(value) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value)
            ? deepMerge(emptyTarget(value), value, options)
            : value;
    }
    function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function (element) {
            return cloneUnlessOtherwiseSpecified(element, options);
        });
    }
    function getMergeFunction(key, options) {
        if (!options.customMerge) {
            return deepMerge;
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === 'function' ? customMerge : deepMerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols
            ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
                return target.propertyIsEnumerable(symbol);
            })
            : [];
    }
    function getKeys(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
        try {
            return property in object;
        }
        catch (_) {
            return false;
        }
    }
    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
        return (propertyIsOnObject(target, key) && // Properties are safe to merge if they don't exist in the target yet,
            !(Object.hasOwnProperty.call(target, key) && // unsafe if they exist up the prototype chain,
                Object.propertyIsEnumerable.call(target, key))); // and also unsafe if they're nonenumerable.
    }
    function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
            getKeys(target).forEach(function (key) {
                destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
            });
        }
        getKeys(source).forEach(function (key) {
            if (propertyIsUnsafe(target, key)) {
                return;
            }
            if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
                destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
            }
            else {
                destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
            }
        });
        return destination;
    }
    function defaultIsMergeableObject(value) {
        return isNonNullObject(value) && !isSpecial(value);
    }
    function isNonNullObject(value) {
        return !!value && typeof value === 'object';
    }
    function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === '[object RegExp]' || stringValue === '[object Date]';
    }
    function deepMerge(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;
        // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
        // implementations can use it. The caller may not replace it.
        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
            return cloneUnlessOtherwiseSpecified(source, options);
        }
        else if (sourceIsArray) {
            return options.arrayMerge(target, source, options);
        }
        else {
            return mergeObject(target, source, options);
        }
    }
    // Be careful, typeof null === 'object'!
    function isObject(value) {
        return value && typeof value === 'object';
    }

    var __extends$X = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$D = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Shape = /** @class */ (function (_super) {
        __extends$X(Shape, _super);
        function Shape() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.lastInstanceId = 0;
            _this.fillOpacity = 1;
            _this.strokeOpacity = 1;
            _this.fill = Shape.defaultStyles.fill;
            /**
             * Note that `strokeStyle = null` means invisible stroke,
             * while `lineWidth = 0` means no stroke, and sometimes this can mean different things.
             * For example, a rect shape with an invisible stroke may not align to the pixel grid
             * properly because the stroke affects the rules of alignment, and arc shapes forming
             * a pie chart will have a gap between them if they have an invisible stroke, whereas
             * there would be not gap if there was no stroke at all.
             * The preferred way of making the stroke invisible is setting the `lineWidth` to zero,
             * unless specific looks that is achieved by having an invisible stroke is desired.
             */
            _this.stroke = Shape.defaultStyles.stroke;
            _this.strokeWidth = Shape.defaultStyles.strokeWidth;
            _this.lineDash = Shape.defaultStyles.lineDash;
            _this.lineDashOffset = Shape.defaultStyles.lineDashOffset;
            _this.lineCap = Shape.defaultStyles.lineCap;
            _this.lineJoin = Shape.defaultStyles.lineJoin;
            _this.opacity = Shape.defaultStyles.opacity;
            _this.fillShadow = Shape.defaultStyles.fillShadow;
            return _this;
        }
        /**
         * Creates a light-weight instance of the given shape (that serves as a template).
         * The created instance only stores the properites set on the instance itself
         * and the rest of the properties come via the prototype chain from the template.
         * This can greatly reduce memory usage in cases where one has many simular shapes,
         * for example, circles of different size, position and color. The exact memory usage
         * reduction will depend on the size of the template and the number of own properties
         * set on its lightweight instances, but will typically be around an order of magnitude
         * or more.
         *
         * Note: template shapes are not supposed to be part of the scene graph (they should not
         * have a parent).
         *
         * @param template
         */
        Shape.createInstance = function (template) {
            var shape = Object.create(template);
            shape._setParent(undefined);
            shape.id = template.id + '-Instance-' + String(++template.lastInstanceId);
            return shape;
        };
        /**
         * Restores the default styles introduced by this subclass.
         */
        Shape.prototype.restoreOwnStyles = function () {
            var styles = this.constructor.defaultStyles;
            var keys = Object.getOwnPropertyNames(styles);
            // getOwnPropertyNames is about 2.5 times faster than
            // for..in with the hasOwnProperty check and in this
            // case, where most properties are inherited, can be
            // more then an order of magnitude faster.
            for (var i = 0, n = keys.length; i < n; i++) {
                var key = keys[i];
                this[key] = styles[key];
            }
        };
        Shape.prototype.restoreAllStyles = function () {
            var styles = this.constructor.defaultStyles;
            for (var property in styles) {
                this[property] = styles[property];
            }
        };
        /**
         * Restores the base class default styles that have been overridden by this subclass.
         */
        Shape.prototype.restoreOverriddenStyles = function () {
            var styles = this.constructor.defaultStyles;
            var protoStyles = Object.getPrototypeOf(styles);
            for (var property in styles) {
                if (styles.hasOwnProperty(property) && protoStyles.hasOwnProperty(property)) {
                    this[property] = styles[property];
                }
            }
        };
        /**
         * Returns a device-pixel aligned coordinate (or length if length is supplied).
         *
         * NOTE: Not suitable for strokes, since the stroke needs to be offset to the middle
         * of a device pixel.
         */
        Shape.prototype.align = function (start, length) {
            var _a, _b, _c;
            var pixelRatio = (_c = (_b = (_a = this.scene) === null || _a === void 0 ? void 0 : _a.canvas) === null || _b === void 0 ? void 0 : _b.pixelRatio) !== null && _c !== void 0 ? _c : 1;
            var alignedStart = Math.round(start * pixelRatio) / pixelRatio;
            if (length == undefined) {
                return alignedStart;
            }
            if (length === 0) {
                return 0;
            }
            if (length < 1) {
                // Avoid hiding crisp shapes
                return Math.ceil(length * pixelRatio) / pixelRatio;
            }
            // Account for the rounding of alignedStart by increasing length to compensate before
            // alignment.
            return Math.round((length + start) * pixelRatio) / pixelRatio - alignedStart;
        };
        Shape.prototype.fillStroke = function (ctx) {
            if (!this.scene) {
                return;
            }
            var pixelRatio = this.scene.canvas.pixelRatio || 1;
            var globalAlpha = ctx.globalAlpha;
            if (this.fill) {
                ctx.fillStyle = this.fill;
                ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;
                // The canvas context scaling (depends on the device's pixel ratio)
                // has no effect on shadows, so we have to account for the pixel ratio
                // manually here.
                var fillShadow = this.fillShadow;
                if (fillShadow && fillShadow.enabled) {
                    ctx.shadowColor = fillShadow.color;
                    ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
                    ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
                    ctx.shadowBlur = fillShadow.blur * pixelRatio;
                }
                ctx.fill();
            }
            ctx.shadowColor = 'rgba(0, 0, 0, 0)';
            if (this.stroke && this.strokeWidth) {
                ctx.strokeStyle = this.stroke;
                ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;
                ctx.lineWidth = this.strokeWidth;
                if (this.lineDash) {
                    ctx.setLineDash(this.lineDash);
                }
                if (this.lineDashOffset) {
                    ctx.lineDashOffset = this.lineDashOffset;
                }
                if (this.lineCap) {
                    ctx.lineCap = this.lineCap;
                }
                if (this.lineJoin) {
                    ctx.lineJoin = this.lineJoin;
                }
                ctx.stroke();
            }
        };
        Shape.prototype.containsPoint = function (x, y) {
            return this.isPointInPath(x, y);
        };
        /**
         * Defaults for style properties. Note that properties that affect the position
         * and shape of the node are not considered style properties, for example:
         * `x`, `y`, `width`, `height`, `radius`, `rotation`, etc.
         * Can be used to reset to the original styling after some custom styling
         * has been applied (using the `restoreOwnStyles` and `restoreAllStyles` methods).
         * These static defaults are meant to be inherited by subclasses.
         */
        Shape.defaultStyles = chainObjects({}, {
            fill: 'black',
            stroke: undefined,
            strokeWidth: 0,
            lineDash: undefined,
            lineDashOffset: 0,
            lineCap: undefined,
            lineJoin: undefined,
            opacity: 1,
            fillShadow: undefined,
        });
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "fillOpacity", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "strokeOpacity", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "fill", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "stroke", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "strokeWidth", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "lineDash", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "lineDashOffset", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "lineCap", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Shape.prototype, "lineJoin", void 0);
        __decorate$D([
            SceneChangeDetection({
                redraw: RedrawType.MINOR,
                convertor: function (v) { return Math.min(1, Math.max(0, v)); },
            })
        ], Shape.prototype, "opacity", void 0);
        __decorate$D([
            SceneChangeDetection({ redraw: RedrawType.MINOR, checkDirtyOnAssignment: true })
        ], Shape.prototype, "fillShadow", void 0);
        return Shape;
    }(Node));

    var __extends$W = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$C = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Line = /** @class */ (function (_super) {
        __extends$W(Line, _super);
        function Line() {
            var _this = _super.call(this) || this;
            _this.x1 = 0;
            _this.y1 = 0;
            _this.x2 = 0;
            _this.y2 = 0;
            _this.restoreOwnStyles();
            return _this;
        }
        Line.prototype.computeBBox = function () {
            return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);
        };
        Line.prototype.isPointInPath = function (_x, _y) {
            return false;
        };
        Line.prototype.render = function (renderCtx) {
            var _a;
            var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            var x1 = this.x1;
            var y1 = this.y1;
            var x2 = this.x2;
            var y2 = this.y2;
            // Align to the pixel grid if the line is strictly vertical
            // or horizontal (but not both, i.e. a dot).
            if (x1 === x2) {
                var x = Math.round(x1) + (Math.floor(this.strokeWidth) % 2) / 2;
                x1 = x;
                x2 = x;
            }
            else if (y1 === y2) {
                var y = Math.round(y1) + (Math.floor(this.strokeWidth) % 2) / 2;
                y1 = y;
                y2 = y;
            }
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            this.fillStroke(ctx);
            (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();
            _super.prototype.render.call(this, renderCtx);
        };
        Line.className = 'Line';
        Line.defaultStyles = chainObjects(Shape.defaultStyles, {
            fill: undefined,
            strokeWidth: 1,
        });
        __decorate$C([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Line.prototype, "x1", void 0);
        __decorate$C([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Line.prototype, "y1", void 0);
        __decorate$C([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Line.prototype, "x2", void 0);
        __decorate$C([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Line.prototype, "y2", void 0);
        return Line;
    }(Shape));

    var __extends$V = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$B = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    function SceneFontChangeDetection(opts) {
        var _a = opts || {}, _b = _a.redraw, redraw = _b === void 0 ? RedrawType.MAJOR : _b, changeCb = _a.changeCb;
        return SceneChangeDetection({ redraw: redraw, type: 'font', changeCb: changeCb });
    }
    var Text = /** @class */ (function (_super) {
        __extends$V(Text, _super);
        function Text() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.x = 0;
            _this.y = 0;
            _this.lines = [];
            _this.text = '';
            _this._dirtyFont = true;
            _this.fontSize = 10;
            _this.fontFamily = 'sans-serif';
            _this.textAlign = Text.defaultStyles.textAlign;
            _this.textBaseline = Text.defaultStyles.textBaseline;
            // Multi-line text is complicated because:
            // - Canvas does not support it natively, so we have to implement it manually
            // - need to know the height of each line -> need to parse the font shorthand ->
            //   generally impossible to do because font size may not be in pixels
            // - so, need to measure the text instead, each line individually -> expensive
            // - or make the user provide the line height manually for multi-line text
            // - computeBBox should use the lineHeight for multi-line text but ignore it otherwise
            // - textBaseline kind of loses its meaning for multi-line text
            _this.lineHeight = 14;
            return _this;
        }
        Text.prototype._splitText = function () {
            this.lines = typeof this.text === 'string' ? this.text.split(/\r?\n/g) : [];
        };
        Object.defineProperty(Text.prototype, "font", {
            get: function () {
                if (this._dirtyFont) {
                    this._dirtyFont = false;
                    this._font = getFont(this.fontSize, this.fontFamily, this.fontStyle, this.fontWeight);
                }
                return this._font;
            },
            enumerable: false,
            configurable: true
        });
        Text.prototype.computeBBox = function () {
            return HdpiCanvas.has.textMetrics ? this.getPreciseBBox() : this.getApproximateBBox();
        };
        Text.prototype.getPreciseBBox = function () {
            var metrics = HdpiCanvas.measureText(this.text, this.font, this.textBaseline, this.textAlign);
            return new BBox(this.x - metrics.actualBoundingBoxLeft, this.y - metrics.actualBoundingBoxAscent, metrics.width, metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
        };
        Text.prototype.getApproximateBBox = function () {
            var size = HdpiCanvas.getTextSize(this.text, this.font);
            var _a = this, x = _a.x, y = _a.y;
            switch (this.textAlign) {
                case 'end':
                case 'right':
                    x -= size.width;
                    break;
                case 'center':
                    x -= size.width / 2;
            }
            switch (this.textBaseline) {
                case 'alphabetic':
                    y -= size.height * 0.7;
                    break;
                case 'middle':
                    y -= size.height * 0.45;
                    break;
                case 'ideographic':
                    y -= size.height;
                    break;
                case 'hanging':
                    y -= size.height * 0.2;
                    break;
                case 'bottom':
                    y -= size.height;
                    break;
            }
            return new BBox(x, y, size.width, size.height);
        };
        Text.prototype.isPointInPath = function (x, y) {
            var point = this.transformPoint(x, y);
            var bbox = this.computeBBox();
            return bbox ? bbox.containsPoint(point.x, point.y) : false;
        };
        Text.prototype.render = function (renderCtx) {
            var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            if (!this.lines.length || !this.scene) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            var _a = this, fill = _a.fill, stroke = _a.stroke, strokeWidth = _a.strokeWidth;
            ctx.font = this.font;
            ctx.textAlign = this.textAlign;
            ctx.textBaseline = this.textBaseline;
            var pixelRatio = this.scene.canvas.pixelRatio || 1;
            var globalAlpha = ctx.globalAlpha;
            if (fill) {
                ctx.fillStyle = fill;
                ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;
                var _b = this, fillShadow = _b.fillShadow, text = _b.text, x = _b.x, y = _b.y;
                if (fillShadow && fillShadow.enabled) {
                    ctx.shadowColor = fillShadow.color;
                    ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
                    ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
                    ctx.shadowBlur = fillShadow.blur * pixelRatio;
                }
                ctx.fillText(text, x, y);
            }
            if (stroke && strokeWidth) {
                ctx.strokeStyle = stroke;
                ctx.lineWidth = strokeWidth;
                ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;
                var _c = this, lineDash = _c.lineDash, lineDashOffset = _c.lineDashOffset, lineCap = _c.lineCap, lineJoin = _c.lineJoin, text = _c.text, x = _c.x, y = _c.y;
                if (lineDash) {
                    ctx.setLineDash(lineDash);
                }
                if (lineDashOffset) {
                    ctx.lineDashOffset = lineDashOffset;
                }
                if (lineCap) {
                    ctx.lineCap = lineCap;
                }
                if (lineJoin) {
                    ctx.lineJoin = lineJoin;
                }
                ctx.strokeText(text, x, y);
            }
            _super.prototype.render.call(this, renderCtx);
        };
        Text.className = 'Text';
        Text.defaultStyles = chainObjects(Shape.defaultStyles, {
            textAlign: 'start',
            fontStyle: undefined,
            fontWeight: undefined,
            fontSize: 10,
            fontFamily: 'sans-serif',
            textBaseline: 'alphabetic',
        });
        __decorate$B([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Text.prototype, "x", void 0);
        __decorate$B([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Text.prototype, "y", void 0);
        __decorate$B([
            SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: function (o) { return o._splitText(); } })
        ], Text.prototype, "text", void 0);
        __decorate$B([
            SceneFontChangeDetection()
        ], Text.prototype, "fontStyle", void 0);
        __decorate$B([
            SceneFontChangeDetection()
        ], Text.prototype, "fontWeight", void 0);
        __decorate$B([
            SceneFontChangeDetection()
        ], Text.prototype, "fontSize", void 0);
        __decorate$B([
            SceneFontChangeDetection()
        ], Text.prototype, "fontFamily", void 0);
        __decorate$B([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Text.prototype, "textAlign", void 0);
        __decorate$B([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Text.prototype, "textBaseline", void 0);
        __decorate$B([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], Text.prototype, "lineHeight", void 0);
        return Text;
    }(Shape));
    function getFont(fontSize, fontFamily, fontStyle, fontWeight) {
        return [fontStyle || '', fontWeight || '', fontSize + 'px', fontFamily].join(' ').trim();
    }

    var __extends$U = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$A = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    function ScenePathChangeDetection(opts) {
        var _a = opts || {}, _b = _a.redraw, redraw = _b === void 0 ? RedrawType.MAJOR : _b, changeCb = _a.changeCb, convertor = _a.convertor;
        return SceneChangeDetection({ redraw: redraw, type: 'path', convertor: convertor, changeCb: changeCb });
    }
    var Path = /** @class */ (function (_super) {
        __extends$U(Path, _super);
        function Path(renderOverride) {
            var _this = _super.call(this) || this;
            _this.renderOverride = renderOverride;
            /**
             * Declare a path to retain for later rendering and hit testing
             * using custom Path2D class. Think of it as a TypeScript version
             * of the native Path2D (with some differences) that works in all browsers.
             */
            _this.path = new Path2D();
            /**
             * The path only has to be updated when certain attributes change.
             * For example, if transform attributes (such as `translationX`)
             * are changed, we don't have to update the path. The `dirtyPath` flag
             * is how we keep track if the path has to be updated or not.
             */
            _this._dirtyPath = true;
            return _this;
        }
        Object.defineProperty(Path.prototype, "dirtyPath", {
            get: function () {
                return this._dirtyPath;
            },
            set: function (value) {
                if (this._dirtyPath !== value) {
                    this._dirtyPath = value;
                    if (value) {
                        this.markDirty(this, RedrawType.MAJOR);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Path.prototype.checkPathDirty = function () {
            var _a, _b;
            if (this._dirtyPath) {
                return;
            }
            this.dirtyPath = this.path.isDirty() || ((_b = (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.isDirty()) !== null && _b !== void 0 ? _b : false);
        };
        Path.prototype.isPointInPath = function (x, y) {
            var point = this.transformPoint(x, y);
            return this.path.closedPath && this.path.isPointInPath(point.x, point.y);
        };
        Path.prototype.isDirtyPath = function () {
            // Override point for more expensive dirty checks.
        };
        Path.prototype.updatePath = function () {
            // Override point for subclasses.
        };
        Path.prototype.render = function (renderCtx) {
            var _a, _b;
            var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            if (this.dirtyPath || this.isDirtyPath()) {
                this.updatePath();
                this.dirtyPath = false;
            }
            if (this.clipPath) {
                ctx.save();
                if (this.clipMode === 'normal') {
                    // Bound the shape rendered to the clipping path.
                    this.clipPath.draw(ctx);
                    ctx.clip();
                }
                if (this.renderOverride) {
                    this.renderOverride(ctx);
                }
                else {
                    this.path.draw(ctx);
                    this.fillStroke(ctx);
                }
                if (this.clipMode === 'punch-out') {
                    // Bound the shape rendered to outside the clipping path.
                    this.clipPath.draw(ctx);
                    ctx.clip();
                    // Fallback values, but practically these should never be used.
                    var _c = (_a = this.computeBBox()) !== null && _a !== void 0 ? _a : {}, _d = _c.x, x = _d === void 0 ? -10000 : _d, _e = _c.y, y = _e === void 0 ? -10000 : _e, _f = _c.width, width = _f === void 0 ? 20000 : _f, _g = _c.height, height = _g === void 0 ? 20000 : _g;
                    ctx.clearRect(x, y, width, height);
                }
                ctx.restore();
            }
            else if (this.renderOverride) {
                this.renderOverride(ctx);
            }
            else {
                this.path.draw(ctx);
                this.fillStroke(ctx);
            }
            (_b = this.fillShadow) === null || _b === void 0 ? void 0 : _b.markClean();
            _super.prototype.render.call(this, renderCtx);
        };
        Path.className = 'Path';
        __decorate$A([
            ScenePathChangeDetection()
        ], Path.prototype, "clipPath", void 0);
        __decorate$A([
            ScenePathChangeDetection()
        ], Path.prototype, "clipMode", void 0);
        return Path;
    }(Shape));

    var twoPi = Math.PI * 2;
    /**
     * Normalize the given angle to be in the [0, 2π) interval.
     * @param radians Angle in radians.
     */
    function normalizeAngle360(radians) {
        radians %= twoPi;
        radians += twoPi;
        radians %= twoPi;
        return radians;
    }
    function normalizeAngle360Inclusive(radians) {
        radians %= twoPi;
        radians += twoPi;
        if (radians !== twoPi) {
            radians %= twoPi;
        }
        return radians;
    }
    /**
     * Normalize the given angle to be in the [-π, π) interval.
     * @param radians Angle in radians.
     */
    function normalizeAngle180(radians) {
        radians %= twoPi;
        if (radians < -Math.PI) {
            radians += twoPi;
        }
        else if (radians >= Math.PI) {
            radians -= twoPi;
        }
        return radians;
    }
    function toRadians(degrees) {
        return (degrees / 180) * Math.PI;
    }

    function isEqual$1(a, b, epsilon) {
        if (epsilon === void 0) { epsilon = 1e-10; }
        return Math.abs(a - b) < epsilon;
    }
    /**
     * `Number.toFixed(n)` always formats a number so that it has `n` digits after the decimal point.
     * For example, `Number(0.00003427).toFixed(2)` returns `0.00`.
     * That's not very helpful, because all the meaningful information is lost.
     * In this case we would want the formatted value to have at least two significant digits: `0.000034`,
     * not two fraction digits.
     * @param value
     * @param fractionOrSignificantDigits
     */
    function toFixed(value, fractionOrSignificantDigits) {
        if (fractionOrSignificantDigits === void 0) { fractionOrSignificantDigits = 2; }
        var power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);
        if (power >= 0 || !isFinite(power)) {
            return value.toFixed(fractionOrSignificantDigits); // fraction digits
        }
        return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits); // significant digits
    }
    /**
     * Returns the mathematically correct n modulus of m. For context, the JS % operator is remainder
     * NOT modulus, which is why this is needed.
     */
    function mod(n, m) {
        if (n >= 0) {
            return Math.floor(n % m);
        }
        return Math.floor((n % m) + m);
    }

    var __extends$T = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$z = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ArcType;
    (function (ArcType) {
        ArcType[ArcType["Open"] = 0] = "Open";
        ArcType[ArcType["Chord"] = 1] = "Chord";
        ArcType[ArcType["Round"] = 2] = "Round";
    })(ArcType || (ArcType = {}));
    /**
     * Elliptical arc node.
     */
    var Arc = /** @class */ (function (_super) {
        __extends$T(Arc, _super);
        function Arc() {
            var _this = _super.call(this) || this;
            _this.centerX = 0;
            _this.centerY = 0;
            _this.radiusX = 10;
            _this.radiusY = 10;
            _this.startAngle = 0;
            _this.endAngle = Math.PI * 2;
            _this.counterClockwise = false;
            /**
             * The type of arc to render:
             * - {@link ArcType.Open} - end points of the arc segment are not connected (default)
             * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment
             * - {@link ArcType.Round} - each of the end points of the arc segment are connected
             *                           to the center of the arc
             * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their
             * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support
             * would require using two paths - one for rendering, another for hit testing - and there
             * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}
             * to create a closed path.
             */
            _this.type = ArcType.Open;
            _this.restoreOwnStyles();
            return _this;
        }
        Object.defineProperty(Arc.prototype, "fullPie", {
            get: function () {
                return isEqual$1(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));
            },
            enumerable: false,
            configurable: true
        });
        Arc.prototype.updatePath = function () {
            var path = this.path;
            path.clear(); // No need to recreate the Path, can simply clear the existing one.
            // This is much faster than the native Path2D implementation even though this `cubicArc`
            // method is pure TypeScript and actually produces the definition of an elliptical arc,
            // where you can specify two radii and rotation, while Path2D's `arc` method simply produces
            // a circular arc. Maybe it's due to the experimental nature of the Path2D class,
            // maybe it's because we have to create a new instance of it on each render, who knows...
            path.cubicArc(this.centerX, this.centerY, this.radiusX, this.radiusY, 0, this.startAngle, this.endAngle, this.counterClockwise ? 1 : 0);
            if (this.type === ArcType.Chord) {
                path.closePath();
            }
            else if (this.type === ArcType.Round && !this.fullPie) {
                path.lineTo(this.centerX, this.centerY);
                path.closePath();
            }
        };
        Arc.prototype.computeBBox = function () {
            // Only works with full arcs (circles) and untransformed ellipses.
            return new BBox(this.centerX - this.radiusX, this.centerY - this.radiusY, this.radiusX * 2, this.radiusY * 2);
        };
        Arc.prototype.isPointInPath = function (x, y) {
            var point = this.transformPoint(x, y);
            var bbox = this.computeBBox();
            return (this.type !== ArcType.Open &&
                bbox.containsPoint(point.x, point.y) &&
                this.path.isPointInPath(point.x, point.y));
        };
        Arc.className = 'Arc';
        Arc.defaultStyles = chainObjects(Shape.defaultStyles, {
            lineWidth: 1,
            fillStyle: null,
        });
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "centerX", void 0);
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "centerY", void 0);
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "radiusX", void 0);
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "radiusY", void 0);
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "startAngle", void 0);
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "endAngle", void 0);
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "counterClockwise", void 0);
        __decorate$z([
            ScenePathChangeDetection()
        ], Arc.prototype, "type", void 0);
        return Arc;
    }(Path));

    var doOnceFlags = {};
    /**
     * If the key was passed before, then doesn't execute the func
     * @param {Function} func
     * @param {string} key
     */
    function doOnce(func, key) {
        if (doOnceFlags[key]) {
            return;
        }
        func();
        doOnceFlags[key] = true;
    }

    var __read$t = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var Color = /** @class */ (function () {
        /**
         * Every color component should be in the [0, 1] range.
         * Some easing functions (such as elastic easing) can overshoot the target value by some amount.
         * So, when animating colors, if the source or target color components are already near
         * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color
         * component value to end up outside of that range mid-animation. For this reason the constructor
         * performs range checking/constraining.
         * @param r Red component.
         * @param g Green component.
         * @param b Blue component.
         * @param a Alpha (opacity) component.
         */
        function Color(r, g, b, a) {
            if (a === void 0) { a = 1; }
            // NaN is treated as 0.
            this.r = Math.min(1, Math.max(0, r || 0));
            this.g = Math.min(1, Math.max(0, g || 0));
            this.b = Math.min(1, Math.max(0, b || 0));
            this.a = Math.min(1, Math.max(0, a || 0));
        }
        /**
         * A color string can be in one of the following formats to be valid:
         * - #rgb
         * - #rrggbb
         * - rgb(r, g, b)
         * - rgba(r, g, b, a)
         * - CSS color name such as 'white', 'orange', 'cyan', etc.
         */
        Color.validColorString = function (str) {
            if (str.indexOf('#') >= 0) {
                return !!Color.parseHex(str);
            }
            if (str.indexOf('rgb') >= 0) {
                return !!Color.stringToRgba(str);
            }
            return !!Color.nameToHex[str.toLowerCase()];
        };
        /**
         * The given string can be in one of the following formats:
         * - #rgb
         * - #rrggbb
         * - rgb(r, g, b)
         * - rgba(r, g, b, a)
         * - CSS color name such as 'white', 'orange', 'cyan', etc.
         * @param str
         */
        Color.fromString = function (str) {
            // hexadecimal notation
            if (str.indexOf('#') >= 0) {
                // there can be some leading whitespace
                return Color.fromHexString(str);
            }
            // color name
            var hex = Color.nameToHex[str.toLowerCase()];
            if (hex) {
                return Color.fromHexString(hex);
            }
            // rgb(a) notation
            if (str.indexOf('rgb') >= 0) {
                return Color.fromRgbaString(str);
            }
            throw new Error("Invalid color string: '" + str + "'");
        };
        Color.tryParseFromString = function (str) {
            try {
                return Color.fromString(str);
            }
            catch (e) {
                doOnce(function () { return console.warn("AG Charts - Invalid color string: '" + str + "'."); }, "unable to parse color " + str);
                return Color.fromArray([0, 0, 0]);
            }
        };
        // See https://drafts.csswg.org/css-color/#hex-notation
        Color.parseHex = function (input) {
            input = input.replace(/ /g, '').slice(1);
            var parts;
            switch (input.length) {
                case 6:
                case 8:
                    parts = [];
                    for (var i = 0; i < input.length; i += 2) {
                        parts.push(parseInt("" + input[i] + input[i + 1], 16));
                    }
                    break;
                case 3:
                case 4:
                    parts = input
                        .split('')
                        .map(function (p) { return parseInt(p, 16); })
                        .map(function (p) { return p + p * 16; });
                    break;
            }
            if ((parts === null || parts === void 0 ? void 0 : parts.length) >= 3) {
                if (parts.every(function (p) { return p >= 0; })) {
                    if (parts.length === 3) {
                        parts.push(255);
                    }
                    return parts;
                }
            }
        };
        Color.fromHexString = function (str) {
            var values = Color.parseHex(str);
            if (values) {
                var _a = __read$t(values, 4), r = _a[0], g = _a[1], b = _a[2], a = _a[3];
                return new Color(r / 255, g / 255, b / 255, a / 255);
            }
            throw new Error("Malformed hexadecimal color string: '" + str + "'");
        };
        Color.stringToRgba = function (str) {
            // Find positions of opening and closing parentheses.
            var _a = __read$t([NaN, NaN], 2), po = _a[0], pc = _a[1];
            for (var i = 0; i < str.length; i++) {
                var c = str[i];
                if (!po && c === '(') {
                    po = i;
                }
                else if (c === ')') {
                    pc = i;
                    break;
                }
            }
            var contents = po && pc && str.substring(po + 1, pc);
            if (!contents) {
                return;
            }
            var parts = contents.split(',');
            var rgba = [];
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                var value = parseFloat(part);
                if (isNaN(value)) {
                    return;
                }
                if (part.indexOf('%') >= 0) {
                    // percentage r, g, or b value
                    value = Math.max(0, Math.min(100, value));
                    value /= 100;
                }
                else {
                    if (i === 3) {
                        // alpha component
                        value = Math.max(0, Math.min(1, value));
                    }
                    else {
                        // absolute r, g, or b value
                        value = Math.max(0, Math.min(255, value));
                        value /= 255;
                    }
                }
                rgba.push(value);
            }
            return rgba;
        };
        Color.fromRgbaString = function (str) {
            var rgba = Color.stringToRgba(str);
            if (rgba) {
                if (rgba.length === 3) {
                    return new Color(rgba[0], rgba[1], rgba[2]);
                }
                else if (rgba.length === 4) {
                    return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);
                }
            }
            throw new Error("Malformed rgb/rgba color string: '" + str + "'");
        };
        Color.fromArray = function (arr) {
            if (arr.length === 4) {
                return new Color(arr[0], arr[1], arr[2], arr[3]);
            }
            if (arr.length === 3) {
                return new Color(arr[0], arr[1], arr[2]);
            }
            throw new Error('The given array should contain 3 or 4 color components (numbers).');
        };
        Color.fromHSB = function (h, s, b, alpha) {
            if (alpha === void 0) { alpha = 1; }
            var rgb = Color.HSBtoRGB(h, s, b);
            return new Color(rgb[0], rgb[1], rgb[2], alpha);
        };
        Color.padHex = function (str) {
            // Can't use `padStart(2, '0')` here because of IE.
            return str.length === 1 ? '0' + str : str;
        };
        Color.prototype.toHexString = function () {
            var hex = '#' +
                Color.padHex(Math.round(this.r * 255).toString(16)) +
                Color.padHex(Math.round(this.g * 255).toString(16)) +
                Color.padHex(Math.round(this.b * 255).toString(16));
            if (this.a < 1) {
                hex += Color.padHex(Math.round(this.a * 255).toString(16));
            }
            return hex;
        };
        Color.prototype.toRgbaString = function (fractionDigits) {
            if (fractionDigits === void 0) { fractionDigits = 3; }
            var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];
            var k = Math.pow(10, fractionDigits);
            if (this.a !== 1) {
                components.push(Math.round(this.a * k) / k);
                return "rgba(" + components.join(', ') + ")";
            }
            return "rgb(" + components.join(', ') + ")";
        };
        Color.prototype.toString = function () {
            if (this.a === 1) {
                return this.toHexString();
            }
            return this.toRgbaString();
        };
        Color.prototype.toHSB = function () {
            return Color.RGBtoHSB(this.r, this.g, this.b);
        };
        /**
         * Converts the given RGB triple to an array of HSB (HSV) components.
         * The hue component will be `NaN` for achromatic colors.
         */
        Color.RGBtoHSB = function (r, g, b) {
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            var S = max !== 0 ? (max - min) / max : 0;
            var H = NaN;
            // min == max, means all components are the same
            // and the color is a shade of gray with no hue (H is NaN)
            if (min !== max) {
                var delta = max - min;
                var rc = (max - r) / delta;
                var gc = (max - g) / delta;
                var bc = (max - b) / delta;
                if (r === max) {
                    H = bc - gc;
                }
                else if (g === max) {
                    H = 2.0 + rc - bc;
                }
                else {
                    H = 4.0 + gc - rc;
                }
                H /= 6.0;
                if (H < 0) {
                    H = H + 1.0;
                }
            }
            return [H * 360, S, max];
        };
        /**
         * Converts the given HSB (HSV) triple to an array of RGB components.
         */
        Color.HSBtoRGB = function (H, S, B) {
            if (isNaN(H)) {
                H = 0;
            }
            H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]
            var r = 0;
            var g = 0;
            var b = 0;
            if (S === 0) {
                r = g = b = B;
            }
            else {
                var h = (H - Math.floor(H)) * 6;
                var f = h - Math.floor(h);
                var p = B * (1 - S);
                var q = B * (1 - S * f);
                var t = B * (1 - S * (1 - f));
                switch (h >> 0 // discard the floating point part of the number
                ) {
                    case 0:
                        r = B;
                        g = t;
                        b = p;
                        break;
                    case 1:
                        r = q;
                        g = B;
                        b = p;
                        break;
                    case 2:
                        r = p;
                        g = B;
                        b = t;
                        break;
                    case 3:
                        r = p;
                        g = q;
                        b = B;
                        break;
                    case 4:
                        r = t;
                        g = p;
                        b = B;
                        break;
                    case 5:
                        r = B;
                        g = p;
                        b = q;
                        break;
                }
            }
            return [r, g, b];
        };
        Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {
            var hsb = Color.RGBtoHSB(this.r, this.g, this.b);
            var b = hsb[2];
            if (b == 0 && brightnessFactor > 1.0) {
                b = 0.05;
            }
            var h = (((hsb[0] + hueShift) % 360) + 360) % 360;
            var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);
            b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);
            var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);
            var rgba = Color.HSBtoRGB(h, s, b);
            rgba.push(a);
            return Color.fromArray(rgba);
        };
        Color.prototype.brighter = function () {
            return this.derive(0, 1.0, 1.0 / 0.7, 1.0);
        };
        Color.prototype.darker = function () {
            return this.derive(0, 1.0, 0.7, 1.0);
        };
        /**
         * CSS Color Module Level 4:
         * https://drafts.csswg.org/css-color/#named-colors
         */
        Color.nameToHex = Object.freeze({
            aliceblue: '#F0F8FF',
            antiquewhite: '#FAEBD7',
            aqua: '#00FFFF',
            aquamarine: '#7FFFD4',
            azure: '#F0FFFF',
            beige: '#F5F5DC',
            bisque: '#FFE4C4',
            black: '#000000',
            blanchedalmond: '#FFEBCD',
            blue: '#0000FF',
            blueviolet: '#8A2BE2',
            brown: '#A52A2A',
            burlywood: '#DEB887',
            cadetblue: '#5F9EA0',
            chartreuse: '#7FFF00',
            chocolate: '#D2691E',
            coral: '#FF7F50',
            cornflowerblue: '#6495ED',
            cornsilk: '#FFF8DC',
            crimson: '#DC143C',
            cyan: '#00FFFF',
            darkblue: '#00008B',
            darkcyan: '#008B8B',
            darkgoldenrod: '#B8860B',
            darkgray: '#A9A9A9',
            darkgreen: '#006400',
            darkgrey: '#A9A9A9',
            darkkhaki: '#BDB76B',
            darkmagenta: '#8B008B',
            darkolivegreen: '#556B2F',
            darkorange: '#FF8C00',
            darkorchid: '#9932CC',
            darkred: '#8B0000',
            darksalmon: '#E9967A',
            darkseagreen: '#8FBC8F',
            darkslateblue: '#483D8B',
            darkslategray: '#2F4F4F',
            darkslategrey: '#2F4F4F',
            darkturquoise: '#00CED1',
            darkviolet: '#9400D3',
            deeppink: '#FF1493',
            deepskyblue: '#00BFFF',
            dimgray: '#696969',
            dimgrey: '#696969',
            dodgerblue: '#1E90FF',
            firebrick: '#B22222',
            floralwhite: '#FFFAF0',
            forestgreen: '#228B22',
            fuchsia: '#FF00FF',
            gainsboro: '#DCDCDC',
            ghostwhite: '#F8F8FF',
            gold: '#FFD700',
            goldenrod: '#DAA520',
            gray: '#808080',
            green: '#008000',
            greenyellow: '#ADFF2F',
            grey: '#808080',
            honeydew: '#F0FFF0',
            hotpink: '#FF69B4',
            indianred: '#CD5C5C',
            indigo: '#4B0082',
            ivory: '#FFFFF0',
            khaki: '#F0E68C',
            lavender: '#E6E6FA',
            lavenderblush: '#FFF0F5',
            lawngreen: '#7CFC00',
            lemonchiffon: '#FFFACD',
            lightblue: '#ADD8E6',
            lightcoral: '#F08080',
            lightcyan: '#E0FFFF',
            lightgoldenrodyellow: '#FAFAD2',
            lightgray: '#D3D3D3',
            lightgreen: '#90EE90',
            lightgrey: '#D3D3D3',
            lightpink: '#FFB6C1',
            lightsalmon: '#FFA07A',
            lightseagreen: '#20B2AA',
            lightskyblue: '#87CEFA',
            lightslategray: '#778899',
            lightslategrey: '#778899',
            lightsteelblue: '#B0C4DE',
            lightyellow: '#FFFFE0',
            lime: '#00FF00',
            limegreen: '#32CD32',
            linen: '#FAF0E6',
            magenta: '#FF00FF',
            maroon: '#800000',
            mediumaquamarine: '#66CDAA',
            mediumblue: '#0000CD',
            mediumorchid: '#BA55D3',
            mediumpurple: '#9370DB',
            mediumseagreen: '#3CB371',
            mediumslateblue: '#7B68EE',
            mediumspringgreen: '#00FA9A',
            mediumturquoise: '#48D1CC',
            mediumvioletred: '#C71585',
            midnightblue: '#191970',
            mintcream: '#F5FFFA',
            mistyrose: '#FFE4E1',
            moccasin: '#FFE4B5',
            navajowhite: '#FFDEAD',
            navy: '#000080',
            oldlace: '#FDF5E6',
            olive: '#808000',
            olivedrab: '#6B8E23',
            orange: '#FFA500',
            orangered: '#FF4500',
            orchid: '#DA70D6',
            palegoldenrod: '#EEE8AA',
            palegreen: '#98FB98',
            paleturquoise: '#AFEEEE',
            palevioletred: '#DB7093',
            papayawhip: '#FFEFD5',
            peachpuff: '#FFDAB9',
            peru: '#CD853F',
            pink: '#FFC0CB',
            plum: '#DDA0DD',
            powderblue: '#B0E0E6',
            purple: '#800080',
            rebeccapurple: '#663399',
            red: '#FF0000',
            rosybrown: '#BC8F8F',
            royalblue: '#4169E1',
            saddlebrown: '#8B4513',
            salmon: '#FA8072',
            sandybrown: '#F4A460',
            seagreen: '#2E8B57',
            seashell: '#FFF5EE',
            sienna: '#A0522D',
            silver: '#C0C0C0',
            skyblue: '#87CEEB',
            slateblue: '#6A5ACD',
            slategray: '#708090',
            slategrey: '#708090',
            snow: '#FFFAFA',
            springgreen: '#00FF7F',
            steelblue: '#4682B4',
            tan: '#D2B48C',
            teal: '#008080',
            thistle: '#D8BFD8',
            tomato: '#FF6347',
            transparent: '#00000000',
            turquoise: '#40E0D0',
            violet: '#EE82EE',
            wheat: '#F5DEB3',
            white: '#FFFFFF',
            whitesmoke: '#F5F5F5',
            yellow: '#FFFF00',
            yellowgreen: '#9ACD32',
        });
        return Color;
    }());

    function Validate(predicate) {
        return function (target, key) {
            // `target` is either a constructor (static member) or prototype (instance member)
            var privateKey = "__" + key;
            var prevSet;
            var descriptor = Object.getOwnPropertyDescriptor(target, key);
            prevSet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set;
            var setter = function (v) {
                var _a, _b, _c;
                if (predicate(v, { target: this })) {
                    if (prevSet) {
                        prevSet.call(this, v);
                    }
                    else {
                        this[privateKey] = v;
                    }
                    return;
                }
                var cleanKey = key.replace(/^_*/, '');
                var targetClass = (_b = (_a = target.constructor) === null || _a === void 0 ? void 0 : _a.className) !== null && _b !== void 0 ? _b : (_c = target.constructor) === null || _c === void 0 ? void 0 : _c.name;
                if ((targetClass === null || targetClass === void 0 ? void 0 : targetClass.length) < 3) {
                    targetClass = null;
                }
                if (predicate.message) {
                    console.warn("AG Charts - Property [" + cleanKey + "] " + (targetClass ? "of [" + targetClass + "] " : '') + "cannot be set to [" + JSON.stringify(v) + "]; " + predicate.message + ", ignoring.");
                }
                else {
                    console.warn("AG Charts - Property [" + cleanKey + "] " + (targetClass ? "of [" + targetClass + "] " : '') + "cannot be set to [" + JSON.stringify(v) + "], ignoring.");
                }
            };
            var getter = function () {
                return this[privateKey];
            };
            Object.defineProperty(target, key, {
                set: setter,
                get: getter,
                enumerable: true,
                configurable: false,
            });
        };
    }
    function predicateWithMessage(predicate, message) {
        predicate.message = message;
        return predicate;
    }
    var OPTIONAL = function (v, ctx, predicate) {
        return v === undefined || predicate(v, ctx);
    };
    var ARRAY = function (length, predicate) {
        return predicateWithMessage(function (v, ctx) {
            return Array.isArray(v) &&
                (length ? v.length === length : true) &&
                (predicate ? v.every(function (e) { return predicate(e, ctx); }) : true);
        }, "expecting an Array");
    };
    var OPT_ARRAY = function (length) {
        return predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, ARRAY(length)); }, 'expecting an optional Array');
    };
    var AND = function () {
        var predicates = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            predicates[_i] = arguments[_i];
        }
        return predicateWithMessage(function (v, ctx) { return predicates.every(function (p) { return p(v, ctx); }); }, predicates
            .map(function (p) { return p.message; })
            .filter(function (m) { return m != null; })
            .join(' AND '));
    };
    var OR = function () {
        var predicates = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            predicates[_i] = arguments[_i];
        }
        return predicateWithMessage(function (v, ctx) { return predicates.some(function (p) { return p(v, ctx); }); }, predicates
            .map(function (p) { return p.message; })
            .filter(function (m) { return m != null; })
            .join(' OR '));
    };
    var isComparable = function (v) {
        return v != null && !isNaN(v);
    };
    var LESS_THAN = function (otherField) {
        return predicateWithMessage(function (v, ctx) {
            return !isComparable(v) || !isComparable(ctx.target[otherField]) || v < ctx.target[otherField];
        }, "expected to be less than " + otherField);
    };
    var GREATER_THAN = function (otherField) {
        return predicateWithMessage(function (v, ctx) {
            return !isComparable(v) || !isComparable(ctx.target[otherField]) || v > ctx.target[otherField];
        }, "expected to be greater than " + otherField);
    };
    var FUNCTION = predicateWithMessage(function (v) { return typeof v === 'function'; }, 'expecting a Function');
    var OPT_FUNCTION = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, FUNCTION); }, "expecting an optional Function");
    var BOOLEAN = predicateWithMessage(function (v) { return v === true || v === false; }, 'expecting a Boolean');
    var OPT_BOOLEAN = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, BOOLEAN); }, 'expecting an optional Boolean');
    var STRING = predicateWithMessage(function (v) { return typeof v === 'string'; }, 'expecting a String');
    var OPT_STRING = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, STRING); }, 'expecting an optional String');
    var DATE = predicateWithMessage(function (v) { return v instanceof Date && !isNaN(+v); }, 'expecting a Date object');
    var OPT_DATE = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, DATE); }, 'expecting an optional Date');
    predicateWithMessage(ARRAY(undefined, DATE), 'expecting an Array of Date objects');
    var DATETIME_MS = NUMBER(0);
    var OPT_DATETIME_MS = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, DATETIME_MS); }, 'expecting an optional number');
    var OPT_DATE_OR_DATETIME_MS = OR(OPT_DATE, OPT_DATETIME_MS);
    var colorMessage = "A color string can be in one of the following formats to be valid: #rgb, #rrggbb, rgb(r, g, b), rgba(r, g, b, a) or a CSS color name such as 'white', 'orange', 'cyan', etc";
    var COLOR_STRING = predicateWithMessage(function (v) {
        if (typeof v !== 'string') {
            return false;
        }
        return Color.validColorString(v);
    }, "expecting a color String. " + colorMessage);
    var OPT_COLOR_STRING = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, COLOR_STRING); }, "expecting an optional color String. " + colorMessage);
    var COLOR_STRING_ARRAY = predicateWithMessage(ARRAY(undefined, COLOR_STRING), "expecting an Array of color strings. " + colorMessage);
    var OPT_COLOR_STRING_ARRAY = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, COLOR_STRING_ARRAY); }, "expecting an optional Array of color strings. " + colorMessage);
    function NUMBER(min, max) {
        var message = "expecting a finite Number" + ((min !== undefined ? ', more than or equal to ' + min : '') +
            (max !== undefined ? ', less than or equal to ' + max : ''));
        return predicateWithMessage(function (v) {
            return typeof v === 'number' &&
                Number.isFinite(v) &&
                (min !== undefined ? v >= min : true) &&
                (max !== undefined ? v <= max : true);
        }, message);
    }
    function OPT_NUMBER(min, max) {
        var message = "expecting an optional finite Number" + ((min !== undefined ? ', more than or equal to ' + min : '') +
            (max !== undefined ? ', less than or equal to ' + max : ''));
        return predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, NUMBER(min, max)); }, message);
    }
    var NUMBER_ARRAY = predicateWithMessage(ARRAY(undefined, NUMBER()), 'expecting an Array of numbers');
    var OPT_NUMBER_ARRAY = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, NUMBER_ARRAY); }, 'expecting an optional Array of numbers');
    var STRING_ARRAY = predicateWithMessage(ARRAY(undefined, STRING), 'expecting an Array of strings');
    predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, STRING_ARRAY); }, 'expecting an optional Array of strings');
    var BOOLEAN_ARRAY = predicateWithMessage(ARRAY(undefined, BOOLEAN), 'expecting an Array of boolean values');
    predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, BOOLEAN_ARRAY); }, 'expecting an optional Array of boolean values');
    var FONT_WEIGHTS = [
        'normal',
        'bold',
        'bolder',
        'lighter',
        '100',
        '200',
        '300',
        '400',
        '500',
        '600',
        '700',
        '800',
        '900',
    ];
    var FONT_STYLE = predicateWithMessage(function (v) { return v === 'normal' || v === 'italic' || v === 'oblique'; }, "expecting a font style keyword such as 'normal', 'italic' or 'oblique'");
    var OPT_FONT_STYLE = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, FONT_STYLE); }, "expecting an optional font style keyword such as 'normal', 'italic' or 'oblique'");
    var FONT_WEIGHT = predicateWithMessage(function (v) { return FONT_WEIGHTS.includes(v); }, "expecting a font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600");
    var OPT_FONT_WEIGHT = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, FONT_WEIGHT); }, "expecting an optional font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600");
    var LINE_DASH = predicateWithMessage(ARRAY(undefined, NUMBER(0)), 'expecting an Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');
    var OPT_LINE_DASH = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, LINE_DASH); }, 'expecting an optional Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');
    var LINE_CAPS = ['butt', 'round', 'square'];
    var LINE_CAP = predicateWithMessage(function (v) { return LINE_CAPS.includes(v); }, "expecting a line cap keyword such as 'butt', 'round' or 'square'");
    predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, LINE_CAP); }, "expecting an optional line cap keyword such as 'butt', 'round' or 'square'");
    var LINE_JOINS = ['round', 'bevel', 'miter'];
    var LINE_JOIN = predicateWithMessage(function (v) { return LINE_JOINS.includes(v); }, "expecting a line join keyword such as 'round', 'bevel' or 'miter'");
    predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, LINE_JOIN); }, "expecting an optional line join keyword such as 'round', 'bevel' or 'miter'");
    var POSITIONS = ['top', 'right', 'bottom', 'left'];
    var POSITION = predicateWithMessage(function (v) { return POSITIONS.includes(v); }, "expecting a position keyword such as 'top', 'right', 'bottom' or 'left");
    var ValidateAndChangeDetection = function (opts) {
        var sceneChangeDetectionOpts = opts.sceneChangeDetectionOpts, validatePredicate = opts.validatePredicate;
        var sceneChangeDetectionFn = SceneChangeDetection(sceneChangeDetectionOpts);
        var validateFn = Validate(validatePredicate);
        return function (target, key) {
            sceneChangeDetectionFn(target, key);
            validateFn(target, key);
        };
    };

    var __decorate$y = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Caption = /** @class */ (function () {
        function Caption() {
            this.node = new Text();
            this.enabled = false;
            this._text = '';
            this._fontSize = 10;
            this._fontFamily = 'sans-serif';
            this.spacing = Caption.PADDING;
            var node = this.node;
            node.textAlign = 'center';
            node.textBaseline = 'top';
            node.pointerEvents = PointerEvents.None;
        }
        Object.defineProperty(Caption.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                this._text = value;
                this.node.text = this._text;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Caption.prototype, "fontStyle", {
            get: function () {
                return this._fontStyle;
            },
            set: function (value) {
                this._fontStyle = value;
                this.node.fontStyle = this._fontStyle;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Caption.prototype, "fontWeight", {
            get: function () {
                return this._fontWeight;
            },
            set: function (value) {
                this._fontWeight = value;
                this.node.fontWeight = this._fontWeight;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Caption.prototype, "fontSize", {
            get: function () {
                return this._fontSize;
            },
            set: function (value) {
                this._fontSize = value;
                this.node.fontSize = this._fontSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Caption.prototype, "fontFamily", {
            get: function () {
                return this._fontFamily;
            },
            set: function (value) {
                this._fontFamily = value;
                this.node.fontFamily = this._fontFamily;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Caption.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
                this.node.fill = this._color;
            },
            enumerable: false,
            configurable: true
        });
        Caption.PADDING = 10;
        __decorate$y([
            Validate(BOOLEAN)
        ], Caption.prototype, "enabled", void 0);
        __decorate$y([
            Validate(STRING)
        ], Caption.prototype, "_text", void 0);
        __decorate$y([
            Validate(OPT_FONT_STYLE)
        ], Caption.prototype, "_fontStyle", void 0);
        __decorate$y([
            Validate(OPT_FONT_WEIGHT)
        ], Caption.prototype, "_fontWeight", void 0);
        __decorate$y([
            Validate(NUMBER(0))
        ], Caption.prototype, "_fontSize", void 0);
        __decorate$y([
            Validate(STRING)
        ], Caption.prototype, "_fontFamily", void 0);
        __decorate$y([
            Validate(OPT_COLOR_STRING)
        ], Caption.prototype, "_color", void 0);
        __decorate$y([
            Validate(OPT_NUMBER(0))
        ], Caption.prototype, "spacing", void 0);
        return Caption;
    }());

    /**
     * Constants to declare the expected nominal zIndex for all types of layer in chart rendering.
     */
    var Layers;
    (function (Layers) {
        Layers[Layers["SERIES_BACKGROUND_ZINDEX"] = -10] = "SERIES_BACKGROUND_ZINDEX";
        Layers[Layers["AXIS_GRIDLINES_ZINDEX"] = 0] = "AXIS_GRIDLINES_ZINDEX";
        Layers[Layers["AXIS_ZINDEX"] = 20] = "AXIS_ZINDEX";
        Layers[Layers["SERIES_CROSSLINE_RANGE_ZINDEX"] = 30] = "SERIES_CROSSLINE_RANGE_ZINDEX";
        Layers[Layers["SERIES_LAYER_ZINDEX"] = 500] = "SERIES_LAYER_ZINDEX";
        Layers[Layers["SERIES_LABEL_ZINDEX"] = 1000] = "SERIES_LABEL_ZINDEX";
        Layers[Layers["SERIES_CROSSLINE_LINE_ZINDEX"] = 2500] = "SERIES_CROSSLINE_LINE_ZINDEX";
        Layers[Layers["LEGEND_ZINDEX"] = 3000] = "LEGEND_ZINDEX";
    })(Layers || (Layers = {}));

    function circleRectOverlap(c, x, y, w, h) {
        // Find closest horizontal and vertical edges.
        var edgeX = c.x < x ? x : c.x > x + w ? x + w : c.x;
        var edgeY = c.y < y ? y : c.y > y + h ? y + h : c.y;
        // Find distance to closest edges.
        var dx = c.x - edgeX;
        var dy = c.y - edgeY;
        var d = Math.sqrt(dx * dx + dy * dy);
        return d <= c.size * 0.5;
    }
    function rectRectOverlap(r1, x2, y2, w2, h2) {
        var xOverlap = r1.x + r1.width > x2 && r1.x < x2 + w2;
        var yOverlap = r1.y + r1.height > y2 && r1.y < y2 + h2;
        return xOverlap && yOverlap;
    }
    function rectContainsRect(r1, r2x, r2y, r2w, r2h) {
        return r2x + r2w < r1.x + r1.width && r2x > r1.x && r2y > r1.y && r2y + r2h < r1.y + r1.height;
    }
    function isPointLabelDatum(x) {
        return x != null && typeof x.point === 'object' && typeof x.label === 'object';
    }
    /**
     * @param data Points and labels for one or more series. The order of series determines label placement precedence.
     * @param bounds Bounds to fit the labels into. If a label can't be fully contained, it doesn't fit.
     * @returns Placed labels for the given series (in the given order).
     */
    function placeLabels(data, bounds, padding) {
        if (padding === void 0) { padding = 5; }
        var result = [];
        data = data.map(function (d) { return d.slice().sort(function (a, b) { return b.point.size - a.point.size; }); });
        for (var j = 0; j < data.length; j++) {
            var labels = (result[j] = []);
            var datum = data[j];
            if (!(datum && datum.length && datum[0].label)) {
                continue;
            }
            var _loop_1 = function (i, ln) {
                var d = datum[i];
                var l = d.label;
                var r = d.point.size * 0.5;
                var x = d.point.x - l.width * 0.5;
                var y = d.point.y - r - l.height - padding;
                var width = l.width, height = l.height;
                var withinBounds = !bounds || rectContainsRect(bounds, x, y, width, height);
                if (!withinBounds) {
                    return "continue";
                }
                var overlapPoints = data.some(function (datum) {
                    return datum.some(function (d) { return circleRectOverlap(d.point, x, y, width, height); });
                });
                if (overlapPoints) {
                    return "continue";
                }
                var overlapLabels = result.some(function (labels) { return labels.some(function (l) { return rectRectOverlap(l, x, y, width, height); }); });
                if (overlapLabels) {
                    return "continue";
                }
                labels.push({
                    index: i,
                    text: l.text,
                    x: x,
                    y: y,
                    width: width,
                    height: height,
                    datum: d,
                });
            };
            for (var i = 0, ln = datum.length; i < ln; i++) {
                _loop_1(i, ln);
            }
        }
        return result;
    }
    function axisLabelsOverlap(data, padding) {
        var result = [];
        var _loop_2 = function (i) {
            var datum = data[i];
            var _a = datum.point, x = _a.x, y = _a.y, _b = datum.label, width = _b.width, height = _b.height, text = _b.text;
            width += padding !== null && padding !== void 0 ? padding : 0;
            height += padding !== null && padding !== void 0 ? padding : 0;
            var overlapLabels = result.some(function (l) {
                var overlap = rectRectOverlap(l, x, y, width, height);
                return overlap;
            });
            if (overlapLabels) {
                return { value: true };
            }
            result.push({
                index: i,
                text: text,
                x: x,
                y: y,
                width: width,
                height: height,
                datum: datum,
            });
        };
        for (var i = 0; i < data.length; i++) {
            var state_1 = _loop_2(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return false;
    }

    var __read$s = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var ContinuousScale = /** @class */ (function () {
        function ContinuousScale() {
            this.domain = [0, 1];
            this.range = [0, 1];
            this.nice = false;
            this.tickCount = 10;
            this.niceDomain = null;
            this.strictClampByDefault = false;
            this.cache = null;
            this.cacheProps = ['domain', 'range', 'nice', 'tickCount'];
        }
        ContinuousScale.prototype.transform = function (x) {
            return x;
        };
        ContinuousScale.prototype.transformInvert = function (x) {
            return x;
        };
        ContinuousScale.prototype.getDomain = function () {
            if (this.nice) {
                this.refresh();
                if (this.niceDomain) {
                    return this.niceDomain;
                }
            }
            return this.domain;
        };
        ContinuousScale.prototype.convert = function (x, params) {
            var _this = this;
            var _a;
            if (!this.domain || this.domain.length < 2) {
                return NaN;
            }
            this.refresh();
            var strict = (_a = params === null || params === void 0 ? void 0 : params.strict) !== null && _a !== void 0 ? _a : this.strictClampByDefault;
            var domain = this.getDomain().map(function (d) { return _this.transform(d); });
            var _b = __read$s(domain, 2), d0 = _b[0], d1 = _b[1];
            var range = this.range;
            var _c = __read$s(range, 2), r0 = _c[0], r1 = _c[1];
            x = this.transform(x);
            if (x < d0) {
                return strict ? NaN : r0;
            }
            else if (x > d1) {
                return strict ? NaN : r1;
            }
            if (d0 === d1) {
                return (r0 + r1) / 2;
            }
            else if (x === d0) {
                return r0;
            }
            else if (x === d1) {
                return r1;
            }
            return r0 + ((x - d0) / (d1 - d0)) * (r1 - r0);
        };
        ContinuousScale.prototype.invert = function (x) {
            var _this = this;
            this.refresh();
            var domain = this.getDomain().map(function (d) { return _this.transform(d); });
            var _a = __read$s(domain, 2), d0 = _a[0], d1 = _a[1];
            var range = this.range;
            var _b = __read$s(range, 2), r0 = _b[0], r1 = _b[1];
            var d;
            if (x < r0) {
                d = d0;
            }
            else if (x > r1) {
                d = d1;
            }
            else if (r0 === r1) {
                d = (d0 + d1) / 2;
            }
            else if (x === r0) {
                d = d0;
            }
            else if (x === r1) {
                d = d1;
            }
            else {
                d = d0 + ((x - r0) / (r1 - r0)) * (d1 - d0);
            }
            return this.transformInvert(d);
        };
        ContinuousScale.prototype.didChange = function () {
            var _this = this;
            var cache = this.cache;
            var didChange = !cache || this.cacheProps.some(function (p) { return _this[p] !== cache[p]; });
            if (didChange) {
                this.cache = {};
                this.cacheProps.forEach(function (p) { return (_this.cache[p] = _this[p]); });
                return true;
            }
            return false;
        };
        ContinuousScale.prototype.refresh = function () {
            if (this.didChange()) {
                this.update();
            }
        };
        return ContinuousScale;
    }());

    var __extends$S = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    function generateTicks (start, stop, count) {
        var step = tickStep(start, stop, count);
        start = Math.ceil(start / step) * step;
        stop = Math.floor(stop / step) * step;
        return range(start, stop, step);
    }
    // Make error thresholds 2/5 between the intervals
    var tickMultiplierErrors = [
        [10, 7],
        [5, 3.2],
        [2, 1.4],
        [1, 0],
    ];
    function getTickMultiplier(error) {
        return tickMultiplierErrors.find(function (m) { return error >= m[1]; })[0];
    }
    function tickStep(a, b, count) {
        var rawStep = (b - a) / count;
        var power = Math.floor(Math.log10(rawStep));
        var step = Math.pow(10, power);
        var error = rawStep / step;
        var m = getTickMultiplier(error);
        return m * step;
    }
    var NumericTicks = /** @class */ (function (_super) {
        __extends$S(NumericTicks, _super);
        function NumericTicks(fractionDigits, elements) {
            var _this = _super.call(this) || this;
            if (elements) {
                for (var i = 0, n = elements.length; i < n; i++) {
                    _this[i] = elements[i];
                }
            }
            _this.fractionDigits = fractionDigits;
            return _this;
        }
        return NumericTicks;
    }(Array));
    function range(start, stop, step) {
        var isInteger = step >= 1;
        var fractionDigits = isInteger ? 0 : -Math.floor(Math.log10(step));
        var f = Math.pow(10, fractionDigits);
        var n = Math.ceil((stop - start) / step);
        var values = new NumericTicks(fractionDigits);
        for (var i = 0; i <= n; i++) {
            var value = start + step * i;
            values.push(Math.round(value * f) / f);
        }
        return values;
    }

    var CONSTANTS = {
        periods: ['AM', 'PM'],
        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        months: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ],
        shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    };
    function dayOfYear(date, startOfYear) {
        if (startOfYear === void 0) { startOfYear = new Date(date.getFullYear(), 0, 1); }
        var startOffset = date.getTimezoneOffset() - startOfYear.getTimezoneOffset();
        var timeDiff = date.getTime() - startOfYear.getTime() + startOffset * 60000;
        var timeOneDay = 3600000 * 24;
        return Math.floor(timeDiff / timeOneDay);
    }
    function weekOfYear(date, startDay) {
        var startOfYear = new Date(date.getFullYear(), 0, 1);
        var startOfYearDay = startOfYear.getDay();
        var firstWeekStartOffset = (startDay - startOfYearDay + 7) % 7;
        var startOffset = new Date(date.getFullYear(), 0, firstWeekStartOffset + 1);
        if (startOffset <= date) {
            return Math.floor(dayOfYear(date, startOffset) / 7) + 1;
        }
        // Days before week 1 are in week 0.
        return 0;
    }
    var SUNDAY = 0;
    var MONDAY = 1;
    var THURSDAY = 4;
    function isoWeekOfYear(date, year) {
        if (year === void 0) { year = date.getFullYear(); }
        var firstOfYear = new Date(year, 0, 1);
        var firstOfYearDay = firstOfYear.getDay();
        var firstThursdayOffset = (THURSDAY - firstOfYearDay + 7) % 7;
        var startOffset = new Date(year, 0, firstThursdayOffset - (THURSDAY - MONDAY) + 1);
        if (startOffset <= date) {
            return Math.floor(dayOfYear(date, startOffset) / 7) + 1;
        }
        // Days before week 1 are in week 52/53 of previous year.
        return isoWeekOfYear(date, year - 1);
    }
    function timezone(date) {
        var offset = date.getTimezoneOffset();
        var unsignedOffset = Math.abs(offset);
        var sign = offset > 0 ? '-' : '+';
        return "" + sign + pad(Math.floor(unsignedOffset / 60), 2, '0') + pad(Math.floor(unsignedOffset % 60), 2, '0');
    }
    var FORMATTERS = {
        a: function (d) { return CONSTANTS.shortDays[d.getDay()]; },
        A: function (d) { return CONSTANTS.days[d.getDay()]; },
        b: function (d) { return CONSTANTS.shortMonths[d.getMonth()]; },
        B: function (d) { return CONSTANTS.months[d.getMonth()]; },
        c: '%x, %X',
        d: function (d, p) { return pad(d.getDate(), 2, p !== null && p !== void 0 ? p : '0'); },
        e: '%_d',
        f: function (d, p) { return pad(d.getMilliseconds() * 1000, 6, p !== null && p !== void 0 ? p : '0'); },
        H: function (d, p) { return pad(d.getHours(), 2, p !== null && p !== void 0 ? p : '0'); },
        I: function (d, p) {
            var hours = d.getHours() % 12;
            return hours === 0 ? '12' : pad(hours, 2, p !== null && p !== void 0 ? p : '0');
        },
        j: function (d, p) { return pad(dayOfYear(d) + 1, 3, p !== null && p !== void 0 ? p : '0'); },
        m: function (d, p) { return pad(d.getMonth() + 1, 2, p !== null && p !== void 0 ? p : '0'); },
        M: function (d, p) { return pad(d.getMinutes(), 2, p !== null && p !== void 0 ? p : '0'); },
        L: function (d, p) { return pad(d.getMilliseconds(), 3, p !== null && p !== void 0 ? p : '0'); },
        p: function (d) { return (d.getHours() < 12 ? 'AM' : 'PM'); },
        Q: function (d) { return String(d.getTime()); },
        s: function (d) { return String(Math.floor(d.getTime() / 1000)); },
        S: function (d, p) { return pad(d.getSeconds(), 2, p !== null && p !== void 0 ? p : '0'); },
        u: function (d) {
            var day = d.getDay();
            if (day < 1)
                day += 7;
            return String(day % 7);
        },
        U: function (d, p) { return pad(weekOfYear(d, SUNDAY), 2, p !== null && p !== void 0 ? p : '0'); },
        V: function (d, p) { return pad(isoWeekOfYear(d), 2, p !== null && p !== void 0 ? p : '0'); },
        w: function (d, p) { return pad(d.getDay(), 2, p !== null && p !== void 0 ? p : '0'); },
        W: function (d, p) { return pad(weekOfYear(d, MONDAY), 2, p !== null && p !== void 0 ? p : '0'); },
        x: '%-m/%-d/%Y',
        X: '%-I:%M:%S %p',
        y: function (d, p) { return pad(d.getFullYear() % 100, 2, p !== null && p !== void 0 ? p : '0'); },
        Y: function (d, p) { return pad(d.getFullYear(), 4, p !== null && p !== void 0 ? p : '0'); },
        Z: function (d) { return timezone(d); },
        '%': function () { return '%'; },
    };
    var PADS = {
        _: ' ',
        '0': '0',
        '-': '',
    };
    function pad(value, size, padChar) {
        var output = String(Math.floor(value));
        if (output.length >= size) {
            return output;
        }
        return "" + padChar.repeat(size - output.length) + output;
    }
    function buildFormatter(formatString) {
        var formatParts = [];
        while (formatString.length > 0) {
            var nextEscapeIdx = formatString.indexOf('%');
            if (nextEscapeIdx !== 0) {
                var literalPart = nextEscapeIdx > 0 ? formatString.substring(0, nextEscapeIdx) : formatString;
                formatParts.push(literalPart);
            }
            if (nextEscapeIdx < 0)
                break;
            var maybePadSpecifier = formatString[nextEscapeIdx + 1];
            var maybePad = PADS[maybePadSpecifier];
            if (maybePad != null) {
                nextEscapeIdx++;
            }
            var maybeFormatterSpecifier = formatString[nextEscapeIdx + 1];
            var maybeFormatter = FORMATTERS[maybeFormatterSpecifier];
            if (typeof maybeFormatter === 'function') {
                formatParts.push([maybeFormatter, maybePad]);
            }
            else if (typeof maybeFormatter === 'string') {
                var formatter = buildFormatter(maybeFormatter);
                formatParts.push([formatter, maybePad]);
            }
            else {
                formatParts.push("" + (maybePad !== null && maybePad !== void 0 ? maybePad : '') + maybeFormatterSpecifier);
            }
            formatString = formatString.substring(nextEscapeIdx + 2);
        }
        return function (dateTime) {
            var dateTimeAsDate = typeof dateTime === 'number' ? new Date(dateTime) : dateTime;
            return formatParts.map(function (c) { return (typeof c === 'string' ? c : c[0](dateTimeAsDate, c[1])); }).join('');
        };
    }

    var __extends$R = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __values$i = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$r = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$h = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$r(arguments[i]));
        return ar;
    };
    var _a;
    var DefaultTimeFormats;
    (function (DefaultTimeFormats) {
        DefaultTimeFormats[DefaultTimeFormats["MILLISECOND"] = 0] = "MILLISECOND";
        DefaultTimeFormats[DefaultTimeFormats["SECOND"] = 1] = "SECOND";
        DefaultTimeFormats[DefaultTimeFormats["MINUTE"] = 2] = "MINUTE";
        DefaultTimeFormats[DefaultTimeFormats["HOUR"] = 3] = "HOUR";
        DefaultTimeFormats[DefaultTimeFormats["SHORT_MONTH"] = 4] = "SHORT_MONTH";
        DefaultTimeFormats[DefaultTimeFormats["MONTH"] = 5] = "MONTH";
        DefaultTimeFormats[DefaultTimeFormats["YEAR"] = 6] = "YEAR";
    })(DefaultTimeFormats || (DefaultTimeFormats = {}));
    var formatStrings = (_a = {},
        _a[DefaultTimeFormats.MILLISECOND] = '.%L',
        _a[DefaultTimeFormats.SECOND] = ':%S',
        _a[DefaultTimeFormats.MINUTE] = '%I:%M',
        _a[DefaultTimeFormats.HOUR] = '%I %p',
        _a[DefaultTimeFormats.SHORT_MONTH] = '%b %d',
        _a[DefaultTimeFormats.MONTH] = '%B',
        _a[DefaultTimeFormats.YEAR] = '%Y',
        _a);
    function toNumber(x) {
        return x instanceof Date ? x.getTime() : x;
    }
    var TimeScale = /** @class */ (function (_super) {
        __extends$R(TimeScale, _super);
        function TimeScale() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = 'time';
            _this.domain = [new Date(2022, 11, 7), new Date(2022, 11, 8)];
            _this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'tickInterval'];
            _this.year = year;
            _this.month = month;
            _this.week = sunday;
            _this.day = day;
            _this.hour = hour;
            _this.minute = minute;
            _this.second = second;
            _this.millisecond = millisecond;
            /**
             * Array of default tick intervals in the following format:
             *
             *     [
             *         interval (unit of time),
             *         number of units (step),
             *         the length of that number of units in milliseconds
             *     ]
             */
            _this.tickIntervals = [
                [_this.second, 1, durationSecond],
                [_this.second, 5, 5 * durationSecond],
                [_this.second, 15, 15 * durationSecond],
                [_this.second, 30, 30 * durationSecond],
                [_this.minute, 1, durationMinute],
                [_this.minute, 5, 5 * durationMinute],
                [_this.minute, 15, 15 * durationMinute],
                [_this.minute, 30, 30 * durationMinute],
                [_this.hour, 1, durationHour],
                [_this.hour, 3, 3 * durationHour],
                [_this.hour, 6, 6 * durationHour],
                [_this.hour, 12, 12 * durationHour],
                [_this.day, 1, durationDay],
                [_this.day, 2, 2 * durationDay],
                [_this.week, 1, durationWeek],
                [_this.week, 2, 2 * durationWeek],
                [_this.month, 1, durationMonth],
                [_this.month, 3, 3 * durationMonth],
                [_this.month, 6, 6 * durationMonth],
                [_this.year, 1, durationYear],
            ];
            return _this;
        }
        TimeScale.prototype.calculateDefaultTickFormat = function (ticks) {
            var e_1, _a;
            var defaultTimeFormat = DefaultTimeFormats.YEAR;
            var updateFormat = function (format) {
                if (format < defaultTimeFormat) {
                    defaultTimeFormat = format;
                }
            };
            try {
                for (var _b = __values$i(ticks !== null && ticks !== void 0 ? ticks : []), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    this.second.floor(value) < value
                        ? updateFormat(DefaultTimeFormats.MILLISECOND)
                        : this.minute.floor(value) < value
                            ? updateFormat(DefaultTimeFormats.SECOND)
                            : this.hour.floor(value) < value
                                ? updateFormat(DefaultTimeFormats.MINUTE)
                                : this.day.floor(value) < value
                                    ? updateFormat(DefaultTimeFormats.HOUR)
                                    : this.month.floor(value) < value
                                        ? updateFormat(DefaultTimeFormats.SHORT_MONTH)
                                        : this.year.floor(value) < value
                                            ? updateFormat(DefaultTimeFormats.MONTH)
                                            : updateFormat(DefaultTimeFormats.YEAR);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var domain = this.getDomain();
            var start = Math.min.apply(Math, __spread$h(domain.map(toNumber)));
            var stop = Math.max.apply(Math, __spread$h(domain.map(toNumber)));
            var extent = stop - start;
            var formatStringArray = [formatStrings[defaultTimeFormat]];
            var timeEndIndex = 0;
            switch (defaultTimeFormat) {
                case DefaultTimeFormats.SECOND:
                    if (extent / durationMinute > 1) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.MINUTE]);
                    }
                // fall through deliberately
                case DefaultTimeFormats.MINUTE:
                    if (extent / durationHour > 1) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.HOUR]);
                    }
                // fall through deliberately
                case DefaultTimeFormats.HOUR:
                    timeEndIndex = formatStringArray.length;
                    if (extent / durationDay > 1) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.SHORT_MONTH]);
                    }
                // fall through deliberately
                case DefaultTimeFormats.SHORT_MONTH:
                // fall through deliberately
                case DefaultTimeFormats.MONTH:
                    if (extent / durationYear > 1) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.YEAR]);
                    }
            }
            if (timeEndIndex < formatStringArray.length) {
                // Insert a gap between all date components.
                formatStringArray = __spread$h(formatStringArray.slice(0, timeEndIndex), [
                    formatStringArray.slice(timeEndIndex).join(' '),
                ]);
            }
            if (timeEndIndex > 0) {
                // Reverse order of time components, since they should be displayed in descending
                // granularity.
                formatStringArray = __spread$h(formatStringArray.slice(0, timeEndIndex).reverse(), formatStringArray.slice(timeEndIndex));
                if (timeEndIndex < formatStringArray.length) {
                    // Insert a gap between time and date components.
                    formatStringArray.splice(timeEndIndex, 0, ' ');
                }
            }
            return formatStringArray.join('');
        };
        TimeScale.prototype.defaultTickFormat = function (ticks) {
            var formatString = this.calculateDefaultTickFormat(ticks);
            return function (date) { return buildFormatter(formatString)(date); };
        };
        /**
         * @param start The start time (timestamp).
         * @param stop The end time (timestamp).
         * @param step Number of intervals between ticks.
         */
        TimeScale.prototype.getTickInterval = function (_a) {
            var _b;
            var _c;
            var start = _a.start, stop = _a.stop, step = _a.step;
            var interval = this.tickInterval;
            if (interval) {
                return interval;
            }
            var tickCount = (_c = this.tickCount) !== null && _c !== void 0 ? _c : 10;
            var tickIntervals = this.tickIntervals;
            var target = Math.abs(stop - start) / tickCount;
            var i = 0;
            while (i < tickIntervals.length && target > tickIntervals[i][2]) {
                i++;
            }
            if (i === 0) {
                step = Math.max(tickStep(start, stop, tickCount), 1);
                interval = this.millisecond;
            }
            else if (i === tickIntervals.length) {
                var y0 = start / durationYear;
                var y1 = stop / durationYear;
                step = tickStep(y0, y1, tickCount);
                interval = this.year;
            }
            else {
                var ratio0 = target / tickIntervals[i - 1][2];
                var ratio1 = tickIntervals[i][2] / target;
                var index = ratio0 < ratio1 ? i - 1 : i;
                _b = __read$r(tickIntervals[index], 2), interval = _b[0], step = _b[1];
            }
            return interval.every(step);
        };
        TimeScale.prototype.invert = function (y) {
            return new Date(_super.prototype.invert.call(this, y));
        };
        /**
         * Returns uniformly-spaced dates that represent the scale's domain.
         */
        TimeScale.prototype.ticks = function () {
            if (!this.domain || this.domain.length < 2) {
                return [];
            }
            this.refresh();
            if (this.nice) {
                var tickCount = this.tickCount;
                if (tickCount === 2) {
                    return this.niceDomain;
                }
                if (tickCount === 1) {
                    return this.niceDomain.slice(0, 1);
                }
            }
            var _a = __read$r(this.getDomain().map(toNumber), 2), t0 = _a[0], t1 = _a[1];
            var t = this.getTickInterval({ start: t0, stop: t1 });
            return t ? t.range(new Date(t0), new Date(t1 + 1)) : []; // inclusive stop
        };
        /**
         * Returns a time format function suitable for displaying tick values.
         * @param specifier If the specifier string is provided, this method is equivalent to
         * the {@link TimeLocaleObject.format} method.
         * If no specifier is provided, this method returns the default time format function.
         */
        TimeScale.prototype.tickFormat = function (_a) {
            var ticks = _a.ticks, specifier = _a.specifier;
            return specifier == undefined ? this.defaultTickFormat(ticks) : buildFormatter(specifier);
        };
        TimeScale.prototype.update = function () {
            if (!this.domain || this.domain.length < 2) {
                return;
            }
            if (this.nice) {
                this.updateNiceDomain();
            }
        };
        /**
         * Extends the domain so that it starts and ends on nice round values.
         * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
         */
        TimeScale.prototype.updateNiceDomain = function () {
            var _a = __read$r(this.domain, 2), d0 = _a[0], d1 = _a[1];
            var start = toNumber(d0);
            var stop = toNumber(d1);
            var i = this.getTickInterval({ start: start, stop: stop });
            if (i) {
                var n0 = i.floor(d0);
                var n1 = i.ceil(d1);
                this.niceDomain = [n0, n1];
            }
        };
        return TimeScale;
    }(ContinuousScale));

    var __decorate$x = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$q = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$g = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$q(arguments[i]));
        return ar;
    };
    var TICK_COUNT = predicateWithMessage(function (v, ctx) { return NUMBER(0)(v, ctx) || v instanceof TimeInterval; }, "expecting a tick count Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'");
    var OPT_TICK_COUNT = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, TICK_COUNT); }, "expecting an optional tick count Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'");
    var GRID_STYLE_KEYS = ['stroke', 'lineDash'];
    var GRID_STYLE = predicateWithMessage(ARRAY(undefined, function (o) {
        for (var key in o) {
            if (!GRID_STYLE_KEYS.includes(key)) {
                return false;
            }
        }
        return true;
    }), "expecting an Array of objects with gridline style properties such as 'stroke' and 'lineDash'");
    var Tags;
    (function (Tags) {
        Tags[Tags["Tick"] = 0] = "Tick";
        Tags[Tags["GridLine"] = 1] = "GridLine";
    })(Tags || (Tags = {}));
    var AxisLine = /** @class */ (function () {
        function AxisLine() {
            this.width = 1;
            this.color = 'rgba(195, 195, 195, 1)';
        }
        __decorate$x([
            Validate(NUMBER(0))
        ], AxisLine.prototype, "width", void 0);
        __decorate$x([
            Validate(OPT_COLOR_STRING)
        ], AxisLine.prototype, "color", void 0);
        return AxisLine;
    }());
    var AxisTick = /** @class */ (function () {
        function AxisTick() {
            /**
             * The line width to be used by axis ticks.
             */
            this.width = 1;
            /**
             * The line length to be used by axis ticks.
             */
            this.size = 6;
            /**
             * The color of the axis ticks.
             * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make the ticks invisible.
             */
            this.color = 'rgba(195, 195, 195, 1)';
            /**
             * A hint of how many ticks to use (the exact number of ticks might differ),
             * a `TimeInterval` or a `CountableTimeInterval`.
             * For example:
             *
             *     axis.tick.count = 5;
             *     axis.tick.count = year;
             *     axis.tick.count = month.every(6);
             */
            this.count = undefined;
        }
        __decorate$x([
            Validate(NUMBER(0))
        ], AxisTick.prototype, "width", void 0);
        __decorate$x([
            Validate(NUMBER(0))
        ], AxisTick.prototype, "size", void 0);
        __decorate$x([
            Validate(OPT_COLOR_STRING)
        ], AxisTick.prototype, "color", void 0);
        __decorate$x([
            Validate(OPT_TICK_COUNT)
        ], AxisTick.prototype, "count", void 0);
        return AxisTick;
    }());
    var AxisLabel = /** @class */ (function () {
        function AxisLabel() {
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
            /**
             * The padding between the labels and the ticks.
             */
            this.padding = 5;
            /**
             * Minimum gap in pixels between the axis labels before being removed to avoid collisions.
             */
            this.minSpacing = undefined;
            /**
             * The color of the labels.
             * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.
             */
            this.color = 'rgba(87, 87, 87, 1)';
            /**
             * Custom label rotation in degrees.
             * Labels are rendered perpendicular to the axis line by default.
             * Or parallel to the axis line, if the {@link parallel} is set to `true`.
             * The value of this config is used as the angular offset/deflection
             * from the default rotation.
             */
            this.rotation = undefined;
            /**
             * If specified and axis labels may collide, they are rotated to reduce collisions. If the
             * `rotation` property is specified, it takes precedence.
             */
            this.autoRotate = undefined;
            /**
             * Rotation angle to use when autoRotate is applied.
             */
            this.autoRotateAngle = 335;
            /**
             * Avoid axis label collision by automatically reducing the number of ticks displayed. If set to `false`, axis labels may collide.
             */
            this.avoidCollisions = true;
            /**
             * By default labels and ticks are positioned to the left of the axis line.
             * `true` positions the labels to the right of the axis line.
             * However, if the axis is rotated, it's easier to think in terms
             * of this side or the opposite side, rather than left and right.
             * We use the term `mirror` for conciseness, although it's not
             * true mirroring - for example, when a label is rotated, so that
             * it is inclined at the 45 degree angle, text flowing from north-west
             * to south-east, ending at the tick to the left of the axis line,
             * and then we set this config to `true`, the text will still be flowing
             * from north-west to south-east, _starting_ at the tick to the right
             * of the axis line.
             */
            this.mirrored = false;
            /**
             * Labels are rendered perpendicular to the axis line by default.
             * Setting this config to `true` makes labels render parallel to the axis line
             * and center aligns labels' text at the ticks.
             */
            this.parallel = false;
            /**
             * In case {@param value} is a number, the {@param fractionDigits} parameter will
             * be provided as well. The `fractionDigits` corresponds to the number of fraction
             * digits used by the tick step. For example, if the tick step is `0.0005`,
             * the `fractionDigits` is 4.
             */
            this.formatter = undefined;
            this.format = undefined;
        }
        __decorate$x([
            Validate(OPT_FONT_STYLE)
        ], AxisLabel.prototype, "fontStyle", void 0);
        __decorate$x([
            Validate(OPT_FONT_WEIGHT)
        ], AxisLabel.prototype, "fontWeight", void 0);
        __decorate$x([
            Validate(NUMBER(1))
        ], AxisLabel.prototype, "fontSize", void 0);
        __decorate$x([
            Validate(STRING)
        ], AxisLabel.prototype, "fontFamily", void 0);
        __decorate$x([
            Validate(NUMBER(0))
        ], AxisLabel.prototype, "padding", void 0);
        __decorate$x([
            Validate(OPT_NUMBER())
        ], AxisLabel.prototype, "minSpacing", void 0);
        __decorate$x([
            Validate(OPT_COLOR_STRING)
        ], AxisLabel.prototype, "color", void 0);
        __decorate$x([
            Validate(OPT_NUMBER(-360, 360))
        ], AxisLabel.prototype, "rotation", void 0);
        __decorate$x([
            Validate(OPT_BOOLEAN)
        ], AxisLabel.prototype, "autoRotate", void 0);
        __decorate$x([
            Validate(NUMBER(-360, 360))
        ], AxisLabel.prototype, "autoRotateAngle", void 0);
        __decorate$x([
            Validate(BOOLEAN)
        ], AxisLabel.prototype, "avoidCollisions", void 0);
        __decorate$x([
            Validate(BOOLEAN)
        ], AxisLabel.prototype, "mirrored", void 0);
        __decorate$x([
            Validate(BOOLEAN)
        ], AxisLabel.prototype, "parallel", void 0);
        __decorate$x([
            Validate(OPT_STRING)
        ], AxisLabel.prototype, "format", void 0);
        return AxisLabel;
    }());
    /**
     * A general purpose linear axis with no notion of orientation.
     * The axis is always rendered vertically, with horizontal labels positioned to the left
     * of the axis line by default. The axis can be {@link rotation | rotated} by an arbitrary angle,
     * so that it can be used as a top, right, bottom, left, radial or any other kind
     * of linear axis.
     * The generic `D` parameter is the type of the domain of the axis' scale.
     * The output range of the axis' scale is always numeric (screen coordinates).
     */
    var Axis = /** @class */ (function () {
        function Axis(scale) {
            this.id = createId(this);
            this.nice = true;
            this.dataDomain = [];
            this.axisGroup = new Group({ name: this.id + "-axis", zIndex: Layers.AXIS_ZINDEX });
            this.crossLineGroup = new Group({ name: this.id + "-CrossLines" });
            this.lineGroup = this.axisGroup.appendChild(new Group({ name: this.id + "-Line" }));
            this.tickGroup = this.axisGroup.appendChild(new Group({ name: this.id + "-Tick" }));
            this.titleGroup = this.axisGroup.appendChild(new Group({ name: this.id + "-Title" }));
            this.tickGroupSelection = Selection.select(this.tickGroup).selectAll();
            this.lineNode = this.lineGroup.appendChild(new Line());
            this.gridlineGroup = new Group({
                name: this.id + "-gridline",
                zIndex: Layers.AXIS_GRIDLINES_ZINDEX,
            });
            this.gridlineGroupSelection = Selection.select(this.gridlineGroup).selectAll();
            this._crossLines = [];
            this.line = new AxisLine();
            this.tick = new AxisTick();
            this.label = new AxisLabel();
            this.translation = { x: 0, y: 0 };
            this.rotation = 0; // axis rotation angle in degrees
            this.requestedRange = [0, 1];
            this._visibleRange = [0, 1];
            this._title = undefined;
            /**
             * The length of the grid. The grid is only visible in case of a non-zero value.
             * In case {@link radialGrid} is `true`, the value is interpreted as an angle
             * (in degrees).
             */
            this._gridLength = 0;
            /**
             * The array of styles to cycle through when rendering grid lines.
             * For example, use two {@link GridStyle} objects for alternating styles.
             * Contains only one {@link GridStyle} object by default, meaning all grid lines
             * have the same style.
             */
            this.gridStyle = [
                {
                    stroke: 'rgba(219, 219, 219, 1)',
                    lineDash: [4, 2],
                },
            ];
            /**
             * `false` - render grid as lines of {@link gridLength} that extend the ticks
             *           on the opposite side of the axis
             * `true` - render grid as concentric circles that go through the ticks
             */
            this._radialGrid = false;
            this.fractionDigits = 0;
            /**
             * The distance between the grid ticks and the axis ticks.
             */
            this.gridPadding = 0;
            this.thickness = 0;
            this._scale = scale;
            this.refreshScale();
        }
        Object.defineProperty(Axis.prototype, "scale", {
            get: function () {
                return this._scale;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Axis.prototype, "crossLines", {
            get: function () {
                return this._crossLines;
            },
            set: function (value) {
                var _this = this;
                var _a, _b;
                (_a = this._crossLines) === null || _a === void 0 ? void 0 : _a.forEach(function (crossLine) { return _this.detachCrossLine(crossLine); });
                this._crossLines = value;
                (_b = this._crossLines) === null || _b === void 0 ? void 0 : _b.forEach(function (crossLine) {
                    _this.attachCrossLine(crossLine);
                    _this.initCrossLine(crossLine);
                });
            },
            enumerable: false,
            configurable: true
        });
        Axis.prototype.attachCrossLine = function (crossLine) {
            this.crossLineGroup.appendChild(crossLine.group);
        };
        Axis.prototype.detachCrossLine = function (crossLine) {
            this.crossLineGroup.removeChild(crossLine.group);
        };
        Axis.prototype.refreshScale = function () {
            var _this = this;
            var _a;
            this.requestedRange = this.scale.range.slice();
            (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach(function (crossLine) {
                _this.initCrossLine(crossLine);
            });
        };
        Axis.prototype.updateRange = function () {
            var _a;
            var _b = this, rr = _b.requestedRange, vr = _b.visibleRange, scale = _b.scale;
            var span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
            var shift = span * vr[0];
            var start = rr[0] - shift;
            scale.range = [start, start + span];
            (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach(function (crossLine) {
                crossLine.clippedRange = [rr[0], rr[1]];
            });
        };
        Axis.prototype.setCrossLinesVisible = function (visible) {
            this.crossLineGroup.visible = visible;
        };
        Axis.prototype.attachAxis = function (node, nextNode) {
            node.insertBefore(this.gridlineGroup, nextNode);
            node.insertBefore(this.axisGroup, nextNode);
            node.insertBefore(this.crossLineGroup, nextNode);
        };
        Axis.prototype.detachAxis = function (node) {
            node.removeChild(this.axisGroup);
            node.removeChild(this.gridlineGroup);
            node.removeChild(this.crossLineGroup);
        };
        /**
         * Checks if a point or an object is in range.
         * @param x A point (or object's starting point).
         * @param width Object's width.
         * @param tolerance Expands the range on both ends by this amount.
         */
        Axis.prototype.inRange = function (x, width, tolerance) {
            if (width === void 0) { width = 0; }
            if (tolerance === void 0) { tolerance = 0; }
            return this.inRangeEx(x, width, tolerance) === 0;
        };
        Axis.prototype.inRangeEx = function (x, width, tolerance) {
            if (width === void 0) { width = 0; }
            if (tolerance === void 0) { tolerance = 0; }
            var range = this.range;
            // Account for inverted ranges, for example [500, 100] as well as [100, 500]
            var min = Math.min(range[0], range[1]);
            var max = Math.max(range[0], range[1]);
            if (x + width < min - tolerance) {
                return -1; // left of range
            }
            if (x > max + tolerance) {
                return 1; // right of range
            }
            return 0; // in range
        };
        Object.defineProperty(Axis.prototype, "range", {
            get: function () {
                return this.requestedRange;
            },
            set: function (value) {
                this.requestedRange = value.slice();
                this.updateRange();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Axis.prototype, "visibleRange", {
            get: function () {
                return this._visibleRange.slice();
            },
            set: function (value) {
                if (value && value.length === 2) {
                    var _a = __read$q(value, 2), min = _a[0], max = _a[1];
                    min = Math.max(0, min);
                    max = Math.min(1, max);
                    min = Math.min(min, max);
                    max = Math.max(min, max);
                    this._visibleRange = [min, max];
                    this.updateRange();
                }
            },
            enumerable: false,
            configurable: true
        });
        Axis.prototype.onLabelFormatChange = function (ticks, format) {
            var scale = this.scale;
            if (format && scale && scale.tickFormat) {
                try {
                    this.labelFormatter = scale.tickFormat({
                        ticks: ticks,
                        count: ticks.length,
                        specifier: format,
                    });
                }
                catch (e) {
                    this.labelFormatter = undefined;
                    doOnce(function () {
                        return console.warn("AG Charts - the axis label format string " + format + " is invalid. No formatting will be applied");
                    }, "invalid axis label format string " + format);
                }
            }
            else {
                this.labelFormatter = undefined;
            }
        };
        Object.defineProperty(Axis.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (value) {
                var oldTitle = this._title;
                if (oldTitle !== value) {
                    if (oldTitle) {
                        this.titleGroup.removeChild(oldTitle.node);
                    }
                    if (value) {
                        value.node.rotation = -Math.PI / 2;
                        this.titleGroup.appendChild(value.node);
                    }
                    this._title = value;
                    // position title so that it doesn't briefly get rendered in the top left hand corner of the canvas before update is called.
                    this.setTickCount(this.scale, this.tick.count);
                    this.updateTitle({ ticks: this.scale.ticks() });
                }
            },
            enumerable: false,
            configurable: true
        });
        Axis.prototype.setTickCount = function (scale, count) {
            if (scale instanceof TimeScale && count && count instanceof TimeInterval) {
                scale.tickInterval = count;
            }
            else {
                scale.tickCount = count;
            }
        };
        Object.defineProperty(Axis.prototype, "gridLength", {
            get: function () {
                return this._gridLength;
            },
            set: function (value) {
                var _this = this;
                var _a;
                // Was visible and now invisible, or was invisible and now visible.
                if ((this._gridLength && !value) || (!this._gridLength && value)) {
                    this.gridlineGroupSelection = this.gridlineGroupSelection.remove().setData([]);
                }
                this._gridLength = value;
                (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach(function (crossLine) {
                    _this.initCrossLine(crossLine);
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Axis.prototype, "radialGrid", {
            get: function () {
                return this._radialGrid;
            },
            set: function (value) {
                if (this._radialGrid !== value) {
                    this._radialGrid = value;
                    this.gridlineGroupSelection = this.gridlineGroupSelection.remove().setData([]);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Creates/removes/updates the scene graph nodes that constitute the axis.
         */
        Axis.prototype.update = function (primaryTickCount) {
            var _a, _b;
            this.calculateDomain();
            var _c = this, scale = _c.scale, gridLength = _c.gridLength, tick = _c.tick, _d = _c.label, parallelLabels = _d.parallel, mirrored = _d.mirrored, avoidCollisions = _d.avoidCollisions, minSpacing = _d.minSpacing, requestedRange = _c.requestedRange;
            var requestedRangeMin = Math.min.apply(Math, __spread$g(requestedRange));
            var requestedRangeMax = Math.max.apply(Math, __spread$g(requestedRange));
            var rotation = toRadians(this.rotation);
            var anySeriesActive = this.isAnySeriesActive();
            // The side of the axis line to position the labels on.
            // -1 = left (default)
            //  1 = right
            var sideFlag = mirrored ? 1 : -1;
            // When labels are parallel to the axis line, the `parallelFlipFlag` is used to
            // flip the labels to avoid upside-down text, when the axis is rotated
            // such that it is in the right hemisphere, i.e. the angle of rotation
            // is in the [0, π] interval.
            // The rotation angle is normalized, so that we have an easier time checking
            // if it's in the said interval. Since the axis is always rendered vertically
            // and then rotated, zero rotation means 12 (not 3) o-clock.
            // -1 = flip
            //  1 = don't flip (default)
            var parallelFlipRotation = normalizeAngle360(rotation);
            var regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);
            var nice = this.nice;
            scale.domain = this.dataDomain;
            if (scale instanceof ContinuousScale) {
                scale.nice = nice;
                this.setTickCount(scale, this.tick.count);
                scale.update();
            }
            var halfBandwidth = (scale.bandwidth || 0) / 2;
            this.updatePosition();
            this.updateLine();
            var i = 0;
            var labelOverlap = true;
            var ticks = [];
            var defaultTickCount = 10;
            var continuous = scale instanceof ContinuousScale;
            var secondaryAxis = primaryTickCount !== undefined;
            while (labelOverlap) {
                var unchanged = true;
                var _loop_1 = function () {
                    if (i >= defaultTickCount) {
                        return "break";
                    }
                    var prevTicks = ticks;
                    var filteredTicks = !avoidCollisions || (continuous && this_1.tick.count === undefined) || i === 0
                        ? undefined
                        : ticks.filter(function (_, i) { return i % 2 === 0; });
                    var secondaryAxisTicks = void 0;
                    if (secondaryAxis) {
                        // `updateSecondaryAxisTicks` mutates `scale.domain` based on `primaryTickCount`
                        secondaryAxisTicks = this_1.updateSecondaryAxisTicks(primaryTickCount);
                    }
                    if (filteredTicks) {
                        ticks = filteredTicks;
                    }
                    else if (secondaryAxisTicks) {
                        ticks = secondaryAxisTicks;
                    }
                    else {
                        scale.tickCount = (_a = this_1.tick.count) !== null && _a !== void 0 ? _a : defaultTickCount - i;
                        ticks = scale.ticks();
                    }
                    this_1.updateSelections({
                        halfBandwidth: halfBandwidth,
                        gridLength: gridLength,
                        ticks: ticks,
                    });
                    if (!secondaryAxis && ticks.length > 0) {
                        primaryTickCount = ticks.length;
                    }
                    unchanged = avoidCollisions ? ticks.every(function (t, i) { return Number(t) === Number(prevTicks[i]); }) : false;
                    i++;
                };
                var this_1 = this;
                while (unchanged) {
                    var state_1 = _loop_1();
                    if (state_1 === "break")
                        break;
                }
                if (unchanged) {
                    break;
                }
                // When the scale domain or the ticks change, the label format may change
                this.onLabelFormatChange(ticks, this.label.format);
                var _e = this.updateLabels({
                    parallelFlipRotation: parallelFlipRotation,
                    regularFlipRotation: regularFlipRotation,
                    sideFlag: sideFlag,
                    tickLineGroupSelection: this.tickGroupSelection,
                    ticks: ticks,
                }), labelData = _e.labelData, rotated = _e.rotated;
                var labelPadding = minSpacing !== null && minSpacing !== void 0 ? minSpacing : (rotated ? 0 : 10);
                // no need for further iterations if `avoidCollisions` is false
                labelOverlap = avoidCollisions ? axisLabelsOverlap(labelData, labelPadding) : false;
            }
            this.updateGridLines({
                gridLength: gridLength,
                halfBandwidth: halfBandwidth,
                sideFlag: sideFlag,
            });
            var anyTickVisible = false;
            var visibleFn = function (node) {
                var min = Math.floor(requestedRangeMin);
                var max = Math.ceil(requestedRangeMax);
                if (min === max) {
                    return false;
                }
                // Fix an effect of rounding error
                if (node.translationY >= min - 1 && node.translationY < min) {
                    node.translationY = min;
                }
                if (node.translationY > max && node.translationY <= max + 1) {
                    node.translationY = max;
                }
                var visible = node.translationY >= min && node.translationY <= max;
                if (visible) {
                    anyTickVisible = true;
                }
                return visible;
            };
            var _f = this, gridlineGroupSelection = _f.gridlineGroupSelection, tickGroupSelection = _f.tickGroupSelection;
            gridlineGroupSelection.attrFn('visible', visibleFn);
            tickGroupSelection.attrFn('visible', visibleFn);
            this.tickGroup.visible = anyTickVisible;
            this.gridlineGroup.visible = anyTickVisible;
            (_b = this.crossLines) === null || _b === void 0 ? void 0 : _b.forEach(function (crossLine) {
                crossLine.sideFlag = -sideFlag;
                crossLine.direction = rotation === -Math.PI / 2 ? ChartAxisDirection.X : ChartAxisDirection.Y;
                crossLine.label.parallel =
                    crossLine.label.parallel !== undefined ? crossLine.label.parallel : parallelLabels;
                crossLine.parallelFlipRotation = parallelFlipRotation;
                crossLine.regularFlipRotation = regularFlipRotation;
                crossLine.update(anySeriesActive);
            });
            this.updateTitle({ ticks: ticks });
            tickGroupSelection
                .selectByTag(Tags.Tick)
                .each(function (line) {
                line.strokeWidth = tick.width;
                line.stroke = tick.color;
                line.visible = anyTickVisible;
            })
                .attr('x1', sideFlag * tick.size)
                .attr('x2', 0)
                .attr('y1', 0)
                .attr('y2', 0);
            return primaryTickCount;
        };
        Axis.prototype.calculateDomain = function () {
            // Placeholder for subclasses to override.
        };
        Axis.prototype.updatePosition = function () {
            var _a = this, label = _a.label, axisGroup = _a.axisGroup, gridlineGroup = _a.gridlineGroup, crossLineGroup = _a.crossLineGroup, translation = _a.translation, gridlineGroupSelection = _a.gridlineGroupSelection, gridPadding = _a.gridPadding, gridLength = _a.gridLength;
            var rotation = toRadians(this.rotation);
            var sideFlag = label.mirrored ? 1 : -1;
            var translationX = Math.floor(translation.x);
            var translationY = Math.floor(translation.y);
            crossLineGroup.translationX = translationX;
            crossLineGroup.translationY = translationY;
            crossLineGroup.rotation = rotation;
            axisGroup.translationX = translationX;
            axisGroup.translationY = translationY;
            axisGroup.rotation = rotation;
            gridlineGroup.translationX = translationX;
            gridlineGroup.translationY = translationY;
            gridlineGroup.rotation = rotation;
            gridlineGroupSelection.selectByTag(Tags.GridLine).each(function (line) {
                line.x1 = gridPadding;
                line.x2 = -sideFlag * gridLength + gridPadding;
                line.y1 = 0;
                line.y2 = 0;
            });
        };
        Axis.prototype.updateSecondaryAxisTicks = function (_primaryTickCount) {
            throw new Error('AG Charts - unexpected call to updateSecondaryAxisTicks() - check axes configuration.');
        };
        Axis.prototype.updateTickGroupSelection = function (_a) {
            var data = _a.data;
            var updateAxis = this.tickGroupSelection.setData(data);
            updateAxis.exit.remove();
            var enterAxis = updateAxis.enter.append(Group);
            // Line auto-snaps to pixel grid if vertical or horizontal.
            enterAxis.append(Line).each(function (node) { return (node.tag = Tags.Tick); });
            enterAxis.append(Text);
            return updateAxis.merge(enterAxis);
        };
        Axis.prototype.updateGridLineGroupSelection = function (_a) {
            var gridLength = _a.gridLength, data = _a.data;
            var updateGridlines = this.gridlineGroupSelection.setData(gridLength ? data : []);
            updateGridlines.exit.remove();
            var gridlineGroupSelection = updateGridlines;
            if (gridLength) {
                var tagFn = function (node) { return (node.tag = Tags.GridLine); };
                var enterGridline = updateGridlines.enter.append(Group);
                if (this.radialGrid) {
                    enterGridline.append(Arc).each(tagFn);
                }
                else {
                    enterGridline.append(Line).each(tagFn);
                }
                gridlineGroupSelection = updateGridlines.merge(enterGridline);
            }
            return gridlineGroupSelection;
        };
        Axis.prototype.updateSelections = function (_a) {
            var ticks = _a.ticks, halfBandwidth = _a.halfBandwidth, gridLength = _a.gridLength;
            var scale = this.scale;
            var data = ticks.map(function (t) { return ({ tick: t, translationY: scale.convert(t) + halfBandwidth }); });
            var gridlineGroupSelection = this.updateGridLineGroupSelection({ gridLength: gridLength, data: data });
            var tickGroupSelection = this.updateTickGroupSelection({ data: data });
            // We need raw `translationY` values on `datum` for accurate label collision detection in axes.update()
            // But node `translationY` values must be rounded to get pixel grid alignment
            gridlineGroupSelection.attrFn('translationY', function (_, datum) { return Math.round(datum.translationY); });
            tickGroupSelection.attrFn('translationY', function (_, datum) { return Math.round(datum.translationY); });
            this.tickGroupSelection = tickGroupSelection;
            this.gridlineGroupSelection = gridlineGroupSelection;
        };
        Axis.prototype.updateGridLines = function (_a) {
            var gridLength = _a.gridLength, halfBandwidth = _a.halfBandwidth, sideFlag = _a.sideFlag;
            var _b = this, gridStyle = _b.gridStyle, scale = _b.scale, tick = _b.tick, gridPadding = _b.gridPadding;
            if (gridLength && gridStyle.length) {
                var styleCount_1 = gridStyle.length;
                var gridLines = void 0;
                if (this.radialGrid) {
                    var angularGridLength_1 = normalizeAngle360Inclusive(toRadians(gridLength));
                    gridLines = this.gridlineGroupSelection.selectByTag(Tags.GridLine).each(function (arc, datum) {
                        var radius = Math.round(scale.convert(datum) + halfBandwidth);
                        arc.centerX = 0;
                        arc.centerY = scale.range[0] - radius;
                        arc.endAngle = angularGridLength_1;
                        arc.radiusX = radius;
                        arc.radiusY = radius;
                    });
                }
                else {
                    gridLines = this.gridlineGroupSelection.selectByTag(Tags.GridLine).each(function (line) {
                        line.x1 = gridPadding;
                        line.x2 = -sideFlag * gridLength + gridPadding;
                        line.y1 = 0;
                        line.y2 = 0;
                        line.visible = Math.abs(line.parent.translationY - scale.range[0]) > 1;
                    });
                }
                gridLines.each(function (gridLine, _, index) {
                    var style = gridStyle[index % styleCount_1];
                    gridLine.stroke = style.stroke;
                    gridLine.strokeWidth = tick.width;
                    gridLine.lineDash = style.lineDash;
                    gridLine.fill = undefined;
                });
            }
        };
        Axis.prototype.updateLabels = function (_a) {
            var _this = this;
            var ticks = _a.ticks, tickLineGroupSelection = _a.tickLineGroupSelection, sideFlag = _a.sideFlag, parallelFlipRotation = _a.parallelFlipRotation, regularFlipRotation = _a.regularFlipRotation;
            var _b = this, label = _b.label, _c = _b.label, parallelLabels = _c.parallel, minSpacing = _c.minSpacing, tick = _b.tick;
            var labelAutoRotation = 0;
            var labelRotation = label.rotation ? normalizeAngle360(toRadians(label.rotation)) : 0;
            var parallelFlipFlag = !labelRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;
            // Flip if the axis rotation angle is in the top hemisphere.
            var regularFlipFlag = !labelRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;
            var autoRotation = parallelLabels ? (parallelFlipFlag * Math.PI) / 2 : regularFlipFlag === -1 ? Math.PI : 0;
            // `ticks instanceof NumericTicks` doesn't work here, so we feature detect.
            this.fractionDigits = ticks.fractionDigits >= 0 ? ticks.fractionDigits : 0;
            // Update properties that affect the size of the axis labels and measure the labels
            var labelBboxes = new Map();
            var labelX = sideFlag * (tick.size + label.padding);
            var labelMatrix = new Matrix();
            Matrix.updateTransformMatrix(labelMatrix, 1, 1, autoRotation, 0, 0);
            var labelData = [];
            var labelSelection = tickLineGroupSelection.selectByClass(Text).each(function (node, datum, index) {
                var tick = datum.tick, translationY = datum.translationY;
                node.fontStyle = label.fontStyle;
                node.fontWeight = label.fontWeight;
                node.fontSize = label.fontSize;
                node.fontFamily = label.fontFamily;
                node.fill = label.color;
                node.text = _this.formatTickDatum(tick, index);
                var userHidden = node.text === '' || node.text == undefined;
                var bbox = node.computeBBox();
                var width = bbox.width, height = bbox.height;
                var translatedBBox = new BBox(labelX, translationY, 0, 0);
                labelMatrix.transformBBox(translatedBBox, bbox);
                var _a = bbox.x, x = _a === void 0 ? 0 : _a, _b = bbox.y, y = _b === void 0 ? 0 : _b;
                bbox.width = width;
                bbox.height = height;
                labelBboxes.set(index, userHidden ? null : bbox);
                if (userHidden) {
                    return;
                }
                labelData.push({
                    point: {
                        x: x,
                        y: y,
                        size: 0,
                    },
                    label: {
                        width: width,
                        height: height,
                        text: '',
                    },
                });
            });
            var labelPadding = minSpacing !== null && minSpacing !== void 0 ? minSpacing : 10;
            var rotate = axisLabelsOverlap(labelData, labelPadding);
            if (label.rotation === undefined && label.autoRotate === true && rotate) {
                // When no user label rotation angle has been specified and the width of any label exceeds the average tick gap (`rotate` is `true`),
                // automatically rotate the labels
                labelAutoRotation = normalizeAngle360(toRadians(label.autoRotateAngle));
            }
            var labelTextBaseline = parallelLabels && !labelRotation ? (sideFlag * parallelFlipFlag === -1 ? 'hanging' : 'bottom') : 'middle';
            var alignFlag = (labelRotation > 0 && labelRotation <= Math.PI) || (labelAutoRotation > 0 && labelAutoRotation <= Math.PI)
                ? -1
                : 1;
            var labelTextAlign = parallelLabels
                ? labelRotation || labelAutoRotation
                    ? sideFlag * alignFlag === -1
                        ? 'end'
                        : 'start'
                    : 'center'
                : sideFlag * regularFlipFlag === -1
                    ? 'end'
                    : 'start';
            var combinedRotation = autoRotation + labelRotation + labelAutoRotation;
            if (combinedRotation) {
                Matrix.updateTransformMatrix(labelMatrix, 1, 1, combinedRotation, 0, 0);
            }
            labelData = [];
            labelSelection.each(function (label, datum, index) {
                if (label.text === '' || label.text == undefined) {
                    label.visible = false; // hide empty labels
                    return;
                }
                label.textBaseline = labelTextBaseline;
                label.textAlign = labelTextAlign;
                label.x = labelX;
                label.rotationCenterX = labelX;
                label.rotation = combinedRotation;
                // Text.computeBBox() does not take into account any of the transformations that have been applied to the label nodes, only the width and height are useful.
                // Rather than taking into account all transformations including those of parent nodes which would be the result of `computeTransformedBBox()`, giving the x and y in the entire axis coordinate space,
                // take into account only the rotation and translation applied to individual label nodes to get the x y coordinates of the labels relative to each other
                // this makes label collision detection a lot simpler
                var bbox = labelBboxes.get(index);
                if (!bbox) {
                    return;
                }
                label.visible = true;
                var _a = bbox.width, width = _a === void 0 ? 0 : _a, _b = bbox.height, height = _b === void 0 ? 0 : _b;
                var translationY = datum.translationY;
                var translatedBBox = new BBox(labelX, translationY, 0, 0);
                labelMatrix.transformBBox(translatedBBox, bbox);
                var _c = bbox.x, x = _c === void 0 ? 0 : _c, _d = bbox.y, y = _d === void 0 ? 0 : _d;
                labelData.push({
                    point: {
                        x: x,
                        y: y,
                        size: 0,
                    },
                    label: {
                        width: width,
                        height: height,
                        text: label.text,
                    },
                });
            });
            return { labelData: labelData, rotated: !!(labelRotation || labelAutoRotation) };
        };
        Axis.prototype.updateLine = function () {
            // Render axis line.
            var _a = this, lineNode = _a.lineNode, requestedRange = _a.requestedRange;
            lineNode.x1 = 0;
            lineNode.x2 = 0;
            lineNode.y1 = requestedRange[0];
            lineNode.y2 = requestedRange[1];
            lineNode.strokeWidth = this.line.width;
            lineNode.stroke = this.line.color;
            lineNode.visible = true;
        };
        Axis.prototype.updateTitle = function (_a) {
            var ticks = _a.ticks;
            var _b = this, label = _b.label, rotation = _b.rotation, title = _b.title, lineNode = _b.lineNode, requestedRange = _b.requestedRange, tickGroup = _b.tickGroup, lineGroup = _b.lineGroup;
            if (!title) {
                return;
            }
            var titleVisible = false;
            if (title.enabled && lineNode.visible) {
                titleVisible = true;
                var sideFlag = label.mirrored ? 1 : -1;
                var parallelFlipRotation = normalizeAngle360(rotation);
                var padding = Caption.PADDING;
                var titleNode = title.node;
                var titleRotationFlag = sideFlag === -1 && parallelFlipRotation > Math.PI && parallelFlipRotation < Math.PI * 2 ? -1 : 1;
                titleNode.rotation = (titleRotationFlag * sideFlag * Math.PI) / 2;
                titleNode.x = Math.floor((titleRotationFlag * sideFlag * (requestedRange[0] + requestedRange[1])) / 2);
                var lineBBox = lineGroup.computeBBox();
                var bboxYDimension = rotation === 0 ? lineBBox.width : lineBBox.height;
                if ((ticks === null || ticks === void 0 ? void 0 : ticks.length) > 0) {
                    var tickBBox = tickGroup.computeBBox();
                    var tickWidth = rotation === 0 ? tickBBox.width : tickBBox.height;
                    if (Math.abs(tickWidth) < Infinity) {
                        bboxYDimension += tickWidth;
                    }
                }
                if (sideFlag === -1) {
                    titleNode.y = Math.floor(titleRotationFlag * (-padding - bboxYDimension));
                }
                else {
                    titleNode.y = Math.floor(-padding - bboxYDimension);
                }
                titleNode.textBaseline = titleRotationFlag === 1 ? 'bottom' : 'top';
            }
            title.node.visible = titleVisible;
        };
        // For formatting (nice rounded) tick values.
        Axis.prototype.formatTickDatum = function (datum, index) {
            var _a = this, label = _a.label, labelFormatter = _a.labelFormatter, fractionDigits = _a.fractionDigits;
            return label.formatter
                ? label.formatter({
                    value: fractionDigits >= 0 ? datum : String(datum),
                    index: index,
                    fractionDigits: fractionDigits,
                    formatter: labelFormatter,
                })
                : labelFormatter
                    ? labelFormatter(datum)
                    : typeof datum === 'number' && fractionDigits >= 0
                        ? // the `datum` is a floating point number
                            datum.toFixed(fractionDigits)
                        : // the`datum` is an integer, a string or an object
                            String(datum);
        };
        // For formatting arbitrary values between the ticks.
        Axis.prototype.formatDatum = function (datum) {
            return String(datum);
        };
        Axis.prototype.computeBBox = function () {
            return this.axisGroup.computeBBox();
        };
        Axis.prototype.initCrossLine = function (crossLine) {
            crossLine.scale = this.scale;
            crossLine.gridLength = this.gridLength;
        };
        Axis.prototype.isAnySeriesActive = function () {
            return false;
        };
        __decorate$x([
            Validate(BOOLEAN)
        ], Axis.prototype, "nice", void 0);
        __decorate$x([
            Validate(GRID_STYLE)
        ], Axis.prototype, "gridStyle", void 0);
        __decorate$x([
            Validate(NUMBER(0))
        ], Axis.prototype, "thickness", void 0);
        return Axis;
    }());

    function formatDefault(x, p) {
        var xs = x.toPrecision(p);
        var i0 = -1;
        var i1 = 0;
        var exit = false;
        for (var n = xs.length, i = 1; !exit && i < n; ++i) {
            switch (xs[i]) {
                case '.':
                    i0 = i1 = i;
                    break;
                case '0':
                    if (i0 === 0)
                        i0 = i;
                    i1 = i;
                    break;
                case 'e':
                    exit = true;
                    break;
                default:
                    if (i0 > 0)
                        i0 = 0;
                    break;
            }
        }
        return i0 > 0 ? xs.slice(0, i0) + xs.slice(i1 + 1) : xs;
    }
    var formatTypes = {
        '': formatDefault,
        // Multiply by 100, and then decimal notation with a percent sign.
        '%': function (x, p) { return (x * 100).toFixed(p); },
        // Binary notation, rounded to integer.
        b: function (x) { return Math.round(x).toString(2); },
        // Converts the integer to the corresponding unicode character before printing.
        c: function (x) { return String(x); },
        // Decimal notation, rounded to integer.
        d: formatDecimal,
        // Exponent notation.
        e: function (x, p) { return x.toExponential(p); },
        // Fixed point notation.
        f: function (x, p) { return x.toFixed(p); },
        // Either decimal or exponent notation, rounded to significant digits.
        g: function (x, p) { return x.toPrecision(p); },
        // Octal notation, rounded to integer.
        o: function (x) { return Math.round(x).toString(8); },
        // Multiply by 100, round to significant digits, and then decimal notation with a percent sign.
        p: function (x, p) { return formatRounded(x * 100, p); },
        // Decimal notation, rounded to significant digits.
        r: formatRounded,
        // Decimal notation with a SI prefix, rounded to significant digits.
        s: formatPrefixAuto,
        // Hexadecimal notation, using upper-case letters, rounded to integer.
        X: function (x) { return Math.round(x).toString(16).toUpperCase(); },
        // Hexadecimal notation, using lower-case letters, rounded to integer.
        x: function (x) { return Math.round(x).toString(16); },
    };
    var prefixes = ['y', 'z', 'a', 'f', 'p', 'n', '\xB5', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
    /**
     * [[fill]align][sign][#][0][width][grouping_option][.precision][type]
     */
    var FormatSpecifier = /** @class */ (function () {
        function FormatSpecifier(specifier) {
            if (specifier instanceof FormatSpecifier) {
                this.fill = specifier.fill;
                this.align = specifier.align;
                this.sign = specifier.sign;
                this.symbol = specifier.symbol;
                this.zero = specifier.zero;
                this.width = specifier.width;
                this.comma = specifier.comma;
                this.precision = specifier.precision;
                this.trim = specifier.trim;
                this.type = specifier.type;
                this.string = specifier.string;
            }
            else {
                this.fill = specifier.fill === undefined ? ' ' : String(specifier.fill);
                this.align = specifier.align === undefined ? '>' : String(specifier.align);
                this.sign = specifier.sign === undefined ? '-' : String(specifier.sign);
                this.symbol = specifier.symbol === undefined ? '' : String(specifier.symbol);
                this.zero = !!specifier.zero;
                this.width = specifier.width === undefined ? undefined : +specifier.width;
                this.comma = !!specifier.comma;
                this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
                this.trim = !!specifier.trim;
                this.type = specifier.type === undefined ? '' : String(specifier.type);
                this.string = specifier.string;
            }
        }
        return FormatSpecifier;
    }());
    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var formatRegEx = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    var interpolateRegEx = /(#\{(.*?)\})/g;
    function makeFormatSpecifier(specifier) {
        if (specifier instanceof FormatSpecifier) {
            return new FormatSpecifier(specifier);
        }
        var found = false;
        var string = specifier.replace(interpolateRegEx, function () {
            if (!found) {
                specifier = arguments[2];
                found = true;
            }
            return '#{}';
        });
        var match = formatRegEx.exec(specifier);
        if (!match) {
            throw new Error("Invalid format: " + specifier);
        }
        return new FormatSpecifier({
            fill: match[1],
            align: match[2],
            sign: match[3],
            symbol: match[4],
            zero: match[5],
            width: match[6],
            comma: match[7],
            precision: match[8] && match[8].slice(1),
            trim: match[9],
            type: match[10],
            string: found ? string : undefined,
        });
    }
    function tickFormat(start, stop, count, specifier) {
        var step = tickStep(start, stop, count);
        var formatSpecifier = makeFormatSpecifier(specifier == undefined ? ',f' : specifier);
        var precision;
        switch (formatSpecifier.type) {
            case 's': {
                var value = Math.max(Math.abs(start), Math.abs(stop));
                if (formatSpecifier.precision == null) {
                    precision = precisionPrefix(step, value);
                    if (!isNaN(precision)) {
                        formatSpecifier.precision = precision;
                    }
                }
                return formatPrefix(formatSpecifier, value);
            }
            case '':
            case 'e':
            case 'g':
            case 'p':
            case 'r': {
                if (formatSpecifier.precision == null) {
                    precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)));
                    if (!isNaN(precision)) {
                        formatSpecifier.precision = precision - +(formatSpecifier.type === 'e');
                    }
                }
                break;
            }
            case 'f':
            case '%': {
                if (formatSpecifier.precision == null) {
                    precision = precisionFixed(step);
                    if (!isNaN(precision)) {
                        formatSpecifier.precision = precision - +(formatSpecifier.type === '%') * 2;
                    }
                }
                break;
            }
        }
        return format(formatSpecifier);
    }
    var prefixExponent;
    function formatPrefixAuto(x, p) {
        if (p === void 0) { p = 0; }
        var d = formatDecimalParts(x, p);
        if (!d) {
            return String(x);
        }
        var coefficient = d[0];
        var exponent = d[1];
        prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3;
        var i = exponent - prefixExponent + 1;
        var n = coefficient.length;
        if (i === n) {
            return coefficient;
        }
        else if (i > n) {
            return coefficient + new Array(i - n + 1).join('0');
        }
        else if (i > 0) {
            return coefficient.slice(0, i) + '.' + coefficient.slice(i);
        }
        else {
            var parts = formatDecimalParts(x, Math.max(0, p + i - 1));
            return '0.' + new Array(1 - i).join('0') + parts[0]; // less than 1y!
        }
    }
    function formatDecimal(x) {
        x = Math.round(x);
        return Math.abs(x) >= 1e21 ? x.toLocaleString('en').replace(/,/g, '') : x.toString(10);
    }
    function formatGroup(grouping, thousands) {
        return function (value, width) {
            var t = [];
            var i = value.length;
            var j = 0;
            var g = grouping[0];
            var length = 0;
            while (i > 0 && g > 0) {
                if (length + g + 1 > width) {
                    g = Math.max(1, width - length);
                }
                i -= g;
                t.push(value.substring(i, i + g));
                if ((length += g + 1) > width) {
                    break;
                }
                j = (j + 1) % grouping.length;
                g = grouping[j];
            }
            t.reverse();
            return t.join(thousands);
        };
    }
    function formatNumerals(numerals) {
        return function (value) { return value.replace(/\d/g, function (i) { return numerals[+i]; }); };
    }
    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
        var i0 = -1, i1 = 0;
        var exit = false;
        for (var n = s.length, i = 1; !exit && i < n; ++i) {
            switch (s[i]) {
                case '.':
                    i0 = i1 = i;
                    break;
                case '0':
                    if (i0 === 0)
                        i0 = i;
                    i1 = i;
                    break;
                default:
                    if (!+s[i]) {
                        exit = true;
                        break;
                    }
                    if (i0 > 0)
                        i0 = 0;
                    break;
            }
        }
        return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }
    function formatRounded(x, p) {
        var d = formatDecimalParts(x, p);
        if (!d) {
            return String(x);
        }
        var coefficient = d[0];
        var exponent = d[1];
        if (exponent < 0) {
            return '0.' + new Array(-exponent).join('0') + coefficient;
        }
        else {
            if (coefficient.length > exponent + 1) {
                return coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1);
            }
            else {
                return coefficient + new Array(exponent - coefficient.length + 2).join('0');
            }
        }
    }
    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ['123', 0].
    function formatDecimalParts(x, p) {
        var sx = p ? x.toExponential(p - 1) : x.toExponential();
        var i = sx.indexOf('e');
        if (i < 0) {
            // NaN, ±Infinity
            return undefined;
        }
        var coefficient = sx.slice(0, i);
        // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
        // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
        return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +sx.slice(i + 1)];
    }
    function identity$2(x) {
        return x;
    }
    var formatDefaultLocale;
    var format;
    var formatPrefix;
    defaultLocale({
        thousands: ',',
        grouping: [3],
        currency: ['$', ''],
    });
    function defaultLocale(definition) {
        formatDefaultLocale = formatLocale(definition);
        format = formatDefaultLocale.format;
        formatPrefix = formatDefaultLocale.formatPrefix;
    }
    function exponent(x) {
        var parts = formatDecimalParts(Math.abs(x));
        if (parts) {
            return parts[1];
        }
        return NaN;
    }
    function precisionFixed(step) {
        return Math.max(0, -exponent(Math.abs(step)));
    }
    function precisionPrefix(step, value) {
        var x = Math.floor(exponent(value) / 3);
        x = Math.min(8, x);
        x = Math.max(-8, x);
        return Math.max(0, x * 3 - exponent(Math.abs(step)));
    }
    function precisionRound(step, max) {
        step = Math.abs(step);
        max = Math.abs(max) - step;
        return Math.max(0, exponent(max) - exponent(step)) + 1;
    }
    function formatLocale(locale) {
        var group = locale.grouping === undefined || locale.thousands === undefined
            ? identity$2
            : formatGroup(locale.grouping.map(Number), String(locale.thousands));
        var currencyPrefix = locale.currency === undefined ? '' : String(locale.currency[0]);
        var currencySuffix = locale.currency === undefined ? '' : String(locale.currency[1]);
        var decimal = locale.decimal === undefined ? '.' : String(locale.decimal);
        var numerals = locale.numerals === undefined ? identity$2 : formatNumerals(locale.numerals.map(String));
        var percent = locale.percent === undefined ? '%' : String(locale.percent);
        var minus = locale.minus === undefined ? '\u2212' : String(locale.minus);
        var nan = locale.nan === undefined ? 'NaN' : String(locale.nan);
        function newFormat(specifier) {
            var formatSpecifier = makeFormatSpecifier(specifier);
            var fill = formatSpecifier.fill;
            var align = formatSpecifier.align;
            var sign = formatSpecifier.sign;
            var symbol = formatSpecifier.symbol;
            var zero = formatSpecifier.zero;
            var width = formatSpecifier.width;
            var comma = formatSpecifier.comma;
            var precision = formatSpecifier.precision;
            var trim = formatSpecifier.trim;
            var type = formatSpecifier.type;
            // The 'n' type is an alias for ',g'.
            if (type === 'n') {
                comma = true;
                type = 'g';
            }
            else if (!formatTypes[type]) {
                // The '' type, and any invalid type, is an alias for '.12~g'.
                if (precision === undefined) {
                    precision = 12;
                }
                trim = true;
                type = 'g';
            }
            // If zero fill is specified, padding goes after sign and before digits.
            if (zero || (fill === '0' && align === '=')) {
                zero = true;
                fill = '0';
                align = '=';
            }
            // Compute the prefix and suffix.
            // For SI-prefix, the suffix is lazily computed.
            var prefix = symbol === '$' ? currencyPrefix : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '';
            var suffix = symbol === '$' ? currencySuffix : /[%p]/.test(type) ? percent : '';
            // What format function should we use?
            // Is this an integer type?
            // Can this type generate exponential notation?
            var formatType = formatTypes[type];
            var maybeSuffix = /[defgprs%]/.test(type);
            // Set the default precision if not specified,
            // or clamp the specified precision to the supported range.
            // For significant precision, it must be in [1, 21].
            // For fixed precision, it must be in [0, 20].
            if (precision === undefined) {
                precision = 6;
            }
            else if (/[gprs]/.test(type)) {
                precision = Math.max(1, Math.min(21, precision));
            }
            else {
                precision = Math.max(0, Math.min(20, precision));
            }
            function format(x) {
                var valuePrefix = prefix;
                var valueSuffix = suffix;
                var value;
                if (type === 'c') {
                    valueSuffix = formatType(+x) + valueSuffix;
                    value = '';
                }
                else {
                    var nx = +x;
                    // Determine the sign. -0 is not less than 0, but 1 / -0 is!
                    var valueNegative = x < 0 || 1 / nx < 0;
                    // Perform the initial formatting.
                    value = isNaN(nx) ? nan : formatType(Math.abs(nx), precision);
                    // Trim insignificant zeros.
                    if (trim) {
                        value = formatTrim(value);
                    }
                    // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
                    if (valueNegative && +value === 0 && sign !== '+') {
                        valueNegative = false;
                    }
                    // Compute the prefix and suffix.
                    var signPrefix = valueNegative
                        ? sign === '('
                            ? sign
                            : minus
                        : sign === '-' || sign === '('
                            ? ''
                            : sign;
                    var signSuffix = valueNegative && sign === '(' ? ')' : '';
                    valuePrefix = signPrefix + valuePrefix;
                    valueSuffix = (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + valueSuffix + signSuffix;
                    // Break the formatted value into the integer “value” part that can be
                    // grouped, and fractional or exponential “suffix” part that is not.
                    if (maybeSuffix) {
                        for (var i = 0, n = value.length; i < n; i++) {
                            var c = value.charCodeAt(i);
                            if (48 > c || c > 57) {
                                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                                value = value.slice(0, i);
                                break;
                            }
                        }
                    }
                }
                // If the fill character is not '0', grouping is applied before padding.
                if (comma && !zero)
                    value = group(value, Infinity);
                // Compute the padding.
                var length = valuePrefix.length + value.length + valueSuffix.length;
                var padding = length < width ? new Array(width - length + 1).join(fill) : '';
                // If the fill character is '0', grouping is applied after padding.
                if (comma && zero) {
                    value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity);
                    padding = '';
                }
                // Reconstruct the final output based on the desired alignment.
                switch (align) {
                    case '<':
                        value = valuePrefix + value + valueSuffix + padding;
                        break;
                    case '=':
                        value = valuePrefix + padding + value + valueSuffix;
                        break;
                    case '^':
                        value =
                            padding.slice(0, (length = padding.length >> 1)) +
                                valuePrefix +
                                value +
                                valueSuffix +
                                padding.slice(length);
                        break;
                    default:
                        value = padding + valuePrefix + value + valueSuffix;
                        break;
                }
                var string = formatSpecifier.string;
                if (string) {
                    return string.replace(interpolateRegEx, function () { return numerals(value); });
                }
                return numerals(value);
            }
            return format;
        }
        function formatPrefix(specifier, value) {
            var formatSpecifier = makeFormatSpecifier(specifier);
            formatSpecifier.type = 'f';
            var f = newFormat(formatSpecifier);
            var e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3;
            var k = Math.pow(10, -e);
            var prefix = prefixes[8 + e / 3];
            return function (value) {
                return f(k * +value) + prefix;
            };
        }
        return {
            format: newFormat,
            formatPrefix: formatPrefix,
        };
    }

    var __extends$Q = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __read$p = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    /**
     * Maps continuous domain to a continuous range.
     */
    var LinearScale = /** @class */ (function (_super) {
        __extends$Q(LinearScale, _super);
        function LinearScale() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = 'linear';
            return _this;
        }
        LinearScale.prototype.ticks = function () {
            var _a;
            var count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : 10;
            if (!this.domain || this.domain.length < 2 || count < 1) {
                return [];
            }
            this.refresh();
            var _b = __read$p(this.getDomain(), 2), d0 = _b[0], d1 = _b[1];
            return generateTicks(d0, d1, count);
        };
        LinearScale.prototype.update = function () {
            if (!this.domain || this.domain.length < 2) {
                return;
            }
            if (this.nice) {
                this.updateNiceDomain();
            }
        };
        /**
         * Extends the domain so that it starts and ends on nice round values.
         * @param count Tick count.
         */
        LinearScale.prototype.updateNiceDomain = function () {
            var _a;
            var count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : 10;
            var _b = __read$p(this.domain, 2), start = _b[0], stop = _b[1];
            if (count < 1) {
                this.niceDomain = [start, stop];
                return;
            }
            for (var i = 0; i < 2; i++) {
                var step = tickStep(start, stop, count);
                if (step >= 1) {
                    start = Math.floor(start / step) * step;
                    stop = Math.ceil(stop / step) * step;
                }
                else {
                    // Prevent floating point error
                    var s = 1 / step;
                    start = Math.floor(start * s) / s;
                    stop = Math.ceil(stop * s) / s;
                }
            }
            this.niceDomain = [start, stop];
        };
        LinearScale.prototype.tickFormat = function (_a) {
            var count = _a.count, specifier = _a.specifier;
            var _b = __read$p(this.getDomain(), 2), d0 = _b[0], d1 = _b[1];
            return tickFormat(d0, d1, count !== null && count !== void 0 ? count : 10, specifier);
        };
        return LinearScale;
    }(ContinuousScale));

    var __extends$P = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$w = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$o = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$f = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$o(arguments[i]));
        return ar;
    };
    var ChartAxisDirection;
    (function (ChartAxisDirection) {
        ChartAxisDirection["X"] = "x";
        ChartAxisDirection["Y"] = "y";
    })(ChartAxisDirection || (ChartAxisDirection = {}));
    function flipChartAxisDirection(direction) {
        if (direction === ChartAxisDirection.X) {
            return ChartAxisDirection.Y;
        }
        else {
            return ChartAxisDirection.X;
        }
    }
    var ChartAxis = /** @class */ (function (_super) {
        __extends$P(ChartAxis, _super);
        function ChartAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.keys = [];
            _this.direction = ChartAxisDirection.Y;
            _this.boundSeries = [];
            _this.includeInvisibleDomains = false;
            _this._position = 'left';
            return _this;
        }
        Object.defineProperty(ChartAxis.prototype, "type", {
            get: function () {
                return this.constructor.type || '';
            },
            enumerable: false,
            configurable: true
        });
        ChartAxis.prototype.useCalculatedTickCount = function () {
            // We only want to use the new algorithm for number axes. Category axes don't use a
            // calculated or user-supplied tick-count, and time axes need special handling depending on
            // the time-range involved.
            return this.scale instanceof LinearScale;
        };
        Object.defineProperty(ChartAxis.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (value) {
                if (this._position !== value) {
                    this._position = value;
                    switch (value) {
                        case 'top':
                            this.direction = ChartAxisDirection.X;
                            this.rotation = -90;
                            this.label.mirrored = true;
                            this.label.parallel = true;
                            break;
                        case 'right':
                            this.direction = ChartAxisDirection.Y;
                            this.rotation = 0;
                            this.label.mirrored = true;
                            this.label.parallel = false;
                            break;
                        case 'bottom':
                            this.direction = ChartAxisDirection.X;
                            this.rotation = -90;
                            this.label.mirrored = false;
                            this.label.parallel = true;
                            break;
                        case 'left':
                            this.direction = ChartAxisDirection.Y;
                            this.rotation = 0;
                            this.label.mirrored = false;
                            this.label.parallel = false;
                            break;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        ChartAxis.prototype.calculateDomain = function () {
            var _a;
            var _b = this, direction = _b.direction, boundSeries = _b.boundSeries, includeInvisibleDomains = _b.includeInvisibleDomains;
            if (this.linkedTo) {
                this.dataDomain = this.linkedTo.dataDomain;
            }
            else {
                var domains_1 = [];
                boundSeries
                    .filter(function (s) { return includeInvisibleDomains || s.isEnabled(); })
                    .forEach(function (series) {
                    domains_1.push(series.getDomain(direction));
                });
                var domain = (_a = new Array()).concat.apply(_a, __spread$f(domains_1));
                this.dataDomain = this.normaliseDataDomain(domain);
            }
        };
        ChartAxis.prototype.normaliseDataDomain = function (d) {
            return d;
        };
        ChartAxis.prototype.isAnySeriesActive = function () {
            var _this = this;
            return this.boundSeries.some(function (s) { return _this.includeInvisibleDomains || s.isEnabled(); });
        };
        __decorate$w([
            Validate(STRING_ARRAY)
        ], ChartAxis.prototype, "keys", void 0);
        __decorate$w([
            Validate(POSITION)
        ], ChartAxis.prototype, "_position", void 0);
        return ChartAxis;
    }(Axis));

    var isString = function (v) { return typeof v === 'string'; };
    var isStringObject = function (v) { return !!v && v.hasOwnProperty('toString') && isString(v.toString()); };
    var isDate = function (v) { return v instanceof Date && !isNaN(+v); };
    function isDiscrete(value) {
        if (isString(value)) {
            return true;
        }
        else if (isStringObject(value)) {
            return true;
        }
        return false;
    }
    function isContinuous(value) {
        var isNumberObject = function (v) { return !!v && v.hasOwnProperty('valueOf') && isNumber(v.valueOf()); };
        var isDate = function (v) { return v instanceof Date && !isNaN(+v); };
        if (isNumber(value)) {
            return true;
        }
        else if (isNumberObject(value)) {
            return true;
        }
        else if (isDate(value)) {
            return true;
        }
        return false;
    }
    function checkDatum(value, isContinuousScale) {
        if (isContinuousScale && isContinuous(value)) {
            return value;
        }
        else if (!isContinuousScale) {
            if (!isDiscrete(value)) {
                return String(value);
            }
            return value;
        }
        return undefined;
    }
    var isNumber = function (v) { return typeof v === 'number' && Number.isFinite(v); };

    var __values$h = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    // Custom `Array.find` implementation for legacy browsers.
    function find(arr, predicate) {
        for (var i = 0; i < arr.length; i++) {
            var value = arr[i];
            if (predicate(value, i, arr)) {
                return value;
            }
        }
    }
    function identity$1(value) {
        return value;
    }
    function extent(values, predicate, map) {
        var transform = map || identity$1;
        var n = values.length;
        var i = -1;
        var value;
        var min;
        var max;
        while (++i < n) {
            // Find the first value.
            value = values[i];
            if (predicate(value)) {
                min = max = value;
                while (++i < n) {
                    // Compare the remaining values.
                    value = values[i];
                    if (predicate(value)) {
                        if (min > value) {
                            min = value;
                        }
                        if (max < value) {
                            max = value;
                        }
                    }
                }
            }
        }
        return min === undefined || max === undefined ? undefined : [transform(min), transform(max)];
    }
    /**
     * finds the min and max using a process appropriate for stacked values. Ie,
     * summing up the positive and negative numbers, and returning the totals of each
     */
    function findMinMax(values) {
        var e_1, _a;
        var min = undefined;
        var max = undefined;
        try {
            for (var values_1 = __values$h(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var value = values_1_1.value;
                if (value < 0) {
                    min = (min !== null && min !== void 0 ? min : 0) + value;
                }
                else if (value >= 0) {
                    max = (max !== null && max !== void 0 ? max : 0) + value;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { min: min, max: max };
    }

    var __extends$O = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$v = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TimeAxis = /** @class */ (function (_super) {
        __extends$O(TimeAxis, _super);
        function TimeAxis() {
            var _this = _super.call(this, new TimeScale()) || this;
            _this.datumFormat = '%m/%d/%y, %H:%M:%S';
            _this.min = undefined;
            _this.max = undefined;
            var scale = _this.scale;
            scale.strictClampByDefault = true;
            _this.refreshScale();
            _this.datumFormatter = scale.tickFormat({
                specifier: _this.datumFormat,
            });
            return _this;
        }
        TimeAxis.prototype.normaliseDataDomain = function (d) {
            var _a = this, min = _a.min, max = _a.max;
            if (typeof min === 'number') {
                min = new Date(min);
            }
            if (typeof max === 'number') {
                max = new Date(max);
            }
            if (d.length > 2) {
                d = (extent(d, isContinuous, Number) || [0, 1000]).map(function (x) { return new Date(x); });
            }
            if (min instanceof Date) {
                d = [min, d[1]];
            }
            if (max instanceof Date) {
                d = [d[0], max];
            }
            if (d[0] > d[1]) {
                d = [];
            }
            return d;
        };
        TimeAxis.prototype.onLabelFormatChange = function (ticks, format) {
            if (format) {
                _super.prototype.onLabelFormatChange.call(this, ticks, format);
            }
            else {
                // For time axis labels to look nice, even if date format wasn't set.
                this.labelFormatter = this.scale.tickFormat({ ticks: ticks });
            }
        };
        TimeAxis.prototype.formatDatum = function (datum) {
            return this.datumFormatter(datum);
        };
        TimeAxis.className = 'TimeAxis';
        TimeAxis.type = 'time';
        __decorate$v([
            Validate(AND(OPT_DATE_OR_DATETIME_MS, LESS_THAN('max')))
        ], TimeAxis.prototype, "min", void 0);
        __decorate$v([
            Validate(AND(OPT_DATE_OR_DATETIME_MS, GREATER_THAN('min')))
        ], TimeAxis.prototype, "max", void 0);
        return TimeAxis;
    }(ChartAxis));

    function createDeprecationWarning() {
        var logged = false;
        return function (key, message) {
            if (logged) {
                return;
            }
            var msg = ["AG Charts - Property [" + key + "] is deprecated.", message].filter(function (v) { return v != null; }).join(' ');
            console.warn(msg);
            logged = true;
        };
    }
    function DeprecatedAndRenamedTo(newPropName) {
        var warnDeprecated = createDeprecationWarning();
        return function (target, key) {
            // `target` is either a constructor (static member) or prototype (instance member)
            if (target.hasOwnProperty(key)) {
                return;
            }
            var warnRenamed = function () { return warnDeprecated(key, "Use [" + newPropName + "] instead."); };
            Object.defineProperty(target, key, {
                get: function () {
                    warnRenamed();
                    return this[newPropName];
                },
                set: function (value) {
                    if (value !== this[newPropName]) {
                        warnRenamed();
                        this[newPropName] = value;
                    }
                },
                enumerable: true,
                configurable: false,
            });
        };
    }

    var __extends$N = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$u = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$n = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$e = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$n(arguments[i]));
        return ar;
    };
    var __values$g = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    /** Modes of matching user interactions to rendered nodes (e.g. hover or click) */
    var SeriesNodePickMode;
    (function (SeriesNodePickMode) {
        /** Pick matches based upon pick coordinates being inside a matching shape/marker. */
        SeriesNodePickMode[SeriesNodePickMode["EXACT_SHAPE_MATCH"] = 0] = "EXACT_SHAPE_MATCH";
        /** Pick matches by nearest category/X-axis value, then distance within that category/X-value. */
        SeriesNodePickMode[SeriesNodePickMode["NEAREST_BY_MAIN_AXIS_FIRST"] = 1] = "NEAREST_BY_MAIN_AXIS_FIRST";
        /** Pick matches by nearest category value, then distance within that category. */
        SeriesNodePickMode[SeriesNodePickMode["NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST"] = 2] = "NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST";
        /** Pick matches based upon distance to ideal position */
        SeriesNodePickMode[SeriesNodePickMode["NEAREST_NODE"] = 3] = "NEAREST_NODE";
    })(SeriesNodePickMode || (SeriesNodePickMode = {}));
    var warnDeprecated = createDeprecationWarning();
    var warnSeriesDeprecated = function () { return warnDeprecated('series', 'Use seriesId to get the series ID'); };
    var SeriesNodeClickEvent = /** @class */ (function () {
        function SeriesNodeClickEvent(nativeEvent, datum, series) {
            this.type = 'nodeClick';
            this.event = nativeEvent;
            this.datum = datum.datum;
            this.seriesId = series.id;
            this._series = series;
        }
        Object.defineProperty(SeriesNodeClickEvent.prototype, "series", {
            /** @deprecated */
            get: function () {
                warnSeriesDeprecated();
                return this._series;
            },
            enumerable: false,
            configurable: true
        });
        return SeriesNodeClickEvent;
    }());
    var SeriesItemHighlightStyle = /** @class */ (function () {
        function SeriesItemHighlightStyle() {
            this.fill = 'yellow';
            this.fillOpacity = undefined;
            this.stroke = undefined;
            this.strokeWidth = undefined;
        }
        __decorate$u([
            Validate(OPT_COLOR_STRING)
        ], SeriesItemHighlightStyle.prototype, "fill", void 0);
        __decorate$u([
            Validate(OPT_NUMBER(0, 1))
        ], SeriesItemHighlightStyle.prototype, "fillOpacity", void 0);
        __decorate$u([
            Validate(OPT_COLOR_STRING)
        ], SeriesItemHighlightStyle.prototype, "stroke", void 0);
        __decorate$u([
            Validate(OPT_NUMBER(0))
        ], SeriesItemHighlightStyle.prototype, "strokeWidth", void 0);
        return SeriesItemHighlightStyle;
    }());
    var SeriesHighlightStyle = /** @class */ (function () {
        function SeriesHighlightStyle() {
            this.strokeWidth = undefined;
            this.dimOpacity = undefined;
            this.enabled = undefined;
        }
        __decorate$u([
            Validate(OPT_NUMBER(0))
        ], SeriesHighlightStyle.prototype, "strokeWidth", void 0);
        __decorate$u([
            Validate(OPT_NUMBER(0, 1))
        ], SeriesHighlightStyle.prototype, "dimOpacity", void 0);
        __decorate$u([
            Validate(OPT_BOOLEAN)
        ], SeriesHighlightStyle.prototype, "enabled", void 0);
        return SeriesHighlightStyle;
    }());
    var TextHighlightStyle = /** @class */ (function () {
        function TextHighlightStyle() {
            this.color = 'black';
        }
        __decorate$u([
            Validate(OPT_COLOR_STRING)
        ], TextHighlightStyle.prototype, "color", void 0);
        return TextHighlightStyle;
    }());
    var HighlightStyle = /** @class */ (function () {
        function HighlightStyle() {
            this.item = new SeriesItemHighlightStyle();
            this.series = new SeriesHighlightStyle();
            this.text = new TextHighlightStyle();
        }
        return HighlightStyle;
    }());
    var SeriesTooltip = /** @class */ (function () {
        function SeriesTooltip() {
            this.enabled = true;
        }
        __decorate$u([
            Validate(BOOLEAN)
        ], SeriesTooltip.prototype, "enabled", void 0);
        return SeriesTooltip;
    }());
    var Series = /** @class */ (function (_super) {
        __extends$N(Series, _super);
        function Series(_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.useSeriesGroupLayer, useSeriesGroupLayer = _c === void 0 ? true : _c, _d = _b.useLabelLayer, useLabelLayer = _d === void 0 ? false : _d, _e = _b.pickModes, pickModes = _e === void 0 ? [SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST] : _e;
            var _this = _super.call(this) || this;
            _this.id = createId(_this);
            // The group node that contains all the nodes used to render this series.
            _this.rootGroup = new Group({ name: 'seriesRoot' });
            _this.directions = [ChartAxisDirection.X, ChartAxisDirection.Y];
            _this.directionKeys = {};
            // Flag to determine if we should recalculate node data.
            _this.nodeDataRefresh = true;
            _this._data = undefined;
            _this._visible = true;
            _this.showInLegend = true;
            _this.cursor = 'default';
            _this.highlightStyle = new HighlightStyle();
            var rootGroup = _this.rootGroup;
            _this.contentGroup = rootGroup.appendChild(new Group({
                name: _this.id + "-content",
                layer: useSeriesGroupLayer,
                zIndex: Layers.SERIES_LAYER_ZINDEX,
            }));
            _this.highlightGroup = rootGroup.appendChild(new Group({
                name: _this.id + "-highlight",
                layer: true,
                zIndex: Layers.SERIES_LAYER_ZINDEX,
                zIndexSubOrder: [_this.id, 15000],
            }));
            _this.highlightNode = _this.highlightGroup.appendChild(new Group({ name: 'highlightNode' }));
            _this.highlightLabel = _this.highlightGroup.appendChild(new Group({ name: 'highlightLabel' }));
            _this.highlightNode.zIndex = 0;
            _this.highlightLabel.zIndex = 10;
            _this.pickModes = pickModes;
            if (useLabelLayer) {
                _this.labelGroup = rootGroup.appendChild(new Group({
                    name: _this.id + "-series-labels",
                    layer: true,
                    zIndex: Layers.SERIES_LABEL_ZINDEX,
                }));
            }
            return _this;
        }
        Object.defineProperty(Series.prototype, "type", {
            get: function () {
                return this.constructor.type || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Series.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (input) {
                this._data = input;
                this.nodeDataRefresh = true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Series.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.visibleChanged();
            },
            enumerable: false,
            configurable: true
        });
        Series.prototype.destroy = function () {
            // Override point for sub-classes.
        };
        Object.defineProperty(Series.prototype, "grouped", {
            set: function (g) {
                if (g === true) {
                    throw new Error("AG Charts - grouped: true is unsupported for series of type: " + this.type);
                }
            },
            enumerable: false,
            configurable: true
        });
        // Returns the actual keys used (to fetch the values from `data` items) for the given direction.
        Series.prototype.getKeys = function (direction) {
            var _this = this;
            var directionKeys = this.directionKeys;
            var keys = directionKeys && directionKeys[direction];
            var values = [];
            if (keys) {
                keys.forEach(function (key) {
                    var value = _this[key];
                    if (value) {
                        if (Array.isArray(value)) {
                            values.push.apply(values, __spread$e(value));
                        }
                        else {
                            values.push(value);
                        }
                    }
                });
            }
            return values;
        };
        // Indicate that something external changed and we should recalculate nodeData.
        Series.prototype.markNodeDataDirty = function () {
            this.nodeDataRefresh = true;
        };
        Series.prototype.visibleChanged = function () {
            // Override point for this.visible change post-processing.
        };
        Series.prototype.getOpacity = function (datum) {
            var _a = this.highlightStyle.series, _b = _a.dimOpacity, dimOpacity = _b === void 0 ? 1 : _b, _c = _a.enabled, enabled = _c === void 0 ? true : _c;
            var defaultOpacity = 1;
            if (enabled === false || dimOpacity === defaultOpacity) {
                return defaultOpacity;
            }
            switch (this.isItemIdHighlighted(datum)) {
                case 'no-highlight':
                case 'highlighted':
                    return defaultOpacity;
                case 'peer-highlighted':
                case 'other-highlighted':
                    return dimOpacity;
            }
        };
        Series.prototype.getStrokeWidth = function (defaultStrokeWidth, datum) {
            var _a = this.highlightStyle.series, strokeWidth = _a.strokeWidth, _b = _a.enabled, enabled = _b === void 0 ? true : _b;
            if (enabled === false || strokeWidth === undefined) {
                // No change in styling for highlight cases.
                return defaultStrokeWidth;
            }
            switch (this.isItemIdHighlighted(datum)) {
                case 'highlighted':
                    return strokeWidth;
                case 'no-highlight':
                case 'other-highlighted':
                case 'peer-highlighted':
                    return defaultStrokeWidth;
            }
        };
        Series.prototype.isItemIdHighlighted = function (datum) {
            var _a;
            var highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();
            var _b = highlightedDatum !== null && highlightedDatum !== void 0 ? highlightedDatum : {}, series = _b.series, itemId = _b.itemId;
            var highlighting = series != null;
            if (!highlighting) {
                // Highlighting not active.
                return 'no-highlight';
            }
            if (series !== this) {
                // Highlighting active, this series not highlighted.
                return 'other-highlighted';
            }
            if (itemId === undefined) {
                // Series doesn't use itemIds - so no further refinement needed, series is highlighted.
                return 'highlighted';
            }
            if (datum && highlightedDatum !== datum && itemId !== datum.itemId) {
                // A peer (in same Series instance) sub-series has highlight active, but this sub-series
                // does not.
                return 'peer-highlighted';
            }
            return 'highlighted';
        };
        Series.prototype.pickNode = function (point, limitPickModes) {
            var e_1, _a;
            var _b = this, pickModes = _b.pickModes, visible = _b.visible, rootGroup = _b.rootGroup;
            if (!visible || !rootGroup.visible) {
                return;
            }
            try {
                for (var pickModes_1 = __values$g(pickModes), pickModes_1_1 = pickModes_1.next(); !pickModes_1_1.done; pickModes_1_1 = pickModes_1.next()) {
                    var pickMode = pickModes_1_1.value;
                    if (limitPickModes && !limitPickModes.includes(pickMode)) {
                        continue;
                    }
                    var match = undefined;
                    switch (pickMode) {
                        case SeriesNodePickMode.EXACT_SHAPE_MATCH:
                            match = this.pickNodeExactShape(point);
                            break;
                        case SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST:
                        case SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST:
                            match = this.pickNodeMainAxisFirst(point, pickMode === SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST);
                            break;
                        case SeriesNodePickMode.NEAREST_NODE:
                            match = this.pickNodeClosestDatum(point);
                            break;
                    }
                    if (match) {
                        return { pickMode: pickMode, match: match.datum, distance: match.distance };
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (pickModes_1_1 && !pickModes_1_1.done && (_a = pickModes_1.return)) _a.call(pickModes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Series.prototype.pickNodeExactShape = function (point) {
            var match = this.contentGroup.pickNode(point.x, point.y);
            if (match) {
                return {
                    datum: match.datum,
                    distance: 0,
                };
            }
        };
        Series.prototype.pickNodeClosestDatum = function (_point) {
            // Override point for sub-classes - but if this is invoked, the sub-class specified it wants
            // to use this feature.
            throw new Error('AG Charts - Series.pickNodeClosestDatum() not implemented');
        };
        Series.prototype.pickNodeMainAxisFirst = function (_point, _requireCategoryAxis) {
            // Override point for sub-classes - but if this is invoked, the sub-class specified it wants
            // to use this feature.
            throw new Error('AG Charts - Series.pickNodeMainAxisFirst() not implemented');
        };
        Series.prototype.fireNodeClickEvent = function (event, _datum) {
            var eventObject = this.getNodeClickEvent(event, _datum);
            this.fireEvent(eventObject);
        };
        Series.prototype.getNodeClickEvent = function (event, datum) {
            return new SeriesNodeClickEvent(event, datum, this);
        };
        Series.prototype.toggleSeriesItem = function (_itemId, enabled) {
            this.visible = enabled;
            this.nodeDataRefresh = true;
        };
        Series.prototype.isEnabled = function () {
            return this.visible;
        };
        Series.prototype.fixNumericExtent = function (extent, axis) {
            if (extent === undefined) {
                // Don't return a range, there is no range.
                return [];
            }
            var _a = __read$n(extent, 2), min = _a[0], max = _a[1];
            min = +min;
            max = +max;
            if (min === 0 && max === 0) {
                // domain has zero length and the single valid value is 0. Use the default of [0, 1].
                return [0, 1];
            }
            if (min === Infinity && max === -Infinity) {
                // There's no data in the domain.
                return [];
            }
            if (min === Infinity) {
                min = 0;
            }
            if (max === -Infinity) {
                max = 0;
            }
            if (min === max) {
                // domain has zero length, there is only a single valid value in data
                if (axis instanceof TimeAxis) {
                    // numbers in domain correspond to Unix timestamps
                    // automatically expand domain by 1 in each direction
                    min -= 1;
                    max += 1;
                }
                else {
                    var padding = Math.abs(min * 0.01);
                    min -= padding;
                    max += padding;
                }
            }
            if (!(isNumber(min) && isNumber(max))) {
                return [];
            }
            return [min, max];
        };
        Series.highlightedZIndex = 1000000000000;
        __decorate$u([
            Validate(STRING)
        ], Series.prototype, "id", void 0);
        __decorate$u([
            Validate(BOOLEAN)
        ], Series.prototype, "_visible", void 0);
        __decorate$u([
            Validate(BOOLEAN)
        ], Series.prototype, "showInLegend", void 0);
        __decorate$u([
            Validate(STRING)
        ], Series.prototype, "cursor", void 0);
        return Series;
    }(Observable));

    var __decorate$t = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Padding = /** @class */ (function () {
        function Padding(top, right, bottom, left) {
            if (top === void 0) { top = 0; }
            if (right === void 0) { right = top; }
            if (bottom === void 0) { bottom = top; }
            if (left === void 0) { left = right; }
            this.top = top;
            this.right = right;
            this.bottom = bottom;
            this.left = left;
        }
        Padding.prototype.clear = function () {
            this.top = this.right = this.bottom = this.left = 0;
        };
        __decorate$t([
            Validate(NUMBER(0))
        ], Padding.prototype, "top", void 0);
        __decorate$t([
            Validate(NUMBER(0))
        ], Padding.prototype, "right", void 0);
        __decorate$t([
            Validate(NUMBER(0))
        ], Padding.prototype, "bottom", void 0);
        __decorate$t([
            Validate(NUMBER(0))
        ], Padding.prototype, "left", void 0);
        return Padding;
    }());

    var Gradient = /** @class */ (function () {
        function Gradient() {
            this.stops = [];
        }
        return Gradient;
    }());

    var __extends$M = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var LinearGradient = /** @class */ (function (_super) {
        __extends$M(LinearGradient, _super);
        function LinearGradient() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.angle = 0;
            return _this;
        }
        LinearGradient.prototype.createGradient = function (ctx, bbox) {
            var stops = this.stops;
            var radians = ((this.angle % 360) * Math.PI) / 180;
            var cos = Math.cos(radians);
            var sin = Math.sin(radians);
            var w = bbox.width;
            var h = bbox.height;
            var cx = bbox.x + w * 0.5;
            var cy = bbox.y + h * 0.5;
            if (w > 0 && h > 0) {
                var l = (Math.sqrt(h * h + w * w) * Math.abs(Math.cos(radians - Math.atan(h / w)))) / 2;
                var gradient_1 = ctx.createLinearGradient(cx + cos * l, cy + sin * l, cx - cos * l, cy - sin * l);
                stops.forEach(function (stop) {
                    gradient_1.addColorStop(stop.offset, stop.color);
                });
                return gradient_1;
            }
            return 'black';
        };
        return LinearGradient;
    }(Gradient));

    var __extends$L = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$s = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Rect = /** @class */ (function (_super) {
        __extends$L(Rect, _super);
        function Rect() {
            var _this = _super.call(this, function (ctx) { return _this.renderRect(ctx); }) || this;
            _this.borderPath = new Path2D();
            _this.x = 0;
            _this.y = 0;
            _this.width = 10;
            _this.height = 10;
            _this.radius = 0;
            /**
             * If `true`, the rect is aligned to the pixel grid for crisp looking lines.
             * Animated rects may not look nice with this option enabled, for example
             * when a rect is translated by a sub-pixel value on each frame.
             */
            _this.crisp = false;
            _this.gradient = false;
            _this.lastUpdatePathStrokeWidth = Shape.defaultStyles.strokeWidth;
            _this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;
            /**
             * When the rectangle's width or height is less than a pixel
             * and crisp mode is on, the rectangle will still fit into the pixel,
             * but will be less opaque to make an effect of holding less space.
             */
            _this.microPixelEffectOpacity = 1;
            return _this;
        }
        Rect.prototype.updateGradientInstance = function () {
            var fill = this.fill;
            if (this.gradient) {
                if (fill) {
                    var gradient = new LinearGradient();
                    gradient.angle = 270;
                    gradient.stops = [
                        {
                            offset: 0,
                            color: Color.tryParseFromString(fill).brighter().toString(),
                        },
                        {
                            offset: 1,
                            color: Color.tryParseFromString(fill).darker().toString(),
                        },
                    ];
                    this.gradientInstance = gradient;
                }
            }
            else {
                this.gradientInstance = undefined;
            }
            this.gradientFill = fill;
        };
        Rect.prototype.isDirtyPath = function () {
            var _a;
            if (this.lastUpdatePathStrokeWidth !== this.strokeWidth) {
                return true;
            }
            if (this.path.isDirty() || this.borderPath.isDirty() || ((_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.isDirty())) {
                return true;
            }
            return false;
        };
        Rect.prototype.updatePath = function () {
            var _a, _b, _c;
            var _d = this, path = _d.path, borderPath = _d.borderPath, crisp = _d.crisp;
            var _e = this, x = _e.x, y = _e.y, w = _e.width, h = _e.height, strokeWidth = _e.strokeWidth;
            var pixelRatio = (_b = (_a = this.scene) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;
            var pixelSize = 1 / pixelRatio;
            var microPixelEffectOpacity = 1;
            path.clear({ trackChanges: true });
            borderPath.clear({ trackChanges: true });
            if (crisp) {
                if (w <= pixelSize) {
                    microPixelEffectOpacity *= w / pixelSize;
                }
                if (h <= pixelSize) {
                    microPixelEffectOpacity *= h / pixelSize;
                }
                w = this.align(x, w);
                h = this.align(y, h);
                x = this.align(x);
                y = this.align(y);
            }
            if (strokeWidth) {
                if (w < pixelSize) {
                    // Too narrow, draw a vertical stroke
                    var lx = x + pixelSize / 2;
                    borderPath.moveTo(lx, y);
                    borderPath.lineTo(lx, y + h);
                    strokeWidth = pixelSize;
                    this.borderClipPath = undefined;
                }
                else if (h < pixelSize) {
                    // Too narrow, draw a horizontal stroke
                    var ly = y + pixelSize / 2;
                    borderPath.moveTo(x, ly);
                    borderPath.lineTo(x + w, ly);
                    strokeWidth = pixelSize;
                    this.borderClipPath = undefined;
                }
                else if (strokeWidth < w && strokeWidth < h) {
                    var halfStrokeWidth = strokeWidth / 2;
                    x += halfStrokeWidth;
                    y += halfStrokeWidth;
                    w -= strokeWidth;
                    h -= strokeWidth;
                    // Clipping not needed in this case; fill to center of stroke.
                    this.borderClipPath = undefined;
                    path.rect(x, y, w, h);
                    borderPath.rect(x, y, w, h);
                }
                else {
                    // Skip the fill and just render the stroke.
                    this.borderClipPath = (_c = this.borderClipPath) !== null && _c !== void 0 ? _c : new Path2D();
                    this.borderClipPath.clear({ trackChanges: true });
                    this.borderClipPath.rect(x, y, w, h);
                    borderPath.rect(x, y, w, h);
                }
            }
            else {
                // No borderPath needed, and thus no clipPath needed either. Fill to full extent of
                // Rect.
                this.borderClipPath = undefined;
                path.rect(x, y, w, h);
            }
            this.effectiveStrokeWidth = strokeWidth;
            this.lastUpdatePathStrokeWidth = strokeWidth;
            this.microPixelEffectOpacity = microPixelEffectOpacity;
        };
        Rect.prototype.computeBBox = function () {
            var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
            return new BBox(x, y, width, height);
        };
        Rect.prototype.isPointInPath = function (x, y) {
            var point = this.transformPoint(x, y);
            var bbox = this.computeBBox();
            return bbox.containsPoint(point.x, point.y);
        };
        Rect.prototype.renderRect = function (ctx) {
            var _a, _b;
            var _c = this, stroke = _c.stroke, effectiveStrokeWidth = _c.effectiveStrokeWidth, fill = _c.fill, path = _c.path, borderPath = _c.borderPath, borderClipPath = _c.borderClipPath, opacity = _c.opacity, microPixelEffectOpacity = _c.microPixelEffectOpacity;
            var borderActive = !!stroke && !!effectiveStrokeWidth;
            if (fill) {
                var _d = this, gradientFill = _d.gradientFill, fillOpacity = _d.fillOpacity, fillShadow = _d.fillShadow;
                if (fill !== gradientFill) {
                    this.updateGradientInstance();
                }
                var gradientInstance = this.gradientInstance;
                if (gradientInstance) {
                    ctx.fillStyle = gradientInstance.createGradient(ctx, this.computeBBox());
                }
                else {
                    ctx.fillStyle = fill;
                }
                ctx.globalAlpha = opacity * fillOpacity * microPixelEffectOpacity;
                // The canvas context scaling (depends on the device's pixel ratio)
                // has no effect on shadows, so we have to account for the pixel ratio
                // manually here.
                if (fillShadow && fillShadow.enabled) {
                    var pixelRatio = (_b = (_a = this.scene) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;
                    ctx.shadowColor = fillShadow.color;
                    ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
                    ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
                    ctx.shadowBlur = fillShadow.blur * pixelRatio;
                }
                path.draw(ctx);
                ctx.fill();
                ctx.shadowColor = 'rgba(0, 0, 0, 0)';
            }
            if (borderActive) {
                var _e = this, strokeOpacity = _e.strokeOpacity, lineDash = _e.lineDash, lineDashOffset = _e.lineDashOffset, lineCap = _e.lineCap, lineJoin = _e.lineJoin;
                if (borderClipPath) {
                    // strokeWidth is larger than width or height, so use clipping to render correctly.
                    // This is the simplest way to achieve the correct rendering due to nuances with ~0
                    // width/height lines in Canvas operations.
                    borderClipPath.draw(ctx);
                    ctx.clip();
                }
                borderPath.draw(ctx);
                ctx.strokeStyle = stroke;
                ctx.globalAlpha = opacity * strokeOpacity * microPixelEffectOpacity;
                ctx.lineWidth = effectiveStrokeWidth;
                if (lineDash) {
                    ctx.setLineDash(lineDash);
                }
                if (lineDashOffset) {
                    ctx.lineDashOffset = lineDashOffset;
                }
                if (lineCap) {
                    ctx.lineCap = lineCap;
                }
                if (lineJoin) {
                    ctx.lineJoin = lineJoin;
                }
                ctx.stroke();
            }
        };
        Rect.className = 'Rect';
        __decorate$s([
            ScenePathChangeDetection()
        ], Rect.prototype, "x", void 0);
        __decorate$s([
            ScenePathChangeDetection()
        ], Rect.prototype, "y", void 0);
        __decorate$s([
            ScenePathChangeDetection()
        ], Rect.prototype, "width", void 0);
        __decorate$s([
            ScenePathChangeDetection()
        ], Rect.prototype, "height", void 0);
        __decorate$s([
            ScenePathChangeDetection()
        ], Rect.prototype, "radius", void 0);
        __decorate$s([
            ScenePathChangeDetection()
        ], Rect.prototype, "crisp", void 0);
        __decorate$s([
            ScenePathChangeDetection({ changeCb: function (r) { return r.updateGradientInstance(); } })
        ], Rect.prototype, "gradient", void 0);
        return Rect;
    }(Path));

    var __decorate$r = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Background = /** @class */ (function () {
        function Background() {
            this.node = new Rect();
            this._visible = true;
        }
        Object.defineProperty(Background.prototype, "width", {
            get: function () {
                return this.node.width;
            },
            set: function (value) {
                this.node.width = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Background.prototype, "height", {
            get: function () {
                return this.node.height;
            },
            set: function (value) {
                this.node.height = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Background.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.node.visible = this._visible;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Background.prototype, "fill", {
            get: function () {
                return this._fill;
            },
            set: function (value) {
                this._fill = value;
                this.node.fill = this._fill;
            },
            enumerable: false,
            configurable: true
        });
        __decorate$r([
            Validate(BOOLEAN)
        ], Background.prototype, "_visible", void 0);
        __decorate$r([
            Validate(OPT_COLOR_STRING)
        ], Background.prototype, "_fill", void 0);
        return Background;
    }());

    var __extends$K = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$q = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __values$f = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var Marker = /** @class */ (function (_super) {
        __extends$K(Marker, _super);
        function Marker() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.x = 0;
            _this.y = 0;
            _this.size = 12;
            return _this;
        }
        Marker.prototype.computeBBox = function () {
            var _a = this, x = _a.x, y = _a.y, size = _a.size;
            var half = size / 2;
            return new BBox(x - half, y - half, size, size);
        };
        Marker.prototype.applyPath = function (s, moves) {
            var e_1, _a;
            var path = this.path;
            var _b = this, x = _b.x, y = _b.y;
            path.clear();
            try {
                for (var moves_1 = __values$f(moves), moves_1_1 = moves_1.next(); !moves_1_1.done; moves_1_1 = moves_1.next()) {
                    var _c = moves_1_1.value, mx = _c.x, my = _c.y, t = _c.t;
                    x += mx * s;
                    y += my * s;
                    if (t === 'move') {
                        path.moveTo(x, y);
                    }
                    else {
                        path.lineTo(x, y);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (moves_1_1 && !moves_1_1.done && (_a = moves_1.return)) _a.call(moves_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            path.closePath();
        };
        __decorate$q([
            ScenePathChangeDetection()
        ], Marker.prototype, "x", void 0);
        __decorate$q([
            ScenePathChangeDetection()
        ], Marker.prototype, "y", void 0);
        __decorate$q([
            ScenePathChangeDetection({ convertor: Math.abs })
        ], Marker.prototype, "size", void 0);
        return Marker;
    }(Path));

    var __extends$J = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Square = /** @class */ (function (_super) {
        __extends$J(Square, _super);
        function Square() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Square.prototype.updatePath = function () {
            var _a = this, path = _a.path, x = _a.x, y = _a.y;
            var hs = this.size / 2;
            path.clear();
            path.moveTo(this.align(x - hs), this.align(y - hs));
            path.lineTo(this.align(x + hs), this.align(y - hs));
            path.lineTo(this.align(x + hs), this.align(y + hs));
            path.lineTo(this.align(x - hs), this.align(y + hs));
            path.closePath();
        };
        Square.className = 'Square';
        return Square;
    }(Marker));

    var __extends$I = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var MarkerLabel = /** @class */ (function (_super) {
        __extends$I(MarkerLabel, _super);
        function MarkerLabel() {
            var _this = _super.call(this, { name: 'markerLabelGroup' }) || this;
            _this.label = new Text();
            _this._marker = new Square();
            _this._markerSize = 15;
            _this._spacing = 8;
            var label = _this.label;
            label.textBaseline = 'middle';
            label.fontSize = 12;
            label.fontFamily = 'Verdana, sans-serif';
            label.fill = 'black';
            // For better looking vertical alignment of labels to markers.
            label.y = HdpiCanvas.has.textMetrics ? 1 : 0;
            _this.append([_this.marker, label]);
            _this.update();
            return _this;
        }
        Object.defineProperty(MarkerLabel.prototype, "text", {
            get: function () {
                return this.label.text;
            },
            set: function (value) {
                this.label.text = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "fontStyle", {
            get: function () {
                return this.label.fontStyle;
            },
            set: function (value) {
                this.label.fontStyle = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "fontWeight", {
            get: function () {
                return this.label.fontWeight;
            },
            set: function (value) {
                this.label.fontWeight = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "fontSize", {
            get: function () {
                return this.label.fontSize;
            },
            set: function (value) {
                this.label.fontSize = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "fontFamily", {
            get: function () {
                return this.label.fontFamily;
            },
            set: function (value) {
                this.label.fontFamily = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "color", {
            get: function () {
                return this.label.fill;
            },
            set: function (value) {
                this.label.fill = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "marker", {
            get: function () {
                return this._marker;
            },
            set: function (value) {
                if (this._marker !== value) {
                    this.removeChild(this._marker);
                    this._marker = value;
                    this.appendChild(value);
                    this.update();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "markerSize", {
            get: function () {
                return this._markerSize;
            },
            set: function (value) {
                if (this._markerSize !== value) {
                    this._markerSize = value;
                    this.update();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "markerFill", {
            get: function () {
                return this.marker.fill;
            },
            set: function (value) {
                this.marker.fill = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "markerStroke", {
            get: function () {
                return this.marker.stroke;
            },
            set: function (value) {
                this.marker.stroke = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "markerStrokeWidth", {
            get: function () {
                return this.marker.strokeWidth;
            },
            set: function (value) {
                this.marker.strokeWidth = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "markerFillOpacity", {
            get: function () {
                return this.marker.fillOpacity;
            },
            set: function (value) {
                this.marker.fillOpacity = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "markerStrokeOpacity", {
            get: function () {
                return this.marker.strokeOpacity;
            },
            set: function (value) {
                this.marker.strokeOpacity = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkerLabel.prototype, "spacing", {
            get: function () {
                return this._spacing;
            },
            set: function (value) {
                if (this._spacing !== value) {
                    this._spacing = value;
                    this.update();
                }
            },
            enumerable: false,
            configurable: true
        });
        MarkerLabel.prototype.update = function () {
            var marker = this.marker;
            var markerSize = this.markerSize;
            marker.size = markerSize;
            this.label.x = markerSize / 2 + this.spacing;
        };
        MarkerLabel.prototype.render = function (renderCtx) {
            // Cannot override field Group.opacity with get/set pair, so
            // propagate opacity changes here.
            this.marker.opacity = this.opacity;
            this.label.opacity = this.opacity;
            _super.prototype.render.call(this, renderCtx);
        };
        MarkerLabel.className = 'MarkerLabel';
        return MarkerLabel;
    }(Group));

    var __extends$H = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Circle = /** @class */ (function (_super) {
        __extends$H(Circle, _super);
        function Circle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Circle.prototype.updatePath = function () {
            var _a = this, x = _a.x, y = _a.y, path = _a.path, size = _a.size;
            var r = size / 2;
            path.clear();
            path.cubicArc(x, y, r, r, 0, 0, Math.PI * 2, 0);
            path.closePath();
        };
        Circle.className = 'Circle';
        return Circle;
    }(Marker));

    var __extends$G = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Cross = /** @class */ (function (_super) {
        __extends$G(Cross, _super);
        function Cross() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Cross.prototype.updatePath = function () {
            var s = this.size / 4.2;
            _super.prototype.applyPath.call(this, s, Cross.moves);
        };
        Cross.className = 'Cross';
        Cross.moves = [
            { x: -1, y: 0, t: 'move' },
            { x: -1, y: -1 },
            { x: +1, y: -1 },
            { x: +1, y: +1 },
            { x: +1, y: -1 },
            { x: +1, y: +1 },
            { x: -1, y: +1 },
            { x: +1, y: +1 },
            { x: -1, y: +1 },
            { x: -1, y: -1 },
            { x: -1, y: +1 },
            { x: -1, y: -1 },
        ];
        return Cross;
    }(Marker));

    var __extends$F = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Diamond = /** @class */ (function (_super) {
        __extends$F(Diamond, _super);
        function Diamond() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Diamond.prototype.updatePath = function () {
            var s = this.size / 2;
            _super.prototype.applyPath.call(this, s, Diamond.moves);
        };
        Diamond.className = 'Diamond';
        Diamond.moves = [
            { x: 0, y: -1, t: 'move' },
            { x: +1, y: +1 },
            { x: -1, y: +1 },
            { x: -1, y: -1 },
            { x: +1, y: -1 },
        ];
        return Diamond;
    }(Marker));

    var __extends$E = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Heart = /** @class */ (function (_super) {
        __extends$E(Heart, _super);
        function Heart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Heart.prototype.rad = function (degree) {
            return (degree / 180) * Math.PI;
        };
        Heart.prototype.updatePath = function () {
            var _a = this, x = _a.x, path = _a.path, size = _a.size, rad = _a.rad;
            var r = size / 4;
            var y = this.y + r / 2;
            path.clear();
            path.cubicArc(x - r, y - r, r, r, 0, rad(130), rad(330), 0);
            path.cubicArc(x + r, y - r, r, r, 0, rad(220), rad(50), 0);
            path.lineTo(x, y + r);
            path.closePath();
        };
        Heart.className = 'Heart';
        return Heart;
    }(Marker));

    var __extends$D = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Plus = /** @class */ (function (_super) {
        __extends$D(Plus, _super);
        function Plus() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Plus.prototype.updatePath = function () {
            var s = this.size / 3;
            _super.prototype.applyPath.call(this, s, Plus.moves);
        };
        Plus.className = 'Plus';
        Plus.moves = [
            { x: -0.5, y: -0.5, t: 'move' },
            { x: 0, y: -1 },
            { x: +1, y: 0 },
            { x: 0, y: +1 },
            { x: +1, y: 0 },
            { x: 0, y: +1 },
            { x: -1, y: 0 },
            { x: 0, y: +1 },
            { x: -1, y: 0 },
            { x: 0, y: -1 },
            { x: -1, y: 0 },
            { x: 0, y: -1 },
        ];
        return Plus;
    }(Marker));

    var __extends$C = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var Triangle = /** @class */ (function (_super) {
        __extends$C(Triangle, _super);
        function Triangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Triangle.prototype.updatePath = function () {
            var s = this.size * 1.1;
            _super.prototype.applyPath.call(this, s, Triangle.moves);
        };
        Triangle.className = 'Triangle';
        Triangle.moves = [
            { x: 0, y: -0.48, t: 'move' },
            { x: 0.5, y: 0.87 },
            { x: -1, y: 0 },
        ];
        return Triangle;
    }(Marker));

    // This function is in its own file because putting it into SeriesMarker makes the Legend
    // suddenly aware of the series (it's an agnostic component), and putting it into Marker
    // introduces circular dependencies.
    function getMarker(shape) {
        if (shape === void 0) { shape = Square; }
        if (typeof shape === 'string') {
            switch (shape) {
                case 'circle':
                    return Circle;
                case 'cross':
                    return Cross;
                case 'diamond':
                    return Diamond;
                case 'heart':
                    return Heart;
                case 'plus':
                    return Plus;
                case 'triangle':
                    return Triangle;
                default:
                    return Square;
            }
        }
        if (typeof shape === 'function') {
            return shape;
        }
        return Square;
    }

    function gridLayout(_a) {
        var orientation = _a.orientation, bboxes = _a.bboxes, maxHeight = _a.maxHeight, maxWidth = _a.maxWidth, _b = _a.itemPaddingY, itemPaddingY = _b === void 0 ? 0 : _b, _c = _a.itemPaddingX, itemPaddingX = _c === void 0 ? 0 : _c, _d = _a.forceResult, forceResult = _d === void 0 ? false : _d;
        var horizontal = orientation === 'horizontal';
        var primary = {
            max: horizontal ? maxWidth : maxHeight,
            fn: horizontal ? function (b) { return b.width; } : function (b) { return b.height; },
            padding: horizontal ? itemPaddingX : itemPaddingY,
        };
        var secondary = {
            max: !horizontal ? maxWidth : maxHeight,
            fn: !horizontal ? function (b) { return b.width; } : function (b) { return b.height; },
            padding: !horizontal ? itemPaddingX : itemPaddingY,
        };
        var processedBBoxCount = 0;
        var rawPages = [];
        while (processedBBoxCount < bboxes.length) {
            var unprocessedBBoxes = bboxes.slice(processedBBoxCount);
            var result = processBBoxes(unprocessedBBoxes, processedBBoxCount, primary, secondary, forceResult);
            if (!result) {
                return;
            }
            processedBBoxCount += result.processedBBoxCount;
            rawPages.push(result.pageIndices);
        }
        return buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX);
    }
    function processBBoxes(bboxes, indexOffset, primary, secondary, forceResult) {
        // If calculatePage() fails on the first guess, we could use the number of items that fit
        // as a good guess for the next iteration.
        var minGuess = 1;
        var startingGuess = estimateStartingGuess(bboxes, primary);
        if (startingGuess < minGuess) {
            if (!forceResult) {
                return undefined;
            }
            // Legend constraints too small! Display at least one row/column if forceResult is true
            startingGuess = minGuess;
        }
        for (var guess = startingGuess; guess >= minGuess; guess--) {
            var pageIndices = calculatePage(bboxes, indexOffset, guess, primary, secondary, forceResult);
            if (pageIndices == null && guess <= minGuess) {
                // Can't layout!
                return undefined;
            }
            if (pageIndices == null) {
                // Guess again!
                continue;
            }
            if (typeof pageIndices === 'number') {
                // calculatePage() suggested a better guess, use that if it's more than minGuess.
                if (pageIndices <= minGuess) {
                    // Can't layout!
                    return undefined;
                }
                guess = pageIndices < guess && pageIndices > minGuess ? pageIndices : guess;
                continue;
            }
            var processedBBoxCount = pageIndices.length * pageIndices[0].length; // this is an estimate, not all rows/columns will have the same length
            return { processedBBoxCount: processedBBoxCount, pageIndices: pageIndices };
        }
    }
    function calculatePage(bboxes, indexOffset, primaryCount, primary, secondary, forceResult) {
        var _a;
        var result = [];
        var sumSecondary = 0;
        var currentMaxSecondary = 0;
        var currentPrimaryIndices = [];
        var maxPrimaryValues = [];
        for (var bboxIndex = 0; bboxIndex < bboxes.length; bboxIndex++) {
            var primaryValueIdx = (bboxIndex + primaryCount) % primaryCount;
            if (primaryValueIdx === 0) {
                sumSecondary += currentMaxSecondary;
                currentMaxSecondary = 0;
                if (currentPrimaryIndices.length > 0) {
                    result.push(currentPrimaryIndices);
                }
                currentPrimaryIndices = [];
            }
            var primaryValue = primary.fn(bboxes[bboxIndex]) + primary.padding;
            maxPrimaryValues[primaryValueIdx] = Math.max((_a = maxPrimaryValues[primaryValueIdx]) !== null && _a !== void 0 ? _a : 0, primaryValue);
            currentMaxSecondary = Math.max(currentMaxSecondary, secondary.fn(bboxes[bboxIndex]) + secondary.padding);
            var currentSecondaryDimension = sumSecondary + currentMaxSecondary;
            var returnResult = !forceResult || result.length > 0;
            if (currentSecondaryDimension > secondary.max && returnResult) {
                // Breached max secondary dimension size, return indices accumlated so far (but not in-progress row/column).
                currentPrimaryIndices = [];
                break;
            }
            var sumPrimary = maxPrimaryValues.reduce(function (sum, next) { return sum + next; }, 0);
            if (sumPrimary > primary.max && !forceResult) {
                // Breached max main dimension size.
                if (maxPrimaryValues.length < primaryCount) {
                    // Feedback as guess for next iteration if we're on the first round still.
                    return maxPrimaryValues.length;
                }
                return undefined;
            }
            currentPrimaryIndices.push(bboxIndex + indexOffset);
        }
        if (currentPrimaryIndices.length > 0) {
            result.push(currentPrimaryIndices);
        }
        return result.length > 0 ? result : undefined;
    }
    function buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX) {
        var maxPageWidth = 0;
        var maxPageHeight = 0;
        var pages = rawPages.map(function (indices) {
            if (orientation === 'horizontal') {
                indices = transpose(indices);
            }
            var endIndex = 0;
            var columns = indices.map(function (colIndices) {
                var colBBoxes = colIndices.map(function (bboxIndex) {
                    endIndex = Math.max(bboxIndex, endIndex);
                    return bboxes[bboxIndex];
                });
                var columnHeight = 0;
                var columnWidth = 0;
                colBBoxes.forEach(function (bbox) {
                    columnHeight += bbox.height + itemPaddingY;
                    columnWidth = Math.max(columnWidth, bbox.width + itemPaddingX);
                });
                return {
                    indices: colIndices,
                    bboxes: colBBoxes,
                    columnHeight: columnHeight,
                    columnWidth: columnWidth,
                };
            });
            var pageWidth = 0;
            var pageHeight = 0;
            columns.forEach(function (column) {
                (pageWidth += column.columnWidth), (pageHeight = Math.max(pageHeight, column.columnHeight));
            });
            maxPageWidth = Math.max(pageWidth, maxPageWidth);
            maxPageHeight = Math.max(pageHeight, maxPageHeight);
            return {
                columns: columns,
                startIndex: indices[0][0],
                endIndex: endIndex,
                pageWidth: pageWidth,
                pageHeight: pageHeight,
            };
        });
        return { pages: pages, maxPageWidth: maxPageWidth, maxPageHeight: maxPageHeight };
    }
    function transpose(data) {
        var result = [];
        for (var i = 0; i < data[0].length; i++) {
            result.push([]);
        }
        data.forEach(function (innerData, dataIdx) {
            innerData.forEach(function (item, itemIdx) {
                result[itemIdx][dataIdx] = item;
            });
        });
        return result;
    }
    function estimateStartingGuess(bboxes, primary) {
        var n = bboxes.length;
        var primarySum = 0;
        for (var bboxIndex = 0; bboxIndex < n; bboxIndex++) {
            primarySum += primary.fn(bboxes[bboxIndex]) + primary.padding;
            if (primarySum > primary.max) {
                var ratio = n / bboxIndex;
                if (ratio < 2) {
                    return Math.ceil(n / 2);
                }
                return bboxIndex;
            }
        }
        return n;
    }

    var __decorate$p = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PaginationLabel = /** @class */ (function () {
        function PaginationLabel() {
            this.color = 'black';
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
        }
        __decorate$p([
            Validate(COLOR_STRING)
        ], PaginationLabel.prototype, "color", void 0);
        __decorate$p([
            Validate(OPT_FONT_STYLE)
        ], PaginationLabel.prototype, "fontStyle", void 0);
        __decorate$p([
            Validate(OPT_FONT_WEIGHT)
        ], PaginationLabel.prototype, "fontWeight", void 0);
        __decorate$p([
            Validate(NUMBER(0))
        ], PaginationLabel.prototype, "fontSize", void 0);
        __decorate$p([
            Validate(STRING)
        ], PaginationLabel.prototype, "fontFamily", void 0);
        return PaginationLabel;
    }());
    var PaginationMarkerStyle = /** @class */ (function () {
        function PaginationMarkerStyle() {
            this.size = 15;
            this.fillOpacity = undefined;
            this.strokeWidth = 1;
            this.strokeOpacity = 1;
        }
        __decorate$p([
            Validate(NUMBER(0))
        ], PaginationMarkerStyle.prototype, "size", void 0);
        __decorate$p([
            Validate(OPT_COLOR_STRING)
        ], PaginationMarkerStyle.prototype, "fill", void 0);
        __decorate$p([
            Validate(OPT_NUMBER(0, 1))
        ], PaginationMarkerStyle.prototype, "fillOpacity", void 0);
        __decorate$p([
            Validate(OPT_COLOR_STRING)
        ], PaginationMarkerStyle.prototype, "stroke", void 0);
        __decorate$p([
            Validate(NUMBER(0))
        ], PaginationMarkerStyle.prototype, "strokeWidth", void 0);
        __decorate$p([
            Validate(NUMBER(0, 1))
        ], PaginationMarkerStyle.prototype, "strokeOpacity", void 0);
        return PaginationMarkerStyle;
    }());
    var PaginationMarker = /** @class */ (function () {
        function PaginationMarker() {
            this.size = 15;
            this._shape = Triangle;
            /**
             * Inner padding between a pagination button and the label.
             */
            this.padding = 8;
        }
        Object.defineProperty(PaginationMarker.prototype, "shape", {
            get: function () {
                return this._shape;
            },
            set: function (value) {
                var _a;
                this._shape = value;
                (_a = this.parent) === null || _a === void 0 ? void 0 : _a.onMarkerShapeChange();
            },
            enumerable: false,
            configurable: true
        });
        __decorate$p([
            Validate(NUMBER(0))
        ], PaginationMarker.prototype, "size", void 0);
        __decorate$p([
            Validate(NUMBER(0))
        ], PaginationMarker.prototype, "padding", void 0);
        return PaginationMarker;
    }());
    var Pagination = /** @class */ (function () {
        function Pagination(chartUpdateCallback, pageUpdateCallback, interactionManager, cursorManager) {
            var _this = this;
            this.chartUpdateCallback = chartUpdateCallback;
            this.pageUpdateCallback = pageUpdateCallback;
            this.interactionManager = interactionManager;
            this.cursorManager = cursorManager;
            this.id = createId(this);
            this.group = new Group({ name: 'pagination' });
            this.labelNode = new Text();
            this.marker = new PaginationMarker();
            this.activeStyle = new PaginationMarkerStyle();
            this.inactiveStyle = new PaginationMarkerStyle();
            this.highlightStyle = new PaginationMarkerStyle();
            this.label = new PaginationLabel();
            this.totalPages = 0;
            this.currentPage = 0;
            this.nextButtonDisabled = false;
            this.previousButtonDisabled = false;
            this._visible = true;
            this._enabled = true;
            this._orientation = 'vertical';
            this._nextButton = new Triangle();
            this._previousButton = new Triangle();
            var labelNode = this.labelNode;
            labelNode.textBaseline = 'middle';
            labelNode.fontSize = 12;
            labelNode.fontFamily = 'Verdana, sans-serif';
            labelNode.fill = 'black';
            labelNode.y = HdpiCanvas.has.textMetrics ? 1 : 0;
            this.group.append([this.nextButton, this.previousButton, labelNode]);
            this.interactionManager.addListener('click', function (event) { return _this.onPaginationClick(event); });
            this.interactionManager.addListener('hover', function (event) { return _this.onPaginationMouseMove(event); });
            this.marker.parent = this;
            this.update();
            this.updateMarkers();
        }
        Object.defineProperty(Pagination.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.updateGroupVisibility();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            set: function (value) {
                this._enabled = value;
                this.updateGroupVisibility();
            },
            enumerable: false,
            configurable: true
        });
        Pagination.prototype.updateGroupVisibility = function () {
            this.group.visible = this.enabled && this.visible;
        };
        Object.defineProperty(Pagination.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            set: function (value) {
                this._orientation = value;
                switch (value) {
                    case 'horizontal': {
                        this.previousButton.rotation = -Math.PI / 2;
                        this.nextButton.rotation = Math.PI / 2;
                        break;
                    }
                    case 'vertical':
                    default: {
                        this.previousButton.rotation = 0;
                        this.nextButton.rotation = Math.PI;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "translationX", {
            get: function () {
                return this.group.translationX;
            },
            set: function (value) {
                this.group.translationX = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "translationY", {
            get: function () {
                return this.group.translationY;
            },
            set: function (value) {
                this.group.translationY = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "nextButton", {
            get: function () {
                return this._nextButton;
            },
            set: function (value) {
                if (this._nextButton !== value) {
                    this.group.removeChild(this._nextButton);
                    this._nextButton = value;
                    this.group.appendChild(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "previousButton", {
            get: function () {
                return this._previousButton;
            },
            set: function (value) {
                if (this._previousButton !== value) {
                    this.group.removeChild(this._previousButton);
                    this._previousButton = value;
                    this.group.appendChild(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Pagination.prototype.update = function () {
            this.updateLabel();
            this.updatePositions();
            this.enableOrDisableButtons();
        };
        Pagination.prototype.updatePositions = function () {
            this.updateLabelPosition();
            this.updateNextButtonPosition();
        };
        Pagination.prototype.updateLabelPosition = function () {
            var _a = this.marker, markerSize = _a.size, markerPadding = _a.padding;
            this.nextButton.size = markerSize;
            this.previousButton.size = markerSize;
            this.labelNode.x = markerSize / 2 + markerPadding;
        };
        Pagination.prototype.updateNextButtonPosition = function () {
            var labelBBox = this.labelNode.computeBBox();
            this.nextButton.translationX = labelBBox.x + labelBBox.width + this.marker.size / 2 + this.marker.padding;
        };
        Pagination.prototype.updateLabel = function () {
            var _a = this, currentPage = _a.currentPage, pages = _a.totalPages, labelNode = _a.labelNode, _b = _a.label, color = _b.color, fontStyle = _b.fontStyle, fontWeight = _b.fontWeight, fontSize = _b.fontSize, fontFamily = _b.fontFamily;
            labelNode.text = currentPage + 1 + " / " + pages;
            labelNode.fill = color;
            labelNode.fontStyle = fontStyle;
            labelNode.fontWeight = fontWeight;
            labelNode.fontSize = fontSize;
            labelNode.fontFamily = fontFamily;
        };
        Pagination.prototype.updateMarkers = function () {
            var _a = this, nextButton = _a.nextButton, previousButton = _a.previousButton, nextButtonDisabled = _a.nextButtonDisabled, previousButtonDisabled = _a.previousButtonDisabled, activeStyle = _a.activeStyle, inactiveStyle = _a.inactiveStyle;
            var nextButtonStyle = nextButtonDisabled ? inactiveStyle : activeStyle;
            this.updateMarker(nextButton, nextButtonStyle);
            var previousButtonStyle = previousButtonDisabled ? inactiveStyle : activeStyle;
            this.updateMarker(previousButton, previousButtonStyle);
        };
        Pagination.prototype.updateMarker = function (marker, style) {
            var _a;
            var size = this.marker.size;
            marker.size = size;
            marker.fill = style.fill;
            marker.fillOpacity = (_a = style.fillOpacity) !== null && _a !== void 0 ? _a : 1;
            marker.stroke = style.stroke;
            marker.strokeWidth = style.strokeWidth;
            marker.strokeOpacity = style.strokeOpacity;
        };
        Pagination.prototype.enableOrDisableButtons = function () {
            var _a = this, currentPage = _a.currentPage, totalPages = _a.totalPages;
            var zeroPagesToDisplay = totalPages === 0;
            var onLastPage = currentPage === totalPages - 1;
            var onFirstPage = currentPage === 0;
            this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
            this.previousButtonDisabled = onFirstPage || zeroPagesToDisplay;
        };
        Pagination.prototype.nextButtonContainsPoint = function (offsetX, offsetY) {
            return !this.nextButtonDisabled && this.nextButton.containsPoint(offsetX, offsetY);
        };
        Pagination.prototype.previousButtonContainsPoint = function (offsetX, offsetY) {
            return !this.previousButtonDisabled && this.previousButton.containsPoint(offsetX, offsetY);
        };
        Pagination.prototype.onPaginationClick = function (event) {
            var offsetX = event.offsetX, offsetY = event.offsetY;
            if (this.nextButtonContainsPoint(offsetX, offsetY)) {
                this.incrementPage();
                this.onPaginationChanged();
                event.consume();
            }
            else if (this.previousButtonContainsPoint(offsetX, offsetY)) {
                this.decrementPage();
                this.onPaginationChanged();
                event.consume();
            }
        };
        Pagination.prototype.onPaginationMouseMove = function (event) {
            var offsetX = event.offsetX, offsetY = event.offsetY;
            if (this.nextButtonContainsPoint(offsetX, offsetY)) {
                this.cursorManager.updateCursor(this.id, 'pointer');
                this.updateMarker(this.nextButton, this.highlightStyle);
            }
            else if (this.previousButtonContainsPoint(offsetX, offsetY)) {
                this.cursorManager.updateCursor(this.id, 'pointer');
                this.updateMarker(this.previousButton, this.highlightStyle);
            }
            else {
                this.updateMarkers();
                this.cursorManager.updateCursor(this.id);
            }
            this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);
        };
        Pagination.prototype.onPaginationChanged = function () {
            this.pageUpdateCallback(this.currentPage);
        };
        Pagination.prototype.incrementPage = function () {
            this.currentPage = Math.min(this.currentPage + 1, this.totalPages - 1);
        };
        Pagination.prototype.decrementPage = function () {
            this.currentPage = Math.max(this.currentPage - 1, 0);
        };
        Pagination.prototype.onMarkerShapeChange = function () {
            var Marker = getMarker(this.marker.shape || Triangle);
            this.previousButton = new Marker();
            this.nextButton = new Marker();
            this.updatePositions();
            this.updateMarkers();
            this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);
        };
        Pagination.prototype.attachPagination = function (node) {
            node.append(this.group);
        };
        Pagination.prototype.computeBBox = function () {
            return this.group.computeBBox();
        };
        Pagination.className = 'Pagination';
        return Pagination;
    }());

    var __decorate$o = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$m = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$d = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$m(arguments[i]));
        return ar;
    };
    var __values$e = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var ORIENTATIONS = ['horizontal', 'vertical'];
    var OPT_ORIENTATION = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, function (v) { return ORIENTATIONS.includes(v); }); }, "expecting an orientation keyword such as 'horizontal' or 'vertical'");
    var LegendLabel = /** @class */ (function () {
        function LegendLabel() {
            this.maxLength = undefined;
            this.color = 'black';
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
            this.formatter = undefined;
        }
        LegendLabel.prototype.getFont = function () {
            return getFont(this.fontSize, this.fontFamily, this.fontStyle, this.fontWeight);
        };
        __decorate$o([
            Validate(OPT_NUMBER(0))
        ], LegendLabel.prototype, "maxLength", void 0);
        __decorate$o([
            Validate(COLOR_STRING)
        ], LegendLabel.prototype, "color", void 0);
        __decorate$o([
            Validate(OPT_FONT_STYLE)
        ], LegendLabel.prototype, "fontStyle", void 0);
        __decorate$o([
            Validate(OPT_FONT_WEIGHT)
        ], LegendLabel.prototype, "fontWeight", void 0);
        __decorate$o([
            Validate(NUMBER(0))
        ], LegendLabel.prototype, "fontSize", void 0);
        __decorate$o([
            Validate(STRING)
        ], LegendLabel.prototype, "fontFamily", void 0);
        __decorate$o([
            Validate(OPT_FUNCTION)
        ], LegendLabel.prototype, "formatter", void 0);
        return LegendLabel;
    }());
    var LegendMarker = /** @class */ (function () {
        function LegendMarker() {
            this.size = 15;
            /**
             * If the marker type is set, the legend will always use that marker type for all its items,
             * regardless of the type that comes from the `data`.
             */
            this._shape = undefined;
            /**
             * Padding between the marker and the label within each legend item.
             */
            this.padding = 8;
            this.strokeWidth = 1;
        }
        Object.defineProperty(LegendMarker.prototype, "shape", {
            get: function () {
                return this._shape;
            },
            set: function (value) {
                var _a;
                this._shape = value;
                (_a = this.parent) === null || _a === void 0 ? void 0 : _a.onMarkerShapeChange();
            },
            enumerable: false,
            configurable: true
        });
        __decorate$o([
            Validate(NUMBER(0))
        ], LegendMarker.prototype, "size", void 0);
        __decorate$o([
            Validate(NUMBER(0))
        ], LegendMarker.prototype, "padding", void 0);
        __decorate$o([
            Validate(NUMBER(0))
        ], LegendMarker.prototype, "strokeWidth", void 0);
        return LegendMarker;
    }());
    var LegendItem = /** @class */ (function () {
        function LegendItem() {
            this.marker = new LegendMarker();
            this.label = new LegendLabel();
            /** Used to constrain the width of legend items. */
            this.maxWidth = undefined;
            /**
             * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,
             * and as few rows as possible when positioned to top or bottom. This config specifies the amount of horizontal
             * padding between legend items.
             */
            this.paddingX = 16;
            /**
             * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,
             * and as few rows as possible when positioned to top or bottom. This config specifies the amount of vertical
             * padding between legend items.
             */
            this.paddingY = 8;
            this.toggleSeriesVisible = true;
        }
        __decorate$o([
            Validate(OPT_NUMBER(0))
        ], LegendItem.prototype, "maxWidth", void 0);
        __decorate$o([
            Validate(NUMBER(0))
        ], LegendItem.prototype, "paddingX", void 0);
        __decorate$o([
            Validate(NUMBER(0))
        ], LegendItem.prototype, "paddingY", void 0);
        __decorate$o([
            Validate(BOOLEAN)
        ], LegendItem.prototype, "toggleSeriesVisible", void 0);
        return LegendItem;
    }());
    var NO_OP_LISTENER = function () {
        // Default listener that does nothing.
    };
    var LegendListeners = /** @class */ (function () {
        function LegendListeners() {
            this.legendItemClick = NO_OP_LISTENER;
        }
        __decorate$o([
            Validate(FUNCTION)
        ], LegendListeners.prototype, "legendItemClick", void 0);
        return LegendListeners;
    }());
    var Legend = /** @class */ (function () {
        function Legend(chart, interactionManager, cursorManager, highlightManager) {
            var _this = this;
            this.chart = chart;
            this.interactionManager = interactionManager;
            this.cursorManager = cursorManager;
            this.highlightManager = highlightManager;
            this.id = createId(this);
            this.group = new Group({ name: 'legend', layer: true, zIndex: Layers.LEGEND_ZINDEX });
            this.itemSelection = Selection.select(this.group).selectAll();
            this.oldSize = [0, 0];
            this.pages = [];
            this.maxPageSize = [0, 0];
            /** Item index to track on re-pagination, so current page updates appropriately. */
            this.paginationTrackingIndex = 0;
            this.item = new LegendItem();
            this.listeners = new LegendListeners();
            this.truncatedItems = new Set();
            this._data = [];
            this._enabled = true;
            this.position = 'right';
            /** Used to constrain the width of the legend. */
            this.maxWidth = undefined;
            /** Used to constrain the height of the legend. */
            this.maxHeight = undefined;
            /** Reverse the display order of legend items if `true`. */
            this.reverseOrder = undefined;
            /**
             * Spacing between the legend and the edge of the chart's element.
             */
            this.spacing = 20;
            this.characterWidths = new Map();
            this.size = [0, 0];
            this._visible = true;
            this.item.marker.parent = this;
            this.pagination = new Pagination(function (type) { return _this.chart.update(type); }, function (page) { return _this.updatePageNumber(page); }, this.interactionManager, this.cursorManager);
            this.pagination.attachPagination(this.group);
            this.item.marker.parent = this;
            this.interactionManager.addListener('click', function (e) { return _this.checkLegendClick(e); });
            this.interactionManager.addListener('hover', function (e) { return _this.handleLegendMouseMove(e); });
        }
        Object.defineProperty(Legend.prototype, "translationX", {
            get: function () {
                return this.group.translationX;
            },
            set: function (value) {
                this.group.translationX = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Legend.prototype, "translationY", {
            get: function () {
                return this.group.translationY;
            },
            set: function (value) {
                this.group.translationY = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Legend.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                this._data = value;
                this.updateGroupVisibility();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Legend.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            set: function (value) {
                this._enabled = value;
                this.updateGroupVisibility();
            },
            enumerable: false,
            configurable: true
        });
        Legend.prototype.getOrientation = function () {
            if (this.orientation !== undefined) {
                return this.orientation;
            }
            switch (this.position) {
                case 'right':
                case 'left':
                    return 'vertical';
                case 'bottom':
                case 'top':
                    return 'horizontal';
            }
        };
        Legend.prototype.onMarkerShapeChange = function () {
            this.itemSelection = this.itemSelection.setData([]);
            this.itemSelection.exit.remove();
            this.group.markDirty(this.group, RedrawType.MINOR);
        };
        Legend.prototype.getCharacterWidths = function (font) {
            var characterWidths = this.characterWidths;
            if (characterWidths.has(font)) {
                return characterWidths.get(font);
            }
            var cw = {
                '...': HdpiCanvas.getTextSize('...', font).width,
            };
            characterWidths.set(font, cw);
            return cw;
        };
        Object.defineProperty(Legend.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.updateGroupVisibility();
            },
            enumerable: false,
            configurable: true
        });
        Legend.prototype.updateGroupVisibility = function () {
            this.group.visible = this.enabled && this.visible && this.data.length > 0;
        };
        Legend.prototype.attachLegend = function (node) {
            node.append(this.group);
        };
        /**
         * The method is given the desired size of the legend, which only serves as a hint.
         * The vertically oriented legend will take as much horizontal space as needed, but will
         * respect the height constraints, and the horizontal legend will take as much vertical
         * space as needed in an attempt not to exceed the given width.
         * After the layout is done, the {@link size} will contain the actual size of the legend.
         * If the actual size is not the same as the previous actual size, the legend will fire
         * the 'layoutChange' event to communicate that another layout is needed, and the above
         * process should be repeated.
         * @param width
         * @param height
         */
        Legend.prototype.performLayout = function (width, height) {
            var _this = this;
            var _a = this.item, paddingX = _a.paddingX, paddingY = _a.paddingY, label = _a.label, maxWidth = _a.maxWidth, _b = _a.marker, markerSize = _b.size, markerPadding = _b.padding, markerShape = _b.shape, _c = _a.label, _d = _c.maxLength, maxLength = _d === void 0 ? Infinity : _d, fontStyle = _c.fontStyle, fontWeight = _c.fontWeight, fontSize = _c.fontSize, fontFamily = _c.fontFamily;
            var data = __spread$d(this.data);
            if (this.reverseOrder) {
                data.reverse();
            }
            var updateSelection = this.itemSelection.setData(data, function (_, datum) {
                var Marker = getMarker(markerShape || datum.marker.shape);
                return datum.id + '-' + datum.itemId + '-' + Marker.name;
            });
            updateSelection.exit.remove();
            var enterSelection = updateSelection.enter.append(MarkerLabel).each(function (node, datum) {
                var Marker = getMarker(markerShape || datum.marker.shape);
                node.marker = new Marker();
            });
            var itemSelection = (this.itemSelection = updateSelection.merge(enterSelection));
            // Update properties that affect the size of the legend items and measure them.
            var bboxes = [];
            var font = label.getFont();
            var ellipsis = "...";
            var itemMaxWidthPercentage = 0.8;
            var maxItemWidth = maxWidth !== null && maxWidth !== void 0 ? maxWidth : width * itemMaxWidthPercentage;
            var paddedMarkerWidth = markerSize + markerPadding + paddingX;
            itemSelection.each(function (markerLabel, datum) {
                var e_1, _a;
                var _b;
                var text = (_b = datum.label.text) !== null && _b !== void 0 ? _b : '<unknown>';
                markerLabel.markerSize = markerSize;
                markerLabel.spacing = markerPadding;
                markerLabel.fontStyle = fontStyle;
                markerLabel.fontWeight = fontWeight;
                markerLabel.fontSize = fontSize;
                markerLabel.fontFamily = fontFamily;
                var textChars = text.split('');
                var addEllipsis = false;
                if (text.length > maxLength) {
                    text = "" + text.substring(0, maxLength);
                    addEllipsis = true;
                }
                var labelWidth = Math.floor(paddedMarkerWidth + HdpiCanvas.getTextSize(text, font).width);
                if (labelWidth > maxItemWidth) {
                    var truncatedText = '';
                    var characterWidths = _this.getCharacterWidths(font);
                    var cumulativeWidth = paddedMarkerWidth + characterWidths[ellipsis];
                    try {
                        for (var textChars_1 = __values$e(textChars), textChars_1_1 = textChars_1.next(); !textChars_1_1.done; textChars_1_1 = textChars_1.next()) {
                            var char = textChars_1_1.value;
                            if (!characterWidths[char]) {
                                characterWidths[char] = HdpiCanvas.getTextSize(char, font).width;
                            }
                            cumulativeWidth += characterWidths[char];
                            if (cumulativeWidth > maxItemWidth) {
                                break;
                            }
                            truncatedText += char;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (textChars_1_1 && !textChars_1_1.done && (_a = textChars_1.return)) _a.call(textChars_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    text = truncatedText;
                    addEllipsis = true;
                }
                var id = datum.itemId || datum.id;
                if (addEllipsis) {
                    text += ellipsis;
                    _this.truncatedItems.add(id);
                }
                else {
                    _this.truncatedItems.delete(id);
                }
                markerLabel.text = text;
                bboxes.push(markerLabel.computeBBox());
            });
            width = Math.max(1, width);
            height = Math.max(1, height);
            if (!isFinite(width)) {
                return false;
            }
            var size = this.size;
            var oldSize = this.oldSize;
            size[0] = width;
            size[1] = height;
            if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {
                oldSize[0] = size[0];
                oldSize[1] = size[1];
            }
            var _e = this.updatePagination(bboxes, width, height), pages = _e.pages, maxPageHeight = _e.maxPageHeight, maxPageWidth = _e.maxPageWidth;
            this.pages = pages;
            this.maxPageSize = [maxPageWidth - paddingX, maxPageHeight - paddingY];
            var pageNumber = this.pagination.currentPage;
            var page = this.pages[pageNumber];
            if (this.pages.length < 1 || !page) {
                this.visible = false;
                return;
            }
            this.visible = true;
            // Position legend items
            this.updatePositions(pageNumber);
            // Update legend item properties that don't affect the layout.
            this.update();
        };
        Legend.prototype.updatePagination = function (bboxes, width, height) {
            var _a = this.item, itemPaddingX = _a.paddingX, itemPaddingY = _a.paddingY;
            var orientation = this.getOrientation();
            var verticalOrientation = orientation === 'vertical';
            this.pagination.orientation = orientation;
            this.pagination.translationX = 0;
            this.pagination.translationY = 0;
            var paginationBBox = this.pagination.computeBBox();
            var lastPassPaginationBBox = new BBox(0, 0, 0, 0);
            var pages = [];
            var maxPageWidth = 0;
            var maxPageHeight = 0;
            var count = 0;
            var trackingIndex = Math.min(this.paginationTrackingIndex, bboxes.length);
            var stableOutput = function (lastPassPaginationBBox) {
                var width = lastPassPaginationBBox.width, height = lastPassPaginationBBox.height;
                return width === paginationBBox.width && height === paginationBBox.height;
            };
            var forceResult = this.maxWidth !== undefined || this.maxHeight !== undefined;
            do {
                if (count++ > 10) {
                    console.warn('AG Charts - unable to find stable legend layout.');
                    break;
                }
                paginationBBox = lastPassPaginationBBox;
                var maxWidth = width - (verticalOrientation ? 0 : paginationBBox.width);
                var maxHeight = height - (verticalOrientation ? paginationBBox.height : 0);
                var layout = gridLayout({
                    orientation: orientation,
                    bboxes: bboxes,
                    maxHeight: maxHeight,
                    maxWidth: maxWidth,
                    itemPaddingY: itemPaddingY,
                    itemPaddingX: itemPaddingX,
                    forceResult: forceResult,
                });
                if (layout) {
                    pages = layout.pages;
                    maxPageWidth = layout.maxPageWidth;
                    maxPageHeight = layout.maxPageHeight;
                }
                var totalPages = pages.length;
                this.pagination.visible = totalPages > 1;
                this.pagination.totalPages = totalPages;
                this.pagination.update();
                lastPassPaginationBBox = this.pagination.computeBBox();
                if (!this.pagination.visible) {
                    break;
                }
            } while (!stableOutput(lastPassPaginationBBox));
            var newCurrentPage = pages.findIndex(function (p) { return p.endIndex >= trackingIndex; });
            this.pagination.currentPage = Math.min(Math.max(newCurrentPage, 0), pages.length - 1);
            var paginationComponentPadding = 8;
            var legendItemsWidth = maxPageWidth - itemPaddingX;
            var legendItemsHeight = maxPageHeight - itemPaddingY;
            this.pagination.translationX = verticalOrientation
                ? 0
                : -paginationBBox.x + legendItemsWidth + paginationComponentPadding;
            this.pagination.translationY =
                -paginationBBox.y -
                    this.item.marker.size / 2 +
                    (verticalOrientation
                        ? legendItemsHeight + paginationComponentPadding
                        : (legendItemsHeight - paginationBBox.height) / 2);
            this.pagination.update();
            this.pagination.updateMarkers();
            return {
                maxPageHeight: maxPageHeight,
                maxPageWidth: maxPageWidth,
                pages: pages,
            };
        };
        Legend.prototype.updatePositions = function (pageNumber) {
            if (pageNumber === void 0) { pageNumber = 0; }
            var _a = this, paddingY = _a.item.paddingY, itemSelection = _a.itemSelection, pages = _a.pages;
            if (pages.length < 1 || !pages[pageNumber]) {
                return;
            }
            var _b = pages[pageNumber], columns = _b.columns, visibleStart = _b.startIndex, visibleEnd = _b.endIndex;
            // Position legend items using the layout computed above.
            var x = 0;
            var y = 0;
            var columnCount = columns.length;
            var rowCount = columns[0].indices.length;
            var horizontal = this.getOrientation() === 'horizontal';
            var itemHeight = columns[0].bboxes[0].height + paddingY;
            var rowSumColumnWidths = [];
            itemSelection.each(function (markerLabel, _, i) {
                var _a, _b;
                if (i < visibleStart || i > visibleEnd) {
                    markerLabel.visible = false;
                    return;
                }
                var pageIndex = i - visibleStart;
                var columnIndex = 0;
                var rowIndex = 0;
                if (horizontal) {
                    columnIndex = pageIndex % columnCount;
                    rowIndex = Math.floor(pageIndex / columnCount);
                }
                else {
                    columnIndex = Math.floor(pageIndex / rowCount);
                    rowIndex = pageIndex % rowCount;
                }
                markerLabel.visible = true;
                var column = columns[columnIndex];
                if (!column) {
                    return;
                }
                y = itemHeight * rowIndex;
                x = (_a = rowSumColumnWidths[rowIndex]) !== null && _a !== void 0 ? _a : 0;
                rowSumColumnWidths[rowIndex] = ((_b = rowSumColumnWidths[rowIndex]) !== null && _b !== void 0 ? _b : 0) + column.columnWidth;
                // Round off for pixel grid alignment to work properly.
                markerLabel.translationX = Math.floor(x);
                markerLabel.translationY = Math.floor(y);
            });
        };
        Legend.prototype.updatePageNumber = function (pageNumber) {
            var pages = this.pages;
            // Track an item on the page in re-pagination cases (e.g. resize).
            var _a = pages[pageNumber], startIndex = _a.startIndex, endIndex = _a.endIndex;
            if (startIndex === 0) {
                // Stay on first page on pagination update.
                this.paginationTrackingIndex = 0;
            }
            else if (pageNumber === pages.length - 1) {
                // Stay on last page on pagination update.
                this.paginationTrackingIndex = endIndex;
            }
            else {
                // Track the middle item on the page).
                this.paginationTrackingIndex = Math.floor((startIndex + endIndex) / 2);
            }
            this.pagination.update();
            this.pagination.updateMarkers();
            this.updatePositions(pageNumber);
            this.chart.update(ChartUpdateType.SCENE_RENDER);
        };
        Legend.prototype.update = function () {
            var _a = this.item, strokeWidth = _a.marker.strokeWidth, color = _a.label.color;
            this.itemSelection.each(function (markerLabel, datum) {
                var marker = datum.marker;
                markerLabel.markerFill = marker.fill;
                markerLabel.markerStroke = marker.stroke;
                markerLabel.markerStrokeWidth = strokeWidth;
                markerLabel.markerFillOpacity = marker.fillOpacity;
                markerLabel.markerStrokeOpacity = marker.strokeOpacity;
                markerLabel.opacity = datum.enabled ? 1 : 0.5;
                markerLabel.color = color;
            });
        };
        Legend.prototype.getDatumForPoint = function (x, y) {
            var e_2, _a;
            var visibleChildBBoxes = [];
            var closestLeftTop = { dist: Infinity, datum: undefined };
            try {
                for (var _b = __values$e(this.group.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    if (!child.visible)
                        continue;
                    if (!(child instanceof MarkerLabel))
                        continue;
                    var childBBox = child.computeBBox();
                    childBBox.grow(this.item.paddingX / 2, 'horizontal');
                    childBBox.grow(this.item.paddingY / 2, 'vertical');
                    if (childBBox.containsPoint(x, y)) {
                        return child.datum;
                    }
                    var distX = x - childBBox.x - this.item.paddingX / 2;
                    var distY = y - childBBox.y - this.item.paddingY / 2;
                    var dist = Math.pow(distX, 2) + Math.pow(distY, 2);
                    var toTheLeftTop = distX >= 0 && distY >= 0;
                    if (toTheLeftTop && dist < closestLeftTop.dist) {
                        closestLeftTop.dist = dist;
                        closestLeftTop.datum = child.datum;
                    }
                    visibleChildBBoxes.push(childBBox);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var pageBBox = BBox.merge(visibleChildBBoxes);
            if (!pageBBox.containsPoint(x, y)) {
                // We're not in-between legend items.
                return undefined;
            }
            // Fallback to returning closest match to the left/up.
            return closestLeftTop.datum;
        };
        Legend.prototype.computeBBox = function () {
            return this.group.computeBBox();
        };
        Legend.prototype.computePagedBBox = function () {
            var actualBBox = this.group.computeBBox();
            if (this.pages.length <= 1) {
                return actualBBox;
            }
            var _a = __read$m(this.maxPageSize, 2), maxPageWidth = _a[0], maxPageHeight = _a[1];
            actualBBox.height = Math.max(maxPageHeight, actualBBox.height);
            actualBBox.width = Math.max(maxPageWidth, actualBBox.width);
            return actualBBox;
        };
        Legend.prototype.checkLegendClick = function (event) {
            var _a = this, legendItemClick = _a.listeners.legendItemClick, chart = _a.chart, highlightManager = _a.highlightManager, toggleSeriesVisible = _a.item.toggleSeriesVisible;
            var datum = this.getDatumForPoint(event.offsetX, event.offsetY);
            if (!datum) {
                return;
            }
            var id = datum.id, itemId = datum.itemId, enabled = datum.enabled;
            var series = chart.series.find(function (s) { return s.id === id; });
            if (!series) {
                return;
            }
            event.consume();
            var newEnabled = enabled;
            if (toggleSeriesVisible) {
                newEnabled = !enabled;
                series.toggleSeriesItem(itemId, newEnabled);
            }
            if (!newEnabled) {
                chart.togglePointer(false);
                highlightManager.updateHighlight(this.id);
            }
            else {
                highlightManager.updateHighlight(this.id, {
                    series: series,
                    itemId: itemId,
                    datum: undefined,
                });
            }
            this.chart.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });
            legendItemClick({ enabled: newEnabled, itemId: itemId, seriesId: series.id });
        };
        Legend.prototype.handleLegendMouseMove = function (event) {
            var _a = this, enabled = _a.enabled, toggleSeriesVisible = _a.item.toggleSeriesVisible, listeners = _a.listeners;
            if (!enabled) {
                return;
            }
            var legendBBox = this.computeBBox();
            var offsetX = event.offsetX, offsetY = event.offsetY;
            var pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);
            if (!pointerInsideLegend) {
                this.cursorManager.updateCursor(this.id);
                this.highlightManager.updateHighlight(this.id);
                if (this.chart.element.title) {
                    this.chart.element.title = '';
                }
                return;
            }
            // Prevent other handlers from consuming this event if it's generated inside the legend
            // boundaries.
            event.consume();
            var datum = this.getDatumForPoint(offsetX, offsetY);
            var pointerOverLegendDatum = pointerInsideLegend && datum !== undefined;
            if (!pointerOverLegendDatum) {
                this.cursorManager.updateCursor(this.id);
                this.highlightManager.updateHighlight(this.id);
                return;
            }
            if (datum && this.truncatedItems.has(datum.itemId || datum.id)) {
                this.chart.element.title = datum.label.text;
            }
            else {
                this.chart.element.title = '';
            }
            if (toggleSeriesVisible || listeners.legendItemClick !== NO_OP_LISTENER) {
                this.cursorManager.updateCursor(this.id, 'pointer');
            }
            var series = datum ? this.chart.series.find(function (series) { return series.id === (datum === null || datum === void 0 ? void 0 : datum.id); }) : undefined;
            if ((datum === null || datum === void 0 ? void 0 : datum.enabled) && series) {
                this.highlightManager.updateHighlight(this.id, {
                    series: series,
                    itemId: datum === null || datum === void 0 ? void 0 : datum.itemId,
                    datum: undefined,
                });
            }
            else {
                this.highlightManager.updateHighlight(this.id);
            }
        };
        Legend.className = 'Legend';
        __decorate$o([
            Validate(BOOLEAN)
        ], Legend.prototype, "_enabled", void 0);
        __decorate$o([
            Validate(POSITION)
        ], Legend.prototype, "position", void 0);
        __decorate$o([
            Validate(OPT_NUMBER(0))
        ], Legend.prototype, "maxWidth", void 0);
        __decorate$o([
            Validate(OPT_NUMBER(0))
        ], Legend.prototype, "maxHeight", void 0);
        __decorate$o([
            Validate(OPT_BOOLEAN)
        ], Legend.prototype, "reverseOrder", void 0);
        __decorate$o([
            Validate(OPT_ORIENTATION)
        ], Legend.prototype, "orientation", void 0);
        __decorate$o([
            Validate(NUMBER(0))
        ], Legend.prototype, "spacing", void 0);
        return Legend;
    }());

    var __values$d = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var SizeMonitor = /** @class */ (function () {
        function SizeMonitor() {
        }
        SizeMonitor.init = function () {
            var _this = this;
            var NativeResizeObserver = window.ResizeObserver;
            if (NativeResizeObserver) {
                this.resizeObserver = new NativeResizeObserver(function (entries) {
                    var e_1, _a;
                    try {
                        for (var entries_1 = __values$d(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                            var entry = entries_1_1.value;
                            var _b = entry.contentRect, width = _b.width, height = _b.height;
                            _this.checkSize(_this.elements.get(entry.target), entry.target, width, height);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                });
            }
            else {
                // polyfill (more reliable even in browsers that support ResizeObserver)
                var step = function () {
                    _this.elements.forEach(function (entry, element) {
                        _this.checkClientSize(element, entry);
                    });
                };
                window.setInterval(step, 100);
            }
            this.ready = true;
        };
        SizeMonitor.checkSize = function (entry, element, width, height) {
            if (entry) {
                if (!entry.size || width !== entry.size.width || height !== entry.size.height) {
                    entry.size = { width: width, height: height };
                    entry.cb(entry.size, element);
                }
            }
        };
        // Only a single callback is supported.
        SizeMonitor.observe = function (element, cb) {
            if (!this.ready) {
                this.init();
            }
            this.unobserve(element);
            if (this.resizeObserver) {
                this.resizeObserver.observe(element);
            }
            this.elements.set(element, { cb: cb });
            // Ensure first size callback happens synchronously.
            this.checkClientSize(element, { cb: cb });
        };
        SizeMonitor.unobserve = function (element) {
            if (this.resizeObserver) {
                this.resizeObserver.unobserve(element);
            }
            this.elements.delete(element);
        };
        SizeMonitor.checkClientSize = function (element, entry) {
            var width = element.clientWidth ? element.clientWidth : 0;
            var height = element.clientHeight ? element.clientHeight : 0;
            this.checkSize(entry, element, width, height);
        };
        SizeMonitor.elements = new Map();
        SizeMonitor.ready = false;
        return SizeMonitor;
    }());

    var __awaiter$e = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$e = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    /**
     * Wrap a function in debouncing trigger function. A requestAnimationFrame() is scheduled
     * after the first schedule() call, and subsequent schedule() calls will be ignored until the
     * animation callback executes.
     */
    function debouncedAnimationFrame(cb) {
        return buildScheduler(function (cb) { return requestAnimationFrame(cb); }, cb);
    }
    function debouncedCallback(cb) {
        return buildScheduler(function (cb) { return setTimeout(cb, 0); }, cb);
    }
    function buildScheduler(scheduleFn, cb) {
        var scheduleCount = 0;
        var promiseRunning = false;
        var awaitingPromise;
        var awaitingDone;
        var busy = function () {
            return promiseRunning;
        };
        var done = function () {
            promiseRunning = false;
            awaitingDone === null || awaitingDone === void 0 ? void 0 : awaitingDone();
            awaitingDone = undefined;
            awaitingPromise = undefined;
            if (scheduleCount > 0) {
                scheduleFn(scheduleCb);
            }
        };
        var scheduleCb = function () {
            var count = scheduleCount;
            scheduleCount = 0;
            promiseRunning = true;
            var maybePromise = cb({ count: count });
            if (!maybePromise) {
                done();
                return;
            }
            maybePromise.then(done).catch(done);
        };
        return {
            schedule: function () {
                if (scheduleCount === 0 && !busy()) {
                    scheduleFn(scheduleCb);
                }
                scheduleCount++;
            },
            await: function () {
                return __awaiter$e(this, void 0, void 0, function () {
                    return __generator$e(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!busy()) {
                                    return [2 /*return*/];
                                }
                                if (!awaitingPromise) {
                                    awaitingPromise = new Promise(function (resolve) {
                                        awaitingDone = resolve;
                                    });
                                }
                                _a.label = 1;
                            case 1:
                                if (!busy()) return [3 /*break*/, 3];
                                return [4 /*yield*/, awaitingPromise];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 1];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            },
        };
    }

    var __extends$B = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$n = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MARKER_SHAPES = ['circle', 'cross', 'diamond', 'heart', 'plus', 'square', 'triangle'];
    var MARKER_SHAPE = predicateWithMessage(function (v) { return MARKER_SHAPES.includes(v) || Object.getPrototypeOf(v) === Marker; }, "expecting a marker shape keyword such as 'circle', 'diamond' or 'square' or an object extending the Marker class");
    var SeriesMarker = /** @class */ (function (_super) {
        __extends$B(SeriesMarker, _super);
        function SeriesMarker() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.enabled = true;
            /**
             * One of the predefined marker names, or a marker constructor function (for user-defined markers).
             * A series will create one marker instance per data point.
             */
            _this.shape = Circle;
            _this.size = 6;
            /**
             * In case a series has the `sizeKey` set, the `sizeKey` values along with the `size` and `maxSize` configs
             * will be used to determine the size of the marker. All values will be mapped to a marker size
             * within the `[size, maxSize]` range, where the largest values will correspond to the `maxSize`
             * and the lowest to the `size`.
             */
            _this.maxSize = 30;
            _this.domain = undefined;
            _this.fill = undefined;
            _this.stroke = undefined;
            _this.strokeWidth = 1;
            _this.fillOpacity = undefined;
            _this.strokeOpacity = undefined;
            return _this;
        }
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: BOOLEAN,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "enabled", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: MARKER_SHAPE,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "shape", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: NUMBER(0),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "size", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: NUMBER(0),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "maxSize", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: OPT_NUMBER_ARRAY,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "domain", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: OPT_COLOR_STRING,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "fill", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: OPT_COLOR_STRING,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "stroke", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: OPT_NUMBER(0),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "strokeWidth", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: OPT_NUMBER(0, 1),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "fillOpacity", void 0);
        __decorate$n([
            ValidateAndChangeDetection({
                validatePredicate: OPT_NUMBER(0, 1),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], SeriesMarker.prototype, "strokeOpacity", void 0);
        return SeriesMarker;
    }(ChangeDetectable));

    var __read$l = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    function clamp(x, min, max) {
        return Math.max(min, Math.min(max, x));
    }
    /**
     * Maps a discrete domain to a continuous numeric range.
     * See https://github.com/d3/d3-scale#band-scales for more info.
     */
    var BandScale = /** @class */ (function () {
        function BandScale() {
            this.type = 'band';
            this.cache = null;
            this.cacheProps = ['_domain', 'range', '_paddingInner', '_paddingOuter', 'round'];
            /**
             * Maps datum to its index in the {@link domain} array.
             * Used to check for duplicate datums (not allowed).
             */
            this.index = new Map();
            /**
             * The output range values for datum at each index.
             */
            this.ordinalRange = [];
            /**
             * Contains unique datums only. Since `{}` is used in place of `Map`
             * for IE11 compatibility, the datums are converted `toString` before
             * the uniqueness check.
             */
            this._domain = [];
            this.range = [0, 1];
            this._bandwidth = 1;
            this._rawBandwidth = 1;
            /**
             * The ratio of the range that is reserved for space between bands.
             */
            this._paddingInner = 0;
            /**
             * The ratio of the range that is reserved for space before the first
             * and after the last band.
             */
            this._paddingOuter = 0;
            this.round = false;
        }
        BandScale.prototype.didChange = function () {
            var _this = this;
            var cache = this.cache;
            var didChange = !cache || this.cacheProps.some(function (p) { return _this[p] !== cache[p]; });
            if (didChange) {
                this.cache = {};
                this.cacheProps.forEach(function (p) { return (_this.cache[p] = _this[p]); });
                return true;
            }
            return false;
        };
        BandScale.prototype.refresh = function () {
            if (this.didChange()) {
                this.update();
            }
        };
        Object.defineProperty(BandScale.prototype, "domain", {
            get: function () {
                return this._domain;
            },
            set: function (values) {
                var domain = [];
                this.index = new Map();
                var index = this.index;
                // In case one wants to have duplicate domain values, for example, two 'Italy' categories,
                // one should use objects rather than strings for domain values like so:
                // { toString: () => 'Italy' }
                // { toString: () => 'Italy' }
                values.forEach(function (value) {
                    if (index.get(value) === undefined) {
                        index.set(value, domain.push(value) - 1);
                    }
                });
                this._domain = domain;
            },
            enumerable: false,
            configurable: true
        });
        BandScale.prototype.ticks = function () {
            this.refresh();
            return this._domain;
        };
        BandScale.prototype.convert = function (d) {
            this.refresh();
            var i = this.index.get(d);
            if (i === undefined) {
                return NaN;
            }
            var r = this.ordinalRange[i];
            if (r === undefined) {
                return NaN;
            }
            return r;
        };
        Object.defineProperty(BandScale.prototype, "bandwidth", {
            get: function () {
                this.refresh();
                return this._bandwidth;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BandScale.prototype, "rawBandwidth", {
            get: function () {
                this.refresh();
                return this._rawBandwidth;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BandScale.prototype, "padding", {
            get: function () {
                return this._paddingInner;
            },
            set: function (value) {
                value = clamp(value, 0, 1);
                this._paddingInner = value;
                this._paddingOuter = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BandScale.prototype, "paddingInner", {
            get: function () {
                return this._paddingInner;
            },
            set: function (value) {
                this._paddingInner = clamp(value, 0, 1);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BandScale.prototype, "paddingOuter", {
            get: function () {
                return this._paddingOuter;
            },
            set: function (value) {
                this._paddingOuter = clamp(value, 0, 1);
            },
            enumerable: false,
            configurable: true
        });
        BandScale.prototype.update = function () {
            var count = this._domain.length;
            if (count === 0) {
                return;
            }
            var round = this.round;
            var paddingInner = this._paddingInner;
            var paddingOuter = this._paddingOuter;
            var _a = __read$l(this.range, 2), r0 = _a[0], r1 = _a[1];
            var width = r1 - r0;
            var rawStep = width / Math.max(1, count + 2 * paddingOuter - paddingInner);
            var step = round ? Math.floor(rawStep) : rawStep;
            var fullBandWidth = step * (count - paddingInner);
            var x0 = r0 + (width - fullBandWidth) / 2;
            var start = round ? Math.round(x0) : x0;
            var bw = step * (1 - paddingInner);
            var bandwidth = round ? Math.round(bw) : bw;
            var rawBandwidth = rawStep * (1 - paddingInner);
            var values = [];
            for (var i = 0; i < count; i++) {
                values.push(start + step * i);
            }
            this._bandwidth = bandwidth;
            this._rawBandwidth = rawBandwidth;
            this.ordinalRange = values;
        };
        return BandScale;
    }());

    var __extends$A = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$m = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$k = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$c = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$k(arguments[i]));
        return ar;
    };
    var CategoryAxis = /** @class */ (function (_super) {
        __extends$A(CategoryAxis, _super);
        function CategoryAxis() {
            var _this = _super.call(this, new BandScale()) || this;
            _this._paddingOverrideEnabled = false;
            _this.groupPaddingInner = 0.1;
            _this.includeInvisibleDomains = true;
            return _this;
        }
        Object.defineProperty(CategoryAxis.prototype, "paddingInner", {
            get: function () {
                this._paddingOverrideEnabled = true;
                return this.scale.paddingInner;
            },
            set: function (value) {
                this._paddingOverrideEnabled = true;
                this.scale.paddingInner = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CategoryAxis.prototype, "paddingOuter", {
            get: function () {
                return this.scale.paddingOuter;
            },
            set: function (value) {
                this.scale.paddingOuter = value;
            },
            enumerable: false,
            configurable: true
        });
        CategoryAxis.prototype.normaliseDataDomain = function (d) {
            // Prevent duplicate categories.
            var valuesSet = new Set(d);
            return new (Array.bind.apply(Array, __spread$c([void 0], valuesSet.values())))();
        };
        CategoryAxis.prototype.calculateDomain = function () {
            if (!this._paddingOverrideEnabled) {
                var boundSeries = this.boundSeries;
                if (boundSeries.some(function (s) { return ['bar', 'column'].includes(s.type); })) {
                    this.scale.paddingInner = 0.2;
                    this.scale.paddingOuter = 0.3;
                }
                else {
                    this.scale.paddingInner = 1;
                    this.scale.paddingOuter = 0;
                }
            }
            return _super.prototype.calculateDomain.call(this);
        };
        CategoryAxis.className = 'CategoryAxis';
        CategoryAxis.type = 'category';
        __decorate$m([
            Validate(NUMBER(0, 1))
        ], CategoryAxis.prototype, "groupPaddingInner", void 0);
        return CategoryAxis;
    }(ChartAxis));

    var __assign$g = (undefined && undefined.__assign) || function () {
        __assign$g = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$g.apply(this, arguments);
    };
    var __read$j = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$b = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$j(arguments[i]));
        return ar;
    };
    var __values$c = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    /**
     * Performs a JSON-diff between a source and target JSON structure.
     *
     * On a per property basis, takes the target property value where:
     * - types are different.
     * - type is primitive.
     * - type is array and length or content have changed.
     *
     * Recurses for object types.
     *
     * @param source starting point for diff
     * @param target target for diff vs. source
     *
     * @returns `null` if no differences, or an object with the subset of properties that have changed.
     */
    function jsonDiff(source, target) {
        var e_1, _a;
        var sourceType = classify(source);
        var targetType = classify(target);
        if (targetType === 'array') {
            var targetArray = target;
            if (sourceType !== 'array' || source.length !== targetArray.length) {
                return __spread$b(targetArray);
            }
            if (targetArray.some(function (targetElement, i) { var _a; return jsonDiff((_a = source) === null || _a === void 0 ? void 0 : _a[i], targetElement) != null; })) {
                return __spread$b(targetArray);
            }
            return null;
        }
        if (targetType === 'primitive') {
            if (sourceType !== 'primitive') {
                return __assign$g({}, target);
            }
            if (source !== target) {
                return target;
            }
            return null;
        }
        var lhs = source || {};
        var rhs = target || {};
        var allProps = new Set(__spread$b(Object.keys(lhs), Object.keys(rhs)));
        var propsChangedCount = 0;
        var result = {};
        var _loop_1 = function (prop) {
            // Cheap-and-easy equality check.
            if (lhs[prop] === rhs[prop]) {
                return "continue";
            }
            var take = function (v) {
                result[prop] = v;
                propsChangedCount++;
            };
            var lhsType = classify(lhs[prop]);
            var rhsType = classify(rhs[prop]);
            if (lhsType !== rhsType) {
                // Types changed, just take RHS.
                take(rhs[prop]);
                return "continue";
            }
            if (rhsType === 'primitive' || rhsType === null) {
                take(rhs[prop]);
                return "continue";
            }
            if (rhsType === 'array' && lhs[prop].length !== rhs[prop].length) {
                // Arrays are different sizes, so just take target array.
                take(rhs[prop]);
                return "continue";
            }
            if (rhsType === 'class-instance') {
                // Don't try to do anything tricky with array diffs!
                take(rhs[prop]);
                return "continue";
            }
            if (rhsType === 'function' && lhs[prop] !== rhs[prop]) {
                take(rhs[prop]);
                return "continue";
            }
            var diff = jsonDiff(lhs[prop], rhs[prop]);
            if (diff !== null) {
                take(diff);
            }
        };
        try {
            for (var allProps_1 = __values$c(allProps), allProps_1_1 = allProps_1.next(); !allProps_1_1.done; allProps_1_1 = allProps_1.next()) {
                var prop = allProps_1_1.value;
                _loop_1(prop);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (allProps_1_1 && !allProps_1_1.done && (_a = allProps_1.return)) _a.call(allProps_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return propsChangedCount === 0 ? null : result;
    }
    /**
     * Special value used by `jsonMerge` to signal that a property should be removed from the merged
     * output.
     */
    var DELETE = Symbol('<delete-property>');
    var NOT_SPECIFIED = Symbol('<unspecified-property>');
    /**
     * Merge together the provide JSON object structures, with the precedence of application running
     * from higher indexes to lower indexes.
     *
     * Deep-clones all objects to avoid mutation of the inputs changing the output object. For arrays,
     * just performs a deep-clone of the entire array, no merging of elements attempted.
     *
     * @param json all json objects to merge
     * @param opts merge options
     * @param opts.avoidDeepClone contains a list of properties where deep clones should be avoided
     *
     * @returns the combination of all of the json inputs
     */
    function jsonMerge(json, opts) {
        var e_2, _a;
        var avoidDeepClone = (opts === null || opts === void 0 ? void 0 : opts.avoidDeepClone) || [];
        var jsonTypes = json.map(function (v) { return classify(v); });
        if (jsonTypes.some(function (v) { return v === 'array'; })) {
            // Clone final array.
            var finalValue = json[json.length - 1];
            if (finalValue instanceof Array) {
                return finalValue.map(function (v) {
                    var type = classify(v);
                    if (type === 'array')
                        return jsonMerge([[], v], opts);
                    if (type === 'object')
                        return jsonMerge([{}, v], opts);
                    return v;
                });
            }
            return finalValue;
        }
        var result = {};
        var props = new Set(json.map(function (v) { return (v != null ? Object.keys(v) : []); }).reduce(function (r, n) { return r.concat(n); }, []));
        var _loop_2 = function (nextProp) {
            var values = json
                .map(function (j) { return (j != null && nextProp in j ? j[nextProp] : NOT_SPECIFIED); })
                .filter(function (v) { return v !== NOT_SPECIFIED; });
            if (values.length === 0) {
                return "continue";
            }
            var lastValue = values[values.length - 1];
            if (lastValue === DELETE) {
                return "continue";
            }
            var types = values.map(function (v) { return classify(v); });
            var type = types[0];
            if (types.some(function (t) { return t !== type; })) {
                // Short-circuit if mismatching types.
                result[nextProp] = lastValue;
                return "continue";
            }
            if ((type === 'array' || type === 'object') && !avoidDeepClone.includes(nextProp)) {
                result[nextProp] = jsonMerge(values, opts);
            }
            else if (type === 'array') {
                // Arrays need to be shallow copied to avoid external mutation and allow jsonDiff to
                // detect changes.
                result[nextProp] = __spread$b(lastValue);
            }
            else {
                // Just directly assign/overwrite.
                result[nextProp] = lastValue;
            }
        };
        try {
            for (var props_1 = __values$c(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                var nextProp = props_1_1.value;
                _loop_2(nextProp);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    }
    /**
     * Recursively apply a JSON object into a class-hierarchy, optionally instantiating certain classes
     * by property name.
     *
     * @param target to apply source JSON properties into
     * @param source to be applied
     * @param params.path path for logging/error purposes, to aid with pinpointing problems
     * @param params.matcherPath path for pattern matching, to lookup allowedTypes override.
     * @param params.skip property names to skip from the source
     * @param params.constructors dictionary of property name to class constructors for properties that
     *                            require object construction
     * @param params.allowedTypes overrides by path for allowed property types
     */
    function jsonApply(target, source, params) {
        var _a;
        if (params === void 0) { params = {}; }
        var _b = params.path, path = _b === void 0 ? undefined : _b, _c = params.matcherPath, matcherPath = _c === void 0 ? path ? path.replace(/(\[[0-9+]+\])/i, '[]') : undefined : _c, _d = params.skip, skip = _d === void 0 ? [] : _d, _e = params.constructors, constructors = _e === void 0 ? {} : _e, _f = params.allowedTypes, allowedTypes = _f === void 0 ? {} : _f;
        if (target == null) {
            throw new Error("AG Charts - target is uninitialised: " + (path || '<root>'));
        }
        if (source == null) {
            return target;
        }
        var targetType = classify(target);
        var _loop_3 = function (property) {
            var propertyMatcherPath = "" + (matcherPath ? matcherPath + '.' : '') + property;
            if (skip.indexOf(propertyMatcherPath) >= 0) {
                return "continue";
            }
            var newValue = source[property];
            var propertyPath = "" + (path ? path + '.' : '') + property;
            var targetAny = target;
            var targetClass = targetAny.constructor;
            var currentValue = targetAny[property];
            var ctr = (_a = constructors[property]) !== null && _a !== void 0 ? _a : constructors[propertyMatcherPath];
            try {
                var currentValueType = classify(currentValue);
                var newValueType = classify(newValue);
                if (targetType === 'class-instance' && !(property in target || targetAny.hasOwnProperty(property))) {
                    console.warn("AG Charts - unable to set [" + propertyPath + "] in " + (targetClass === null || targetClass === void 0 ? void 0 : targetClass.name) + " - property is unknown");
                    return "continue";
                }
                var allowableTypes = allowedTypes[propertyMatcherPath] || [currentValueType];
                if (currentValueType === 'class-instance' && newValueType === 'object') {
                    // Allowed, this is the common case! - do not error.
                }
                else if (currentValueType != null && newValueType != null && !allowableTypes.includes(newValueType)) {
                    console.warn("AG Charts - unable to set [" + propertyPath + "] in " + (targetClass === null || targetClass === void 0 ? void 0 : targetClass.name) + " - can't apply type of [" + newValueType + "], allowed types are: [" + allowableTypes + "]");
                    return "continue";
                }
                if (newValueType === 'array') {
                    ctr = ctr !== null && ctr !== void 0 ? ctr : constructors[propertyMatcherPath + "[]"];
                    if (ctr != null) {
                        var newValueArray = newValue;
                        targetAny[property] = newValueArray.map(function (v) {
                            return jsonApply(new ctr(), v, __assign$g(__assign$g({}, params), { path: propertyPath, matcherPath: propertyMatcherPath + '[]' }));
                        });
                    }
                    else {
                        targetAny[property] = newValue;
                    }
                }
                else if (newValueType === 'class-instance') {
                    targetAny[property] = newValue;
                }
                else if (newValueType === 'object') {
                    if (currentValue != null) {
                        jsonApply(currentValue, newValue, __assign$g(__assign$g({}, params), { path: propertyPath, matcherPath: propertyMatcherPath }));
                    }
                    else if (ctr != null) {
                        targetAny[property] = jsonApply(new ctr(), newValue, __assign$g(__assign$g({}, params), { path: propertyPath, matcherPath: propertyMatcherPath }));
                    }
                    else {
                        targetAny[property] = newValue;
                    }
                }
                else {
                    targetAny[property] = newValue;
                }
            }
            catch (error) {
                var err = error;
                console.warn("AG Charts - unable to set [" + propertyPath + "] in [" + (targetClass === null || targetClass === void 0 ? void 0 : targetClass.name) + "]; nested error is: " + err.message);
                return "continue";
            }
        };
        for (var property in source) {
            _loop_3(property);
        }
        return target;
    }
    /**
     * Walk the given JSON object graphs, invoking the visit() callback for every object encountered.
     * Arrays are descended into without a callback, however their elements will have the visit()
     * callback invoked if they are objects.
     *
     * @param json to traverse
     * @param visit callback for each non-primitive and non-array object found
     * @param opts.skip property names to skip when walking
     * @param jsons to traverse in parallel
     */
    function jsonWalk(json, visit, opts) {
        var jsons = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            jsons[_i - 3] = arguments[_i];
        }
        var jsonType = classify(json);
        var skip = opts.skip || [];
        if (jsonType === 'array') {
            json.forEach(function (element, index) {
                jsonWalk.apply(void 0, __spread$b([element, visit, opts], jsons === null || jsons === void 0 ? void 0 : jsons.map(function (o) { return o === null || o === void 0 ? void 0 : o[index]; })));
            });
            return;
        }
        else if (jsonType !== 'object') {
            return;
        }
        visit.apply(void 0, __spread$b([jsonType, json], jsons));
        var _loop_4 = function (property) {
            if (skip.indexOf(property) >= 0) {
                return "continue";
            }
            var value = json[property];
            var otherValues = jsons === null || jsons === void 0 ? void 0 : jsons.map(function (o) { return o === null || o === void 0 ? void 0 : o[property]; });
            var valueType = classify(value);
            if (valueType === 'object' || valueType === 'array') {
                jsonWalk.apply(void 0, __spread$b([value, visit, opts], otherValues));
            }
        };
        for (var property in json) {
            _loop_4(property);
        }
    }
    /**
     * Classify the type of a value to assist with handling for merge purposes.
     */
    function classify(value) {
        if (value == null) {
            return null;
        }
        else if (value instanceof HTMLElement) {
            return 'primitive';
        }
        else if (value instanceof Array) {
            return 'array';
        }
        else if (value instanceof Date) {
            return 'primitive';
        }
        else if (typeof value === 'object' && value.constructor === Object) {
            return 'object';
        }
        else if (typeof value === 'function') {
            return 'function';
        }
        else if (typeof value === 'object' && value.constructor != null) {
            return 'class-instance';
        }
        return 'primitive';
    }

    var __extends$z = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$l = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$d = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$d = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$i = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$a = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$i(arguments[i]));
        return ar;
    };
    var __values$b = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var CartesianSeriesNodeClickEvent = /** @class */ (function (_super) {
        __extends$z(CartesianSeriesNodeClickEvent, _super);
        function CartesianSeriesNodeClickEvent(xKey, yKey, nativeEvent, datum, series) {
            var _this = _super.call(this, nativeEvent, datum, series) || this;
            _this.xKey = xKey;
            _this.yKey = yKey;
            return _this;
        }
        return CartesianSeriesNodeClickEvent;
    }(SeriesNodeClickEvent));
    var CartesianSeries = /** @class */ (function (_super) {
        __extends$z(CartesianSeries, _super);
        function CartesianSeries(opts) {
            var _a;
            if (opts === void 0) { opts = {}; }
            var _this = _super.call(this, { useSeriesGroupLayer: true, pickModes: opts.pickModes }) || this;
            _this._contextNodeData = [];
            _this.nodeDataDependencies = {};
            _this.highlightSelection = Selection.select(_this.highlightNode).selectAll();
            _this.highlightLabelSelection = Selection.select(_this.highlightLabel).selectAll();
            _this.subGroups = [];
            _this.subGroupId = 0;
            /**
             * The assumption is that the values will be reset (to `true`)
             * in the {@link yKeys} setter.
             */
            _this.seriesItemEnabled = new Map();
            _this.directionKeys = (_a = {},
                _a[ChartAxisDirection.X] = ['xKey'],
                _a[ChartAxisDirection.Y] = ['yKey'],
                _a);
            var _b = opts.pathsPerSeries, pathsPerSeries = _b === void 0 ? 1 : _b, _c = opts.hasMarkers, hasMarkers = _c === void 0 ? false : _c, _d = opts.pathsZIndexSubOrderOffset, pathsZIndexSubOrderOffset = _d === void 0 ? [] : _d, _e = opts.renderLayerPerSubSeries, renderLayerPerSubSeries = _e === void 0 ? true : _e;
            _this.opts = { pathsPerSeries: pathsPerSeries, hasMarkers: hasMarkers, pathsZIndexSubOrderOffset: pathsZIndexSubOrderOffset, renderLayerPerSubSeries: renderLayerPerSubSeries };
            return _this;
        }
        Object.defineProperty(CartesianSeries.prototype, "contextNodeData", {
            get: function () {
                var _a;
                return (_a = this._contextNodeData) === null || _a === void 0 ? void 0 : _a.slice();
            },
            enumerable: false,
            configurable: true
        });
        CartesianSeries.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._contextNodeData.splice(0, this._contextNodeData.length);
            this.subGroups.splice(0, this.subGroups.length);
        };
        /**
         * Note: we are passing `isContinuousX` and `isContinuousY` into this method because it will
         *       typically be called inside a loop and this check only needs to happen once.
         * @param x A domain value to be plotted along the x-axis.
         * @param y A domain value to be plotted along the y-axis.
         * @param isContinuousX Typically this will be the value of `xAxis.scale instanceof ContinuousScale`.
         * @param isContinuousY Typically this will be the value of `yAxis.scale instanceof ContinuousScale`.
         * @returns `[x, y]`, if both x and y are valid domain values for their respective axes/scales, or `undefined`.
         */
        CartesianSeries.prototype.checkDomainXY = function (x, y, isContinuousX, isContinuousY) {
            var isValidDatum = ((isContinuousX && isContinuous(x)) || (!isContinuousX && isDiscrete(x))) &&
                ((isContinuousY && isContinuous(y)) || (!isContinuousY && isDiscrete(y)));
            return isValidDatum ? [x, y] : undefined;
        };
        /**
         * Note: we are passing the xAxis and yAxis because the calling code is supposed to make sure
         *       that series has both of them defined, and also to avoid one level of indirection,
         *       e.g. `this.xAxis!.inRange(x)`, both of which are suboptimal in tight loops where this method is used.
         * @param x A range value to be plotted along the x-axis.
         * @param y A range value to be plotted along the y-axis.
         * @param xAxis The series' x-axis.
         * @param yAxis The series' y-axis.
         * @returns
         */
        CartesianSeries.prototype.checkRangeXY = function (x, y, xAxis, yAxis) {
            return !isNaN(x) && !isNaN(y) && xAxis.inRange(x) && yAxis.inRange(y);
        };
        CartesianSeries.prototype.update = function (_a) {
            var _b, _c;
            var seriesRect = _a.seriesRect;
            return __awaiter$d(this, void 0, void 0, function () {
                var _d, seriesItemEnabled, visible, series, seriesHighlighted, anySeriesItemEnabled, newNodeDataDependencies;
                return __generator$d(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _d = this, seriesItemEnabled = _d.seriesItemEnabled, visible = _d.visible;
                            series = ((_c = (_b = this.highlightManager) === null || _b === void 0 ? void 0 : _b.getActiveHighlight()) !== null && _c !== void 0 ? _c : {}).series;
                            seriesHighlighted = series ? series === this : undefined;
                            anySeriesItemEnabled = (visible && seriesItemEnabled.size === 0) || __spread$a(seriesItemEnabled.values()).some(function (v) { return v === true; });
                            newNodeDataDependencies = {
                                seriesRectWidth: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width,
                                seriesRectHeight: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.height,
                            };
                            if (jsonDiff(this.nodeDataDependencies, newNodeDataDependencies) != null) {
                                this.nodeDataDependencies = newNodeDataDependencies;
                                this.markNodeDataDirty();
                            }
                            return [4 /*yield*/, this.updateSelections(seriesHighlighted, anySeriesItemEnabled)];
                        case 1:
                            _e.sent();
                            return [4 /*yield*/, this.updateNodes(seriesHighlighted, anySeriesItemEnabled)];
                        case 2:
                            _e.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CartesianSeries.prototype.updateSelections = function (seriesHighlighted, anySeriesItemEnabled) {
            return __awaiter$d(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator$d(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.updateHighlightSelection(seriesHighlighted)];
                        case 1:
                            _b.sent();
                            if (!anySeriesItemEnabled) {
                                return [2 /*return*/];
                            }
                            if (!this.nodeDataRefresh && !this.isPathOrSelectionDirty()) {
                                return [2 /*return*/];
                            }
                            if (!this.nodeDataRefresh) return [3 /*break*/, 4];
                            this.nodeDataRefresh = false;
                            _a = this;
                            return [4 /*yield*/, this.createNodeData()];
                        case 2:
                            _a._contextNodeData = _b.sent();
                            return [4 /*yield*/, this.updateSeriesGroups()];
                        case 3:
                            _b.sent();
                            _b.label = 4;
                        case 4: return [4 /*yield*/, Promise.all(this.subGroups.map(function (g, i) { return _this.updateSeriesGroupSelections(g, i, seriesHighlighted); }))];
                        case 5:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CartesianSeries.prototype.updateSeriesGroupSelections = function (subGroup, seriesIdx, seriesHighlighted) {
            return __awaiter$d(this, void 0, void 0, function () {
                var datumSelection, labelSelection, markerSelection, paths, contextData, nodeData, labelData, itemId, _a, _b, _c;
                return __generator$d(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            datumSelection = subGroup.datumSelection, labelSelection = subGroup.labelSelection, markerSelection = subGroup.markerSelection, paths = subGroup.paths;
                            contextData = this._contextNodeData[seriesIdx];
                            nodeData = contextData.nodeData, labelData = contextData.labelData, itemId = contextData.itemId;
                            return [4 /*yield*/, this.updatePaths({ seriesHighlighted: seriesHighlighted, itemId: itemId, contextData: contextData, paths: paths, seriesIdx: seriesIdx })];
                        case 1:
                            _d.sent();
                            _a = subGroup;
                            return [4 /*yield*/, this.updateDatumSelection({ nodeData: nodeData, datumSelection: datumSelection, seriesIdx: seriesIdx })];
                        case 2:
                            _a.datumSelection = _d.sent();
                            _b = subGroup;
                            return [4 /*yield*/, this.updateLabelSelection({ labelData: labelData, labelSelection: labelSelection, seriesIdx: seriesIdx })];
                        case 3:
                            _b.labelSelection = _d.sent();
                            if (!markerSelection) return [3 /*break*/, 5];
                            _c = subGroup;
                            return [4 /*yield*/, this.updateMarkerSelection({
                                    nodeData: nodeData,
                                    markerSelection: markerSelection,
                                    seriesIdx: seriesIdx,
                                })];
                        case 4:
                            _c.markerSelection = _d.sent();
                            _d.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        CartesianSeries.prototype.updateSeriesGroups = function () {
            var _a;
            return __awaiter$d(this, void 0, void 0, function () {
                var _b, contextNodeData, contentGroup, subGroups, _c, pathsPerSeries, hasMarkers, pathsZIndexSubOrderOffset, renderLayerPerSubSeries, totalGroups, layer, subGroupId, subGroupZOffset, dataNodeGroup, markerGroup, labelGroup, pathParentGroup, paths, index;
                return __generator$d(this, function (_d) {
                    _b = this, contextNodeData = _b._contextNodeData, contentGroup = _b.contentGroup, subGroups = _b.subGroups, _c = _b.opts, pathsPerSeries = _c.pathsPerSeries, hasMarkers = _c.hasMarkers, pathsZIndexSubOrderOffset = _c.pathsZIndexSubOrderOffset, renderLayerPerSubSeries = _c.renderLayerPerSubSeries;
                    if (contextNodeData.length === subGroups.length) {
                        return [2 /*return*/];
                    }
                    if (contextNodeData.length < subGroups.length) {
                        subGroups.splice(contextNodeData.length).forEach(function (_a) {
                            var e_1, _b;
                            var dataNodeGroup = _a.dataNodeGroup, markerGroup = _a.markerGroup, labelGroup = _a.labelGroup, paths = _a.paths;
                            contentGroup.removeChild(dataNodeGroup);
                            if (markerGroup) {
                                contentGroup.removeChild(markerGroup);
                            }
                            if (labelGroup) {
                                contentGroup.removeChild(labelGroup);
                            }
                            try {
                                for (var paths_1 = __values$b(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
                                    var path = paths_1_1.value;
                                    contentGroup.removeChild(path);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (paths_1_1 && !paths_1_1.done && (_b = paths_1.return)) _b.call(paths_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        });
                    }
                    totalGroups = contextNodeData.length;
                    while (totalGroups > subGroups.length) {
                        layer = renderLayerPerSubSeries;
                        subGroupId = this.subGroupId++;
                        subGroupZOffset = subGroupId;
                        dataNodeGroup = new Group({
                            name: this.id + "-series-sub" + subGroupId + "-dataNodes",
                            layer: layer,
                            zIndex: Layers.SERIES_LAYER_ZINDEX,
                            zIndexSubOrder: [this.id, subGroupZOffset],
                        });
                        markerGroup = hasMarkers
                            ? new Group({
                                name: this.id + "-series-sub" + this.subGroupId++ + "-markers",
                                layer: layer,
                                zIndex: Layers.SERIES_LAYER_ZINDEX,
                                zIndexSubOrder: [this.id, 10000 + subGroupId],
                            })
                            : undefined;
                        labelGroup = new Group({
                            name: this.id + "-series-sub" + this.subGroupId++ + "-labels",
                            layer: layer,
                            zIndex: Layers.SERIES_LABEL_ZINDEX,
                            zIndexSubOrder: [this.id, subGroupId],
                        });
                        contentGroup.appendChild(dataNodeGroup);
                        contentGroup.appendChild(labelGroup);
                        if (markerGroup) {
                            contentGroup.appendChild(markerGroup);
                        }
                        pathParentGroup = renderLayerPerSubSeries ? dataNodeGroup : contentGroup;
                        paths = [];
                        for (index = 0; index < pathsPerSeries; index++) {
                            paths[index] = new Path();
                            paths[index].zIndex = Layers.SERIES_LAYER_ZINDEX;
                            paths[index].zIndexSubOrder = [this.id, ((_a = pathsZIndexSubOrderOffset[index]) !== null && _a !== void 0 ? _a : 0) + subGroupZOffset];
                            pathParentGroup.appendChild(paths[index]);
                        }
                        subGroups.push({
                            paths: paths,
                            dataNodeGroup: dataNodeGroup,
                            markerGroup: markerGroup,
                            labelGroup: labelGroup,
                            labelSelection: Selection.select(labelGroup).selectAll(),
                            datumSelection: Selection.select(dataNodeGroup).selectAll(),
                            markerSelection: markerGroup ? Selection.select(markerGroup).selectAll() : undefined,
                        });
                    }
                    return [2 /*return*/];
                });
            });
        };
        CartesianSeries.prototype.updateNodes = function (seriesHighlighted, anySeriesItemEnabled) {
            var _a;
            return __awaiter$d(this, void 0, void 0, function () {
                var _b, highlightSelection, highlightLabelSelection, contextNodeData, seriesItemEnabled, _c, hasMarkers, renderLayerPerSubSeries, visible, seriesOpacity, subGroupOpacities, isSubGroupOpacityDifferent;
                var _this = this;
                return __generator$d(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _b = this, highlightSelection = _b.highlightSelection, highlightLabelSelection = _b.highlightLabelSelection, contextNodeData = _b._contextNodeData, seriesItemEnabled = _b.seriesItemEnabled, _c = _b.opts, hasMarkers = _c.hasMarkers, renderLayerPerSubSeries = _c.renderLayerPerSubSeries;
                            visible = this.visible && ((_a = this._contextNodeData) === null || _a === void 0 ? void 0 : _a.length) > 0 && anySeriesItemEnabled;
                            this.rootGroup.visible = visible;
                            this.contentGroup.visible = visible;
                            this.highlightGroup.visible = visible && !!seriesHighlighted;
                            seriesOpacity = this.getOpacity();
                            subGroupOpacities = this.subGroups.map(function (_, index) {
                                var itemId = contextNodeData[index].itemId;
                                return _this.getOpacity({ itemId: itemId });
                            });
                            isSubGroupOpacityDifferent = subGroupOpacities.some(function (subOp) { return subOp !== seriesOpacity; });
                            this.contentGroup.opacity = isSubGroupOpacityDifferent ? 1 : seriesOpacity;
                            if (!hasMarkers) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.updateMarkerNodes({
                                    markerSelection: highlightSelection,
                                    isHighlight: true,
                                    seriesIdx: -1,
                                })];
                        case 1:
                            _d.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.updateDatumNodes({ datumSelection: highlightSelection, isHighlight: true, seriesIdx: -1 })];
                        case 3:
                            _d.sent();
                            _d.label = 4;
                        case 4: return [4 /*yield*/, this.updateLabelNodes({ labelSelection: highlightLabelSelection, seriesIdx: -1 })];
                        case 5:
                            _d.sent();
                            return [4 /*yield*/, Promise.all(this.subGroups.map(function (subGroup, seriesIdx) { return __awaiter$d(_this, void 0, void 0, function () {
                                    var dataNodeGroup, markerGroup, datumSelection, labelSelection, markerSelection, paths, labelGroup, itemId, subGroupVisible, subGroupOpacity, paths_2, paths_2_1, path;
                                    var e_2, _a;
                                    var _b;
                                    return __generator$d(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                dataNodeGroup = subGroup.dataNodeGroup, markerGroup = subGroup.markerGroup, datumSelection = subGroup.datumSelection, labelSelection = subGroup.labelSelection, markerSelection = subGroup.markerSelection, paths = subGroup.paths, labelGroup = subGroup.labelGroup;
                                                itemId = contextNodeData[seriesIdx].itemId;
                                                subGroupVisible = visible && ((_b = seriesItemEnabled.get(itemId)) !== null && _b !== void 0 ? _b : true);
                                                subGroupOpacity = isSubGroupOpacityDifferent ? subGroupOpacities[seriesIdx] : 1;
                                                dataNodeGroup.opacity = subGroupOpacity;
                                                dataNodeGroup.visible = subGroupVisible;
                                                labelGroup.visible = subGroupVisible;
                                                if (markerGroup) {
                                                    markerGroup.opacity = subGroupOpacity;
                                                    markerGroup.zIndex =
                                                        dataNodeGroup.zIndex >= Layers.SERIES_LAYER_ZINDEX
                                                            ? dataNodeGroup.zIndex
                                                            : dataNodeGroup.zIndex + 1;
                                                    markerGroup.visible = subGroupVisible;
                                                }
                                                if (labelGroup) {
                                                    labelGroup.opacity = subGroupOpacity;
                                                }
                                                try {
                                                    for (paths_2 = __values$b(paths), paths_2_1 = paths_2.next(); !paths_2_1.done; paths_2_1 = paths_2.next()) {
                                                        path = paths_2_1.value;
                                                        if (!renderLayerPerSubSeries) {
                                                            path.opacity = subGroupOpacity;
                                                            path.visible = subGroupVisible;
                                                        }
                                                    }
                                                }
                                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                                finally {
                                                    try {
                                                        if (paths_2_1 && !paths_2_1.done && (_a = paths_2.return)) _a.call(paths_2);
                                                    }
                                                    finally { if (e_2) throw e_2.error; }
                                                }
                                                if (!dataNodeGroup.visible) {
                                                    return [2 /*return*/];
                                                }
                                                return [4 /*yield*/, this.updatePathNodes({ seriesHighlighted: seriesHighlighted, itemId: itemId, paths: paths, seriesIdx: seriesIdx })];
                                            case 1:
                                                _c.sent();
                                                return [4 /*yield*/, this.updateDatumNodes({ datumSelection: datumSelection, isHighlight: false, seriesIdx: seriesIdx })];
                                            case 2:
                                                _c.sent();
                                                return [4 /*yield*/, this.updateLabelNodes({ labelSelection: labelSelection, seriesIdx: seriesIdx })];
                                            case 3:
                                                _c.sent();
                                                if (!(hasMarkers && markerSelection)) return [3 /*break*/, 5];
                                                return [4 /*yield*/, this.updateMarkerNodes({ markerSelection: markerSelection, isHighlight: false, seriesIdx: seriesIdx })];
                                            case 4:
                                                _c.sent();
                                                _c.label = 5;
                                            case 5: return [2 /*return*/];
                                        }
                                    });
                                }); }))];
                        case 6:
                            _d.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CartesianSeries.prototype.updateHighlightSelection = function (seriesHighlighted) {
            var _a;
            return __awaiter$d(this, void 0, void 0, function () {
                var _b, highlightSelection, highlightLabelSelection, contextNodeData, highlightedDatum, item, _c, labelItem, _d, itemId_1, contextNodeData_1, contextNodeData_1_1, labelData, _e;
                var e_3, _f;
                return __generator$d(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            _b = this, highlightSelection = _b.highlightSelection, highlightLabelSelection = _b.highlightLabelSelection, contextNodeData = _b._contextNodeData;
                            highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();
                            item = seriesHighlighted && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.datum) ? highlightedDatum : undefined;
                            _c = this;
                            return [4 /*yield*/, this.updateHighlightSelectionItem({ item: item, highlightSelection: highlightSelection })];
                        case 1:
                            _c.highlightSelection = _g.sent();
                            if (this.isLabelEnabled() && item != null) {
                                _d = item.itemId, itemId_1 = _d === void 0 ? undefined : _d;
                                try {
                                    for (contextNodeData_1 = __values$b(contextNodeData), contextNodeData_1_1 = contextNodeData_1.next(); !contextNodeData_1_1.done; contextNodeData_1_1 = contextNodeData_1.next()) {
                                        labelData = contextNodeData_1_1.value.labelData;
                                        labelItem = labelData.find(function (ld) { return ld.datum === item.datum && ld.itemId === itemId_1; });
                                        if (labelItem != null) {
                                            break;
                                        }
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (contextNodeData_1_1 && !contextNodeData_1_1.done && (_f = contextNodeData_1.return)) _f.call(contextNodeData_1);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            }
                            _e = this;
                            return [4 /*yield*/, this.updateHighlightSelectionLabel({
                                    item: labelItem,
                                    highlightLabelSelection: highlightLabelSelection,
                                })];
                        case 2:
                            _e.highlightLabelSelection = _g.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CartesianSeries.prototype.pickNodeExactShape = function (point) {
            var e_4, _a;
            var result = _super.prototype.pickNodeExactShape.call(this, point);
            if (result) {
                return result;
            }
            var x = point.x, y = point.y;
            var hasMarkers = this.opts.hasMarkers;
            try {
                for (var _b = __values$b(this.subGroups), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = _c.value, dataNodeGroup = _d.dataNodeGroup, markerGroup = _d.markerGroup;
                    var match = dataNodeGroup.pickNode(x, y);
                    if (!match && hasMarkers) {
                        match = markerGroup === null || markerGroup === void 0 ? void 0 : markerGroup.pickNode(x, y);
                    }
                    if (match) {
                        return { datum: match.datum, distance: 0 };
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        };
        CartesianSeries.prototype.pickNodeClosestDatum = function (point) {
            var e_5, _a, e_6, _b;
            var _c, _d;
            var x = point.x, y = point.y;
            var _e = this, xAxis = _e.xAxis, yAxis = _e.yAxis, rootGroup = _e.rootGroup, contextNodeData = _e._contextNodeData;
            var hitPoint = rootGroup.transformPoint(x, y);
            var minDistance = Infinity;
            var closestDatum;
            try {
                for (var contextNodeData_2 = __values$b(contextNodeData), contextNodeData_2_1 = contextNodeData_2.next(); !contextNodeData_2_1.done; contextNodeData_2_1 = contextNodeData_2.next()) {
                    var context = contextNodeData_2_1.value;
                    try {
                        for (var _f = (e_6 = void 0, __values$b(context.nodeData)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var datum = _g.value;
                            var _h = datum.point, _j = _h === void 0 ? {} : _h, _k = _j.x, datumX = _k === void 0 ? NaN : _k, _l = _j.y, datumY = _l === void 0 ? NaN : _l;
                            if (isNaN(datumX) || isNaN(datumY)) {
                                continue;
                            }
                            var isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));
                            if (!isInRange) {
                                continue;
                            }
                            // No need to use Math.sqrt() since x < y implies Math.sqrt(x) < Math.sqrt(y) for
                            // values > 1
                            var distance = Math.max(Math.pow((hitPoint.x - datumX), 2) + Math.pow((hitPoint.y - datumY), 2), 0);
                            if (distance < minDistance) {
                                minDistance = distance;
                                closestDatum = datum;
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (contextNodeData_2_1 && !contextNodeData_2_1.done && (_a = contextNodeData_2.return)) _a.call(contextNodeData_2);
                }
                finally { if (e_5) throw e_5.error; }
            }
            if (closestDatum) {
                var distance = Math.max(Math.sqrt(minDistance) - ((_d = (_c = closestDatum.point) === null || _c === void 0 ? void 0 : _c.size) !== null && _d !== void 0 ? _d : 0), 0);
                return { datum: closestDatum, distance: distance };
            }
        };
        CartesianSeries.prototype.pickNodeMainAxisFirst = function (point, requireCategoryAxis) {
            var e_7, _a, e_8, _b;
            var _c, _d;
            var x = point.x, y = point.y;
            var _e = this, xAxis = _e.xAxis, yAxis = _e.yAxis, rootGroup = _e.rootGroup, contextNodeData = _e._contextNodeData;
            // Prefer to start search with any available category axis.
            var directions = [xAxis, yAxis]
                .filter(function (a) { return a instanceof CategoryAxis; })
                .map(function (a) { return a.direction; });
            if (requireCategoryAxis && directions.length === 0) {
                return;
            }
            // Default to X-axis unless we found a suitable category axis.
            var _f = __read$i(directions, 1), _g = _f[0], primaryDirection = _g === void 0 ? ChartAxisDirection.X : _g;
            var hitPoint = rootGroup.transformPoint(x, y);
            var hitPointCoords = primaryDirection === ChartAxisDirection.X ? [hitPoint.x, hitPoint.y] : [hitPoint.y, hitPoint.x];
            var minDistance = [Infinity, Infinity];
            var closestDatum = undefined;
            try {
                for (var contextNodeData_3 = __values$b(contextNodeData), contextNodeData_3_1 = contextNodeData_3.next(); !contextNodeData_3_1.done; contextNodeData_3_1 = contextNodeData_3.next()) {
                    var context = contextNodeData_3_1.value;
                    try {
                        for (var _h = (e_8 = void 0, __values$b(context.nodeData)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var datum = _j.value;
                            var _k = datum.point, _l = _k === void 0 ? {} : _k, _m = _l.x, datumX = _m === void 0 ? NaN : _m, _o = _l.y, datumY = _o === void 0 ? NaN : _o;
                            if (isNaN(datumX) || isNaN(datumY)) {
                                continue;
                            }
                            var isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));
                            if (!isInRange) {
                                continue;
                            }
                            var point_1 = primaryDirection === ChartAxisDirection.X ? [datumX, datumY] : [datumY, datumX];
                            // Compare distances from most significant dimension to least.
                            var newMinDistance = true;
                            for (var i = 0; i < point_1.length; i++) {
                                var dist = Math.abs(point_1[i] - hitPointCoords[i]);
                                if (dist > minDistance[i]) {
                                    newMinDistance = false;
                                    break;
                                }
                                if (dist < minDistance[i]) {
                                    minDistance[i] = dist;
                                    minDistance.fill(Infinity, i + 1, minDistance.length);
                                }
                            }
                            if (newMinDistance) {
                                closestDatum = datum;
                            }
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (contextNodeData_3_1 && !contextNodeData_3_1.done && (_a = contextNodeData_3.return)) _a.call(contextNodeData_3);
                }
                finally { if (e_7) throw e_7.error; }
            }
            if (closestDatum) {
                var distance = Math.max(Math.sqrt(Math.pow(minDistance[0], 2) + Math.pow(minDistance[1], 2)) - ((_d = (_c = closestDatum.point) === null || _c === void 0 ? void 0 : _c.size) !== null && _d !== void 0 ? _d : 0), 0);
                return { datum: closestDatum, distance: distance };
            }
        };
        CartesianSeries.prototype.toggleSeriesItem = function (itemId, enabled) {
            if (this.seriesItemEnabled.size > 0) {
                this.seriesItemEnabled.set(itemId, enabled);
                this.nodeDataRefresh = true;
            }
            else {
                _super.prototype.toggleSeriesItem.call(this, itemId, enabled);
            }
        };
        CartesianSeries.prototype.isEnabled = function () {
            var e_9, _a;
            if (this.seriesItemEnabled.size > 0) {
                try {
                    for (var _b = __values$b(this.seriesItemEnabled), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var _d = __read$i(_c.value, 2), enabled = _d[1];
                        if (enabled) {
                            return true;
                        }
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
                return false;
            }
            return _super.prototype.isEnabled.call(this);
        };
        CartesianSeries.prototype.isPathOrSelectionDirty = function () {
            // Override point to allow more sophisticated dirty selection detection.
            return false;
        };
        CartesianSeries.prototype.getLabelData = function () {
            return [];
        };
        CartesianSeries.prototype.updatePaths = function (opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                return __generator$d(this, function (_a) {
                    // Override point for sub-classes.
                    opts.paths.forEach(function (p) { return (p.visible = false); });
                    return [2 /*return*/];
                });
            });
        };
        CartesianSeries.prototype.updatePathNodes = function (_opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                return __generator$d(this, function (_a) {
                    return [2 /*return*/];
                });
            });
        };
        CartesianSeries.prototype.updateHighlightSelectionItem = function (opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                var hasMarkers, item, highlightSelection, nodeData, markerSelection;
                return __generator$d(this, function (_a) {
                    hasMarkers = this.opts.hasMarkers;
                    item = opts.item, highlightSelection = opts.highlightSelection;
                    nodeData = item ? [item] : [];
                    if (hasMarkers) {
                        markerSelection = highlightSelection;
                        return [2 /*return*/, this.updateMarkerSelection({ nodeData: nodeData, markerSelection: markerSelection, seriesIdx: -1 })];
                    }
                    else {
                        return [2 /*return*/, this.updateDatumSelection({ nodeData: nodeData, datumSelection: highlightSelection, seriesIdx: -1 })];
                    }
                });
            });
        };
        CartesianSeries.prototype.updateHighlightSelectionLabel = function (opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                var item, highlightLabelSelection, labelData;
                return __generator$d(this, function (_a) {
                    item = opts.item, highlightLabelSelection = opts.highlightLabelSelection;
                    labelData = item ? [item] : [];
                    return [2 /*return*/, this.updateLabelSelection({ labelData: labelData, labelSelection: highlightLabelSelection, seriesIdx: -1 })];
                });
            });
        };
        CartesianSeries.prototype.updateDatumSelection = function (opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                return __generator$d(this, function (_a) {
                    // Override point for sub-classes.
                    return [2 /*return*/, opts.datumSelection];
                });
            });
        };
        CartesianSeries.prototype.updateDatumNodes = function (_opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                return __generator$d(this, function (_a) {
                    return [2 /*return*/];
                });
            });
        };
        CartesianSeries.prototype.updateMarkerSelection = function (opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                return __generator$d(this, function (_a) {
                    // Override point for sub-classes.
                    return [2 /*return*/, opts.markerSelection];
                });
            });
        };
        CartesianSeries.prototype.updateMarkerNodes = function (_opts) {
            return __awaiter$d(this, void 0, void 0, function () {
                return __generator$d(this, function (_a) {
                    return [2 /*return*/];
                });
            });
        };
        return CartesianSeries;
    }(Series));
    var CartesianSeriesMarker = /** @class */ (function (_super) {
        __extends$z(CartesianSeriesMarker, _super);
        function CartesianSeriesMarker() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.formatter = undefined;
            return _this;
        }
        __decorate$l([
            ValidateAndChangeDetection({
                validatePredicate: OPT_FUNCTION,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], CartesianSeriesMarker.prototype, "formatter", void 0);
        return CartesianSeriesMarker;
    }(SeriesMarker));

    function sleep(sleepTimeoutMs) {
        return new Promise(function (resolve) {
            setTimeout(function () { return resolve(undefined); }, sleepTimeoutMs);
        });
    }

    var __decorate$k = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __values$a = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var DEFAULT_TOOLTIP_CLASS = 'ag-chart-tooltip';
    var defaultTooltipCss = "\n.ag-chart-tooltip {\n    transition: transform 0.1s ease;\n    display: table;\n    position: fixed;\n    left: 0px;\n    top: 0px;\n    user-select: none;\n    pointer-events: none;\n    white-space: nowrap;\n    z-index: 99999;\n    font: 12px Verdana, sans-serif;\n    color: black;\n    background: rgb(244, 244, 244);\n    border-radius: 5px;\n    box-shadow: 0 0 1px rgba(3, 3, 3, 0.7), 0.5vh 0.5vh 1vh rgba(3, 3, 3, 0.25);\n}\n\n.ag-chart-tooltip-no-animation {\n    transition: none !important;\n}\n\n.ag-chart-tooltip-hidden {\n    visibility: hidden;\n}\n\n.ag-chart-tooltip-title {\n    font-weight: bold;\n    padding: 7px;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    color: white;\n    background-color: #888888;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n}\n\n.ag-chart-tooltip-content {\n    padding: 7px;\n    line-height: 1.7em;\n    border-bottom-left-radius: 5px;\n    border-bottom-right-radius: 5px;\n    overflow: hidden;\n}\n\n.ag-chart-tooltip-content:empty {\n    padding: 0;\n    height: 7px;\n}\n\n.ag-chart-tooltip-arrow::before {\n    content: \"\";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 6px solid #989898;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: #989898;\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.ag-chart-tooltip-arrow::after {\n    content: \"\";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 5px solid black;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: rgb(244, 244, 244);\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.ag-chart-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n";
    function toTooltipHtml(input, defaults) {
        if (typeof input === 'string') {
            return input;
        }
        defaults = defaults || {};
        var _a = input.content, content = _a === void 0 ? defaults.content || '' : _a, _b = input.title, title = _b === void 0 ? defaults.title || undefined : _b, _c = input.color, color = _c === void 0 ? defaults.color || 'white' : _c, _d = input.backgroundColor, backgroundColor = _d === void 0 ? defaults.backgroundColor || '#888' : _d;
        var titleHtml = title
            ? "<div class=\"" + DEFAULT_TOOLTIP_CLASS + "-title\"\n        style=\"color: " + color + "; background-color: " + backgroundColor + "\">" + title + "</div>"
            : '';
        return titleHtml + "<div class=\"" + DEFAULT_TOOLTIP_CLASS + "-content\">" + content + "</div>";
    }
    var Tooltip = /** @class */ (function () {
        function Tooltip(canvasElement, document, container) {
            var _this = this;
            this.enabled = true;
            this.class = undefined;
            this.lastClass = undefined;
            this.delay = 0;
            /**
             * If `true`, the tooltip will be shown for the marker closest to the mouse cursor.
             * Only has effect on series with markers.
             */
            this.tracking = true;
            this.showTimeout = 0;
            this.constrained = false;
            this.tooltipRoot = container;
            var element = document.createElement('div');
            this.element = this.tooltipRoot.appendChild(element);
            this.element.classList.add(DEFAULT_TOOLTIP_CLASS);
            this.canvasElement = canvasElement;
            // Detect when the chart becomes invisible and hide the tooltip as well.
            if (window.IntersectionObserver) {
                var observer = new IntersectionObserver(function (entries) {
                    var e_1, _a;
                    try {
                        for (var entries_1 = __values$a(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                            var entry = entries_1_1.value;
                            if (entry.target === _this.canvasElement && entry.intersectionRatio === 0) {
                                _this.toggle(false);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }, { root: this.tooltipRoot });
                observer.observe(this.canvasElement);
                this.observer = observer;
            }
            if (Tooltip.tooltipDocuments.indexOf(document) < 0) {
                var styleElement = document.createElement('style');
                styleElement.innerHTML = defaultTooltipCss;
                // Make sure the default tooltip style goes before other styles so it can be overridden.
                document.head.insertBefore(styleElement, document.head.querySelector('style'));
                Tooltip.tooltipDocuments.push(document);
            }
        }
        Tooltip.prototype.destroy = function () {
            var parentNode = this.element.parentNode;
            if (parentNode) {
                parentNode.removeChild(this.element);
            }
            if (this.observer) {
                this.observer.unobserve(this.canvasElement);
            }
        };
        Tooltip.prototype.isVisible = function () {
            var element = this.element;
            return !element.classList.contains(DEFAULT_TOOLTIP_CLASS + '-hidden');
        };
        Tooltip.prototype.updateClass = function (visible, constrained) {
            var _a = this, element = _a.element, newClass = _a.class, lastClass = _a.lastClass;
            var wasVisible = !element.classList.contains(DEFAULT_TOOLTIP_CLASS + "-hidden");
            var toggleClass = function (name, include) {
                var className = DEFAULT_TOOLTIP_CLASS + "-" + name;
                if (include) {
                    element.classList.add(className);
                }
                else {
                    element.classList.remove(className);
                }
            };
            toggleClass('no-animation', !wasVisible && !!visible); // No animation on first show.
            toggleClass('hidden', !visible); // Hide if not visible.
            toggleClass('arrow', !constrained); // Add arrow if tooltip is constrained.
            if (newClass !== lastClass) {
                if (lastClass) {
                    element.classList.remove(lastClass);
                }
                if (newClass) {
                    element.classList.add(newClass);
                }
                this.lastClass = newClass;
            }
        };
        /**
         * Shows tooltip at the given event's coordinates.
         * If the `html` parameter is missing, moves the existing tooltip to the new position.
         */
        Tooltip.prototype.show = function (meta, html, instantly) {
            var _this = this;
            if (instantly === void 0) { instantly = false; }
            var _a = this, element = _a.element, canvasElement = _a.canvasElement;
            if (html !== undefined) {
                element.innerHTML = html;
            }
            else if (!element.innerHTML) {
                return;
            }
            var limit = function (low, actual, high) {
                return Math.max(Math.min(actual, high), low);
            };
            var canvasRect = canvasElement.getBoundingClientRect();
            var naiveLeft = canvasRect.left + meta.offsetX - element.clientWidth / 2;
            var naiveTop = canvasRect.top + meta.offsetY - element.clientHeight - 8;
            var windowBounds = this.getWindowBoundingBox();
            var maxLeft = windowBounds.x + windowBounds.width - element.clientWidth - 1;
            var maxTop = windowBounds.y + windowBounds.height - element.clientHeight;
            var left = limit(windowBounds.x, naiveLeft, maxLeft);
            var top = limit(windowBounds.y, naiveTop, maxTop);
            this.constrained = left !== naiveLeft || top !== naiveTop;
            element.style.transform = "translate(" + Math.round(left) + "px, " + Math.round(top) + "px)";
            if (this.delay > 0 && !instantly) {
                this.toggle(false);
                this.showTimeout = window.setTimeout(function () {
                    _this.toggle(true);
                }, this.delay);
                return;
            }
            this.toggle(true);
        };
        Tooltip.prototype.getWindowBoundingBox = function () {
            return new BBox(0, 0, window.innerWidth, window.innerHeight);
        };
        Tooltip.prototype.toggle = function (visible) {
            if (!visible) {
                window.clearTimeout(this.showTimeout);
            }
            this.updateClass(visible, this.constrained);
        };
        Tooltip.tooltipDocuments = [];
        __decorate$k([
            Validate(BOOLEAN)
        ], Tooltip.prototype, "enabled", void 0);
        __decorate$k([
            Validate(OPT_STRING)
        ], Tooltip.prototype, "class", void 0);
        __decorate$k([
            Validate(NUMBER(0))
        ], Tooltip.prototype, "delay", void 0);
        __decorate$k([
            Validate(BOOLEAN)
        ], Tooltip.prototype, "tracking", void 0);
        return Tooltip;
    }());

    var BaseManager = /** @class */ (function () {
        function BaseManager() {
            this.registeredListeners = {};
        }
        BaseManager.prototype.addListener = function (type, cb) {
            var _a;
            var symbol = Symbol(type);
            if (!this.registeredListeners[type]) {
                this.registeredListeners[type] = [];
            }
            (_a = this.registeredListeners[type]) === null || _a === void 0 ? void 0 : _a.push({ symbol: symbol, handler: cb });
            return symbol;
        };
        BaseManager.prototype.removeListener = function (listenerSymbol) {
            for (var type in this.registeredListeners) {
                var listeners = this.registeredListeners[type];
                var match = listeners === null || listeners === void 0 ? void 0 : listeners.findIndex(function (entry) { return entry.symbol === listenerSymbol; });
                if (match != null && match >= 0) {
                    listeners === null || listeners === void 0 ? void 0 : listeners.splice(match, 1);
                }
                if (match != null && (listeners === null || listeners === void 0 ? void 0 : listeners.length) === 0) {
                    delete this.registeredListeners[type];
                }
            }
        };
        return BaseManager;
    }());

    var __extends$y = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$f = (undefined && undefined.__assign) || function () {
        __assign$f = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$f.apply(this, arguments);
    };
    var __awaiter$c = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$c = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __values$9 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var WINDOW_EVENT_HANDLERS = ['pagehide', 'mousemove', 'mouseup'];
    var EVENT_HANDLERS = [
        'click',
        'mousedown',
        'mouseout',
        'mouseenter',
        'touchstart',
        'touchmove',
        'touchend',
        'touchcancel',
    ];
    var CSS = "\n.ag-chart-wrapper {\n    touch-action: none;\n}\n";
    /**
     * Manages user interactions with a specific HTMLElement (or interactions that bubble from it's
     * children)
     */
    var InteractionManager = /** @class */ (function (_super) {
        __extends$y(InteractionManager, _super);
        function InteractionManager(element, doc) {
            var e_1, _a, e_2, _b;
            if (doc === void 0) { doc = document; }
            var _this = _super.call(this) || this;
            _this.eventHandler = function (event) { return _this.processEvent(event); };
            _this.mouseDown = false;
            _this.touchDown = false;
            _this.rootElement = doc.body;
            _this.element = element;
            try {
                for (var EVENT_HANDLERS_1 = __values$9(EVENT_HANDLERS), EVENT_HANDLERS_1_1 = EVENT_HANDLERS_1.next(); !EVENT_HANDLERS_1_1.done; EVENT_HANDLERS_1_1 = EVENT_HANDLERS_1.next()) {
                    var type = EVENT_HANDLERS_1_1.value;
                    if (type.startsWith('touch')) {
                        element.addEventListener(type, _this.eventHandler, { passive: true });
                    }
                    else {
                        element.addEventListener(type, _this.eventHandler);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (EVENT_HANDLERS_1_1 && !EVENT_HANDLERS_1_1.done && (_a = EVENT_HANDLERS_1.return)) _a.call(EVENT_HANDLERS_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var WINDOW_EVENT_HANDLERS_1 = __values$9(WINDOW_EVENT_HANDLERS), WINDOW_EVENT_HANDLERS_1_1 = WINDOW_EVENT_HANDLERS_1.next(); !WINDOW_EVENT_HANDLERS_1_1.done; WINDOW_EVENT_HANDLERS_1_1 = WINDOW_EVENT_HANDLERS_1.next()) {
                    var type = WINDOW_EVENT_HANDLERS_1_1.value;
                    window.addEventListener(type, _this.eventHandler);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (WINDOW_EVENT_HANDLERS_1_1 && !WINDOW_EVENT_HANDLERS_1_1.done && (_b = WINDOW_EVENT_HANDLERS_1.return)) _b.call(WINDOW_EVENT_HANDLERS_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (InteractionManager.interactionDocuments.indexOf(doc) < 0) {
                var styleElement = document.createElement('style');
                styleElement.innerHTML = CSS;
                document.head.insertBefore(styleElement, document.head.querySelector('style'));
                InteractionManager.interactionDocuments.push(doc);
            }
            return _this;
        }
        InteractionManager.prototype.destroy = function () {
            var e_3, _a, e_4, _b;
            try {
                for (var WINDOW_EVENT_HANDLERS_2 = __values$9(WINDOW_EVENT_HANDLERS), WINDOW_EVENT_HANDLERS_2_1 = WINDOW_EVENT_HANDLERS_2.next(); !WINDOW_EVENT_HANDLERS_2_1.done; WINDOW_EVENT_HANDLERS_2_1 = WINDOW_EVENT_HANDLERS_2.next()) {
                    var type = WINDOW_EVENT_HANDLERS_2_1.value;
                    window.removeEventListener(type, this.eventHandler);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (WINDOW_EVENT_HANDLERS_2_1 && !WINDOW_EVENT_HANDLERS_2_1.done && (_a = WINDOW_EVENT_HANDLERS_2.return)) _a.call(WINDOW_EVENT_HANDLERS_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            try {
                for (var EVENT_HANDLERS_2 = __values$9(EVENT_HANDLERS), EVENT_HANDLERS_2_1 = EVENT_HANDLERS_2.next(); !EVENT_HANDLERS_2_1.done; EVENT_HANDLERS_2_1 = EVENT_HANDLERS_2.next()) {
                    var type = EVENT_HANDLERS_2_1.value;
                    this.element.removeEventListener(type, this.eventHandler);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (EVENT_HANDLERS_2_1 && !EVENT_HANDLERS_2_1.done && (_b = EVENT_HANDLERS_2.return)) _b.call(EVENT_HANDLERS_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
        };
        InteractionManager.prototype.processEvent = function (event) {
            var types = this.decideInteractionEventTypes(event);
            if (types.length > 0) {
                // Async dispatch to avoid blocking the event-processing thread.
                this.dispatchEvent(event, types);
            }
        };
        InteractionManager.prototype.dispatchEvent = function (event, types) {
            var _a;
            return __awaiter$c(this, void 0, void 0, function () {
                var coords, _loop_1, this_1, types_1, types_1_1, type;
                var e_5, _b;
                return __generator$c(this, function (_c) {
                    coords = this.calculateCoordinates(event);
                    if (coords == null) {
                        return [2 /*return*/];
                    }
                    _loop_1 = function (type) {
                        var interactionType = type;
                        var listeners = (_a = this_1.registeredListeners[interactionType]) !== null && _a !== void 0 ? _a : [];
                        var interactionEvent = this_1.buildEvent(__assign$f(__assign$f({ event: event }, coords), { type: interactionType }));
                        listeners.forEach(function (listener) {
                            try {
                                if (!interactionEvent.consumed) {
                                    listener.handler(interactionEvent);
                                }
                            }
                            catch (e) {
                                console.error(e);
                            }
                        });
                    };
                    this_1 = this;
                    try {
                        for (types_1 = __values$9(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                            type = types_1_1.value;
                            _loop_1(type);
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (types_1_1 && !types_1_1.done && (_b = types_1.return)) _b.call(types_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                    return [2 /*return*/];
                });
            });
        };
        InteractionManager.prototype.decideInteractionEventTypes = function (event) {
            switch (event.type) {
                case 'click':
                    return ['click'];
                case 'mousedown':
                    this.mouseDown = true;
                    this.dragStartElement = event.target;
                    return ['drag-start'];
                case 'touchstart':
                    this.touchDown = true;
                    this.dragStartElement = event.target;
                    return ['drag-start'];
                case 'touchmove':
                case 'mousemove':
                    if (!this.mouseDown && !this.touchDown && !this.isEventOverElement(event)) {
                        // We only care about these events if the target is the canvas, unless
                        // we're in the middle of a drag/slide.
                        return [];
                    }
                    return this.mouseDown || this.touchDown ? ['drag'] : ['hover'];
                case 'mouseup':
                    if (!this.mouseDown && !this.isEventOverElement(event)) {
                        // We only care about these events if the target is the canvas, unless
                        // we're in the middle of a drag.
                        return [];
                    }
                    this.mouseDown = false;
                    this.dragStartElement = undefined;
                    return ['drag-end'];
                case 'touchend':
                    if (!this.touchDown && !this.isEventOverElement(event)) {
                        // We only care about these events if the target is the canvas, unless
                        // we're in the middle of a slide.
                        return [];
                    }
                    this.touchDown = false;
                    this.dragStartElement = undefined;
                    return ['drag-end'];
                case 'mouseout':
                case 'touchcancel':
                    return ['leave'];
                case 'mouseenter':
                    var mouseButtonDown = event instanceof MouseEvent && (event.buttons & 1) === 1;
                    if (this.mouseDown !== mouseButtonDown) {
                        this.mouseDown = mouseButtonDown;
                        return [mouseButtonDown ? 'drag-start' : 'drag-end'];
                    }
                    return [];
                case 'pagehide':
                    return ['page-left'];
            }
            return [];
        };
        InteractionManager.prototype.isEventOverElement = function (event) {
            var _a;
            return event.target === this.element || ((_a = event.target) === null || _a === void 0 ? void 0 : _a.parentElement) === this.element;
        };
        InteractionManager.prototype.calculateCoordinates = function (event) {
            var _a;
            if (event instanceof MouseEvent) {
                var mouseEvent = event;
                var clientX = mouseEvent.clientX, clientY = mouseEvent.clientY, pageX = mouseEvent.pageX, pageY = mouseEvent.pageY, offsetX = mouseEvent.offsetX, offsetY = mouseEvent.offsetY;
                return this.fixOffsets(event, { clientX: clientX, clientY: clientY, pageX: pageX, pageY: pageY, offsetX: offsetX, offsetY: offsetY });
            }
            else if (typeof TouchEvent !== 'undefined' && event instanceof TouchEvent) {
                var touchEvent = event;
                var lastTouch = (_a = touchEvent.touches[0]) !== null && _a !== void 0 ? _a : touchEvent.changedTouches[0];
                var clientX = lastTouch.clientX, clientY = lastTouch.clientY, pageX = lastTouch.pageX, pageY = lastTouch.pageY;
                return __assign$f(__assign$f({}, InteractionManager.NULL_COORDS), { clientX: clientX, clientY: clientY, pageX: pageX, pageY: pageY });
            }
            else if (event instanceof PageTransitionEvent) {
                if (event.persisted) {
                    // Don't fire the page-left event since the page maybe revisited.
                    return;
                }
                return InteractionManager.NULL_COORDS;
            }
            // Unsupported event - abort.
            return;
        };
        InteractionManager.prototype.fixOffsets = function (event, coords) {
            var offsets = function (el) {
                var x = 0;
                var y = 0;
                while (el) {
                    x += el.offsetLeft;
                    y += el.offsetTop;
                    el = el.offsetParent;
                }
                return { x: x, y: y };
            };
            if (this.dragStartElement != null && event.target !== this.dragStartElement) {
                // Offsets need to be relative to the drag-start element to avoid jumps when
                // the pointer moves between element boundaries.
                var offsetDragStart = offsets(this.dragStartElement);
                var offsetEvent = offsets(event.target);
                coords.offsetX -= offsetDragStart.x - offsetEvent.x;
                coords.offsetY -= offsetDragStart.y - offsetEvent.y;
            }
            return coords;
        };
        InteractionManager.prototype.buildEvent = function (opts) {
            var type = opts.type, event = opts.event, clientX = opts.clientX, clientY = opts.clientY, offsetX = opts.offsetX, offsetY = opts.offsetY, pageX = opts.pageX, pageY = opts.pageY;
            if (!isNumber(offsetX) || !isNumber(offsetY)) {
                var rect = this.element.getBoundingClientRect();
                offsetX = clientX - rect.left;
                offsetY = clientY - rect.top;
            }
            if (!isNumber(pageX) || !isNumber(pageY)) {
                var pageRect = this.rootElement.getBoundingClientRect();
                pageX = clientX - pageRect.left;
                pageY = clientY - pageRect.top;
            }
            var builtEvent = {
                type: type,
                offsetX: offsetX,
                offsetY: offsetY,
                pageX: pageX,
                pageY: pageY,
                sourceEvent: event,
                consumed: false,
                consume: function () { return (builtEvent.consumed = true); },
            };
            return builtEvent;
        };
        InteractionManager.interactionDocuments = [];
        InteractionManager.NULL_COORDS = {
            clientX: -Infinity,
            clientY: -Infinity,
            pageX: -Infinity,
            pageY: -Infinity,
            offsetX: -Infinity,
            offsetY: -Infinity,
        };
        return InteractionManager;
    }(BaseManager));

    var __extends$x = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$e = (undefined && undefined.__assign) || function () {
        __assign$e = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$e.apply(this, arguments);
    };
    var __decorate$j = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __values$8 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    /**
     * Acts as `Group` node but with specified bounds that form a rectangle.
     * Any parts of the child nodes outside that rectangle will not be visible.
     * Unlike the `Group` node, the `ClipRect` node cannot be transformed.
     */
    var ClipRect = /** @class */ (function (_super) {
        __extends$x(ClipRect, _super);
        function ClipRect() {
            var _this = _super.call(this) || this;
            _this.path = new Path2D();
            _this.enabled = false;
            _this._dirtyPath = true;
            _this.x = 0;
            _this.y = 0;
            _this.width = 10;
            _this.height = 10;
            _this.isContainerNode = true;
            return _this;
        }
        ClipRect.prototype.containsPoint = function (x, y) {
            var point = this.transformPoint(x, y);
            return (point.x >= this.x && point.x <= this.x + this.width && point.y >= this.y && point.y <= this.y + this.height);
        };
        ClipRect.prototype.updatePath = function () {
            var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height, path = _a.path;
            path.clear();
            path.rect(x, y, width, height);
            this._dirtyPath = false;
        };
        ClipRect.prototype.computeBBox = function () {
            var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
            return new BBox(x, y, width, height);
        };
        ClipRect.prototype.render = function (renderCtx) {
            var e_1, _a;
            var _b = this, enabled = _b.enabled, dirty = _b.dirty, _dirtyPath = _b._dirtyPath, children = _b.children;
            var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
            if (dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            if (_dirtyPath) {
                this.updatePath();
            }
            if (enabled) {
                ctx.save();
                this.path.draw(ctx);
                ctx.clip();
            }
            var clipBBox = enabled ? this.computeBBox() : undefined;
            var childRenderContext = __assign$e(__assign$e({}, renderCtx), { clipBBox: clipBBox });
            try {
                for (var children_1 = __values$8(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                    var child = children_1_1.value;
                    if (child.visible && (forceRender || child.dirty > RedrawType.NONE)) {
                        ctx.save();
                        child.render(childRenderContext);
                        ctx.restore();
                    }
                    else if (!child.visible) {
                        child.markClean();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _super.prototype.render.call(this, renderCtx);
            if (enabled) {
                ctx.restore();
            }
        };
        ClipRect.className = 'ClipRect';
        __decorate$j([
            SceneChangeDetection({ redraw: RedrawType.MAJOR })
        ], ClipRect.prototype, "enabled", void 0);
        __decorate$j([
            ScenePathChangeDetection()
        ], ClipRect.prototype, "x", void 0);
        __decorate$j([
            ScenePathChangeDetection()
        ], ClipRect.prototype, "y", void 0);
        __decorate$j([
            ScenePathChangeDetection()
        ], ClipRect.prototype, "width", void 0);
        __decorate$j([
            ScenePathChangeDetection()
        ], ClipRect.prototype, "height", void 0);
        return ClipRect;
    }(Node));

    var __read$h = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    /**
     * Manages the cursor styling for an element. Tracks the requested styling from distinct
     * dependents and handles conflicting styling requests.
     */
    var CursorManager = /** @class */ (function () {
        function CursorManager(element) {
            this.states = {};
            this.element = element;
        }
        CursorManager.prototype.updateCursor = function (callerId, style) {
            delete this.states[callerId];
            if (style != null) {
                this.states[callerId] = { style: style };
            }
            this.applyStates();
        };
        CursorManager.prototype.applyStates = function () {
            var styleToApply = 'default';
            // Last added entry wins.
            Object.entries(this.states)
                .reverse()
                .slice(0, 1)
                .forEach(function (_a) {
                var _b = __read$h(_a, 2); _b[0]; var style = _b[1].style;
                return (styleToApply = style);
            });
            this.element.style.cursor = styleToApply;
        };
        return CursorManager;
    }());

    var __extends$w = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __read$g = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    function isEqual(a, b) {
        if (a === b)
            return true;
        if ((a === null || a === void 0 ? void 0 : a.series) !== (b === null || b === void 0 ? void 0 : b.series))
            return false;
        if ((a === null || a === void 0 ? void 0 : a.itemId) !== (b === null || b === void 0 ? void 0 : b.itemId))
            return false;
        if ((a === null || a === void 0 ? void 0 : a.datum) !== (b === null || b === void 0 ? void 0 : b.datum))
            return false;
        return true;
    }
    /**
     * Manages the actively highlighted series/datum for a chart. Tracks the requested highlights from
     * distinct dependents and handles conflicting highlight requests.
     */
    var HighlightManager = /** @class */ (function (_super) {
        __extends$w(HighlightManager, _super);
        function HighlightManager() {
            var _this = _super.call(this) || this;
            _this.states = {};
            _this.activeHighlight = undefined;
            return _this;
        }
        HighlightManager.prototype.updateHighlight = function (callerId, highlightedDatum) {
            delete this.states[callerId];
            if (highlightedDatum != null) {
                this.states[callerId] = { highlightedDatum: highlightedDatum };
            }
            this.applyStates();
        };
        HighlightManager.prototype.getActiveHighlight = function () {
            return this.activeHighlight;
        };
        HighlightManager.prototype.applyStates = function () {
            var _this = this;
            var _a;
            var previousHighlight = this.activeHighlight;
            var highlightToApply = undefined;
            // Last added entry wins.
            Object.entries(this.states)
                .reverse()
                .slice(0, 1)
                .forEach(function (_a) {
                var _b = __read$g(_a, 2); _b[0]; var highlightedDatum = _b[1].highlightedDatum;
                return (highlightToApply = highlightedDatum);
            });
            this.activeHighlight = highlightToApply;
            var changed = !isEqual(previousHighlight, this.activeHighlight);
            if (changed) {
                (_a = this.registeredListeners['highlight-change']) === null || _a === void 0 ? void 0 : _a.forEach(function (listener) {
                    listener.handler({
                        type: 'highlight-change',
                        previousHighlight: previousHighlight,
                        currentHighlight: _this.activeHighlight,
                    });
                });
            }
        };
        return HighlightManager;
    }(BaseManager));

    var __extends$v = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$d = (undefined && undefined.__assign) || function () {
        __assign$d = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$d.apply(this, arguments);
    };
    var __decorate$i = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$b = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$b = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __values$7 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$f = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$9 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$f(arguments[i]));
        return ar;
    };
    /** Types of chart-update, in pipeline execution order. */
    var ChartUpdateType;
    (function (ChartUpdateType) {
        ChartUpdateType[ChartUpdateType["FULL"] = 0] = "FULL";
        ChartUpdateType[ChartUpdateType["PROCESS_DATA"] = 1] = "PROCESS_DATA";
        ChartUpdateType[ChartUpdateType["PERFORM_LAYOUT"] = 2] = "PERFORM_LAYOUT";
        ChartUpdateType[ChartUpdateType["SERIES_UPDATE"] = 3] = "SERIES_UPDATE";
        ChartUpdateType[ChartUpdateType["SCENE_RENDER"] = 4] = "SCENE_RENDER";
        ChartUpdateType[ChartUpdateType["NONE"] = 5] = "NONE";
    })(ChartUpdateType || (ChartUpdateType = {}));
    var Chart = /** @class */ (function (_super) {
        __extends$v(Chart, _super);
        function Chart(document, overrideDevicePixelRatio, resources) {
            if (document === void 0) { document = window.document; }
            var _a;
            var _this = _super.call(this) || this;
            _this.id = createId(_this);
            _this.processedOptions = {};
            _this.userOptions = {};
            _this.queuedUserOptions = [];
            _this.seriesRoot = new ClipRect();
            _this.background = new Background();
            _this._debug = false;
            _this.extraDebugStats = {};
            _this._container = undefined;
            _this._data = [];
            _this._autoSize = false;
            _this.padding = new Padding(20);
            _this._title = undefined;
            _this._subtitle = undefined;
            _this._destroyed = false;
            _this._pendingFactoryUpdates = [];
            _this._performUpdateNoRenderCount = 0;
            _this._performUpdateType = ChartUpdateType.NONE;
            _this.seriesToUpdate = new Set();
            _this.performUpdateTrigger = debouncedCallback(function (_a) {
                var count = _a.count;
                return __awaiter$b(_this, void 0, void 0, function () {
                    var error_1;
                    return __generator$b(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (this._destroyed)
                                    return [2 /*return*/];
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.performUpdate(count)];
                            case 2:
                                _b.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_1 = _b.sent();
                                this._lastPerformUpdateError = error_1;
                                console.error(error_1);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            });
            _this._axes = [];
            _this._series = [];
            _this.lastInteractionEvent = undefined;
            _this.pointerScheduler = debouncedAnimationFrame(function () {
                if (_this.lastInteractionEvent) {
                    _this.handlePointer(_this.lastInteractionEvent);
                }
                _this.lastInteractionEvent = undefined;
            });
            var scene = resources === null || resources === void 0 ? void 0 : resources.scene;
            var element = (_a = resources === null || resources === void 0 ? void 0 : resources.element) !== null && _a !== void 0 ? _a : document.createElement('div');
            var container = resources === null || resources === void 0 ? void 0 : resources.container;
            var root = new Group({ name: 'root' });
            // Prevent the scene from rendering chart components in an invalid state
            // (before first layout is performed).
            root.visible = false;
            root.append(_this.seriesRoot);
            var background = _this.background;
            background.fill = 'white';
            root.appendChild(background.node);
            _this.axisGroup = new Group({ name: 'Axes', layer: true, zIndex: Layers.AXIS_ZINDEX });
            root.appendChild(_this.axisGroup);
            _this.element = element;
            element.classList.add('ag-chart-wrapper');
            element.style.position = 'relative';
            _this.scene = scene !== null && scene !== void 0 ? scene : new Scene({ document: document, overrideDevicePixelRatio: overrideDevicePixelRatio });
            _this.scene.debug.consoleLog = _this._debug;
            _this.scene.root = root;
            _this.scene.container = element;
            _this.autoSize = true;
            _this.interactionManager = new InteractionManager(element);
            _this.cursorManager = new CursorManager(element);
            _this.highlightManager = new HighlightManager();
            background.width = _this.scene.width;
            background.height = _this.scene.height;
            SizeMonitor.observe(_this.element, function (size) {
                var width = size.width, height = size.height;
                if (!_this.autoSize) {
                    return;
                }
                if (width === 0 && height === 0) {
                    return;
                }
                if (width === _this.width && height === _this.height) {
                    return;
                }
                _this._lastAutoSize = [width, height];
                _this.resize(width, height);
            });
            _this.tooltip = new Tooltip(_this.scene.canvas.element, document, document.body);
            _this.legend = new Legend(_this, _this.interactionManager, _this.cursorManager, _this.highlightManager);
            _this.container = container;
            // Add interaction listeners last so child components are registered first.
            _this.interactionManager.addListener('click', function (event) { return _this.onClick(event); });
            _this.interactionManager.addListener('hover', function (event) { return _this.onMouseMove(event); });
            _this.interactionManager.addListener('leave', function () { return _this.togglePointer(false); });
            _this.interactionManager.addListener('page-left', function () { return _this.destroy(); });
            _this.highlightManager.addListener('highlight-change', function (event) { return _this.changeHighlightDatum(event); });
            return _this;
        }
        Chart.prototype.getOptions = function () {
            var _a;
            var queuedUserOptions = this.queuedUserOptions;
            var lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : this.userOptions;
            return jsonMerge([lastUpdateOptions]);
        };
        Object.defineProperty(Chart.prototype, "debug", {
            get: function () {
                return this._debug;
            },
            set: function (value) {
                this._debug = value;
                this.scene.debug.consoleLog = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "container", {
            get: function () {
                return this._container;
            },
            set: function (value) {
                if (this._container !== value) {
                    var parentNode = this.element.parentNode;
                    if (parentNode != null) {
                        parentNode.removeChild(this.element);
                    }
                    if (value && !this.destroyed) {
                        value.appendChild(this.element);
                    }
                    this._container = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (data) {
                this._data = data;
                this.series.forEach(function (series) { return (series.data = data); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "width", {
            get: function () {
                return this.scene.width;
            },
            set: function (value) {
                this.autoSize = false;
                if (this.width !== value) {
                    this.resize(value, this.height);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "height", {
            get: function () {
                return this.scene.height;
            },
            set: function (value) {
                this.autoSize = false;
                if (this.height !== value) {
                    this.resize(this.width, value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "autoSize", {
            get: function () {
                return this._autoSize;
            },
            set: function (value) {
                if (this._autoSize === value) {
                    return;
                }
                this._autoSize = value;
                var style = this.element.style;
                if (value) {
                    style.display = 'block';
                    style.width = '100%';
                    style.height = '100%';
                    if (!this._lastAutoSize) {
                        return;
                    }
                    this.resize(this._lastAutoSize[0], this._lastAutoSize[1]);
                }
                else {
                    style.display = 'inline-block';
                    style.width = 'auto';
                    style.height = 'auto';
                }
            },
            enumerable: false,
            configurable: true
        });
        Chart.prototype.download = function (fileName, fileFormat) {
            this.scene.download(fileName, fileFormat);
        };
        Object.defineProperty(Chart.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (caption) {
                var root = this.scene.root;
                if (this._title != null) {
                    root === null || root === void 0 ? void 0 : root.removeChild(this._title.node);
                }
                this._title = caption;
                if (this._title != null) {
                    root === null || root === void 0 ? void 0 : root.appendChild(this._title.node);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "subtitle", {
            get: function () {
                return this._subtitle;
            },
            set: function (caption) {
                var root = this.scene.root;
                if (this._subtitle != null) {
                    root === null || root === void 0 ? void 0 : root.removeChild(this._subtitle.node);
                }
                this._subtitle = caption;
                if (this._subtitle != null) {
                    root === null || root === void 0 ? void 0 : root.appendChild(this._subtitle.node);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "destroyed", {
            get: function () {
                return this._destroyed;
            },
            enumerable: false,
            configurable: true
        });
        Chart.prototype.destroy = function (opts) {
            if (this._destroyed) {
                return;
            }
            var keepTransferableResources = opts === null || opts === void 0 ? void 0 : opts.keepTransferableResources;
            var result = undefined;
            this._performUpdateType = ChartUpdateType.NONE;
            this._pendingFactoryUpdates.splice(0);
            this.tooltip.destroy();
            SizeMonitor.unobserve(this.element);
            this.interactionManager.destroy();
            if (keepTransferableResources) {
                this.scene.strip();
                result = { container: this.container, scene: this.scene, element: this.element };
            }
            else {
                this.scene.destroy();
                this.container = undefined;
            }
            this.series.forEach(function (s) { return s.destroy(); });
            this.series = [];
            this._destroyed = true;
            return result;
        };
        Chart.prototype.log = function (opts) {
            if (this.debug) {
                console.log(opts);
            }
        };
        Chart.prototype.togglePointer = function (visible) {
            if (this.tooltip.enabled) {
                this.tooltip.toggle(visible);
            }
            if (!visible) {
                this.highlightManager.updateHighlight(this.id);
            }
            if (!visible && this.lastInteractionEvent) {
                this.lastInteractionEvent = undefined;
            }
        };
        Chart.prototype.requestFactoryUpdate = function (cb) {
            var callbacks = this._pendingFactoryUpdates;
            var count = callbacks.length;
            if (count === 0) {
                callbacks.push(cb);
                this._processCallbacks();
            }
            else {
                // Factory callback process already running, the callback will be invoked asynchronously.
                // Clear the queue after the first callback to prevent unnecessary re-renderings.
                callbacks.splice(1, count - 1, cb);
            }
        };
        Chart.prototype._processCallbacks = function () {
            return __awaiter$b(this, void 0, void 0, function () {
                var callbacks, e_1;
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            callbacks = this._pendingFactoryUpdates;
                            _a.label = 1;
                        case 1:
                            if (!(callbacks.length > 0)) return [3 /*break*/, 7];
                            if (!this.updatePending) return [3 /*break*/, 3];
                            return [4 /*yield*/, sleep(1)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 1]; // Make sure to check queue has an item before continuing.
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, callbacks[0]()];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            e_1 = _a.sent();
                            console.error(e_1);
                            return [3 /*break*/, 6];
                        case 6:
                            callbacks.shift();
                            return [3 /*break*/, 1];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(Chart.prototype, "performUpdateType", {
            get: function () {
                return this._performUpdateType;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "updatePending", {
            get: function () {
                return this._performUpdateType !== ChartUpdateType.NONE || this.lastInteractionEvent != null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "lastPerformUpdateError", {
            get: function () {
                return this._lastPerformUpdateError;
            },
            enumerable: false,
            configurable: true
        });
        Chart.prototype.awaitUpdateCompletion = function () {
            return __awaiter$b(this, void 0, void 0, function () {
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.performUpdateTrigger.await()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Chart.prototype.update = function (type, opts) {
            var e_2, _a;
            if (type === void 0) { type = ChartUpdateType.FULL; }
            var _b = opts || {}, _c = _b.forceNodeDataRefresh, forceNodeDataRefresh = _c === void 0 ? false : _c, _d = _b.seriesToUpdate, seriesToUpdate = _d === void 0 ? this.series : _d;
            if (forceNodeDataRefresh) {
                this.series.forEach(function (series) { return series.markNodeDataDirty(); });
            }
            try {
                for (var seriesToUpdate_1 = __values$7(seriesToUpdate), seriesToUpdate_1_1 = seriesToUpdate_1.next(); !seriesToUpdate_1_1.done; seriesToUpdate_1_1 = seriesToUpdate_1.next()) {
                    var series = seriesToUpdate_1_1.value;
                    this.seriesToUpdate.add(series);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (seriesToUpdate_1_1 && !seriesToUpdate_1_1.done && (_a = seriesToUpdate_1.return)) _a.call(seriesToUpdate_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (type < this._performUpdateType) {
                this._performUpdateType = type;
                this.performUpdateTrigger.schedule();
            }
        };
        Chart.prototype.performUpdate = function (count) {
            return __awaiter$b(this, void 0, void 0, function () {
                var _a, performUpdateType, extraDebugStats, splits, _b, count_1, seriesRect_1, seriesUpdates, end;
                return __generator$b(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = this, performUpdateType = _a._performUpdateType, extraDebugStats = _a.extraDebugStats;
                            splits = [performance.now()];
                            _b = performUpdateType;
                            switch (_b) {
                                case ChartUpdateType.FULL: return [3 /*break*/, 1];
                                case ChartUpdateType.PROCESS_DATA: return [3 /*break*/, 1];
                                case ChartUpdateType.PERFORM_LAYOUT: return [3 /*break*/, 3];
                                case ChartUpdateType.SERIES_UPDATE: return [3 /*break*/, 5];
                                case ChartUpdateType.SCENE_RENDER: return [3 /*break*/, 7];
                                case ChartUpdateType.NONE: return [3 /*break*/, 9];
                            }
                            return [3 /*break*/, 10];
                        case 1: return [4 /*yield*/, this.processData()];
                        case 2:
                            _c.sent();
                            splits.push(performance.now());
                            // Disable tooltip/highlight if the data fundamentally shifted.
                            this.disablePointer();
                            _c.label = 3;
                        case 3:
                            if (this._autoSize && !this._lastAutoSize) {
                                count_1 = this._performUpdateNoRenderCount++;
                                if (count_1 < 5) {
                                    // Reschedule if canvas size hasn't been set yet to avoid a race.
                                    this._performUpdateType = ChartUpdateType.PERFORM_LAYOUT;
                                    this.performUpdateTrigger.schedule();
                                    return [3 /*break*/, 10];
                                }
                                // After several failed passes, continue and accept there maybe a redundant
                                // render. Sometimes this case happens when we already have the correct
                                // width/height, and we end up never rendering the chart in that scenario.
                            }
                            this._performUpdateNoRenderCount = 0;
                            return [4 /*yield*/, this.performLayout()];
                        case 4:
                            _c.sent();
                            splits.push(performance.now());
                            _c.label = 5;
                        case 5:
                            seriesRect_1 = this.seriesRect;
                            seriesUpdates = __spread$9(this.seriesToUpdate).map(function (series) { return series.update({ seriesRect: seriesRect_1 }); });
                            this.seriesToUpdate.clear();
                            return [4 /*yield*/, Promise.all(seriesUpdates)];
                        case 6:
                            _c.sent();
                            splits.push(performance.now());
                            _c.label = 7;
                        case 7: return [4 /*yield*/, this.scene.render({ debugSplitTimes: splits, extraDebugStats: extraDebugStats })];
                        case 8:
                            _c.sent();
                            this.extraDebugStats = {};
                            _c.label = 9;
                        case 9:
                            // Do nothing.
                            this._performUpdateType = ChartUpdateType.NONE;
                            _c.label = 10;
                        case 10:
                            end = performance.now();
                            this.log({
                                chart: this,
                                durationMs: Math.round((end - splits[0]) * 100) / 100,
                                count: count,
                                performUpdateType: ChartUpdateType[performUpdateType],
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(Chart.prototype, "axes", {
            get: function () {
                return this._axes;
            },
            set: function (values) {
                var _this = this;
                this._axes.forEach(function (axis) { return axis.detachAxis(_this.axisGroup); });
                // make linked axes go after the regular ones (simulates stable sort by `linkedTo` property)
                this._axes = values.filter(function (a) { return !a.linkedTo; }).concat(values.filter(function (a) { return a.linkedTo; }));
                this._axes.forEach(function (axis) { return axis.attachAxis(_this.axisGroup); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (values) {
                var _this = this;
                this.removeAllSeries();
                values.forEach(function (series) { return _this.addSeries(series); });
            },
            enumerable: false,
            configurable: true
        });
        Chart.prototype.addSeries = function (series, before) {
            var _a = this, allSeries = _a.series, seriesRoot = _a.seriesRoot;
            var canAdd = allSeries.indexOf(series) < 0;
            if (canAdd) {
                var beforeIndex = before ? allSeries.indexOf(before) : -1;
                if (beforeIndex >= 0) {
                    allSeries.splice(beforeIndex, 0, series);
                    seriesRoot.insertBefore(series.rootGroup, before.rootGroup);
                }
                else {
                    allSeries.push(series);
                    seriesRoot.append(series.rootGroup);
                }
                this.initSeries(series);
                return true;
            }
            return false;
        };
        Chart.prototype.initSeries = function (series) {
            series.chart = this;
            series.highlightManager = this.highlightManager;
            if (!series.data) {
                series.data = this.data;
            }
            series.addEventListener('nodeClick', this.onSeriesNodeClick, this);
        };
        Chart.prototype.freeSeries = function (series) {
            series.chart = undefined;
            series.removeEventListener('nodeClick', this.onSeriesNodeClick, this);
        };
        Chart.prototype.removeAllSeries = function () {
            var _this = this;
            this.series.forEach(function (series) {
                _this.freeSeries(series);
                _this.seriesRoot.removeChild(series.rootGroup);
            });
            this._series = []; // using `_series` instead of `series` to prevent infinite recursion
        };
        Chart.prototype.assignSeriesToAxes = function () {
            var _this = this;
            this.axes.forEach(function (axis) {
                axis.boundSeries = _this.series.filter(function (s) {
                    var seriesAxis = axis.direction === ChartAxisDirection.X ? s.xAxis : s.yAxis;
                    return seriesAxis === axis;
                });
            });
        };
        Chart.prototype.assignAxesToSeries = function (force) {
            var _this = this;
            if (force === void 0) { force = false; }
            // This method has to run before `assignSeriesToAxes`.
            var directionToAxesMap = {};
            this.axes.forEach(function (axis) {
                var direction = axis.direction;
                var directionAxes = directionToAxesMap[direction] || (directionToAxesMap[direction] = []);
                directionAxes.push(axis);
            });
            this.series.forEach(function (series) {
                series.directions.forEach(function (direction) {
                    var currentAxis = direction === ChartAxisDirection.X ? series.xAxis : series.yAxis;
                    if (currentAxis && !force) {
                        return;
                    }
                    var directionAxes = directionToAxesMap[direction];
                    if (!directionAxes) {
                        console.warn("AG Charts - no available axis for direction [" + direction + "]; check series and axes configuration.");
                        return;
                    }
                    var seriesKeys = series.getKeys(direction);
                    var newAxis = _this.findMatchingAxis(directionAxes, series.getKeys(direction));
                    if (!newAxis) {
                        console.warn("AG Charts - no matching axis for direction [" + direction + "] and keys [" + seriesKeys + "]; check series and axes configuration.");
                        return;
                    }
                    if (direction === ChartAxisDirection.X) {
                        series.xAxis = newAxis;
                    }
                    else {
                        series.yAxis = newAxis;
                    }
                });
            });
        };
        Chart.prototype.findMatchingAxis = function (directionAxes, directionKeys) {
            var e_3, _a, e_4, _b;
            try {
                for (var directionAxes_1 = __values$7(directionAxes), directionAxes_1_1 = directionAxes_1.next(); !directionAxes_1_1.done; directionAxes_1_1 = directionAxes_1.next()) {
                    var axis = directionAxes_1_1.value;
                    var axisKeys = axis.keys;
                    if (!axisKeys.length) {
                        return axis;
                    }
                    if (!directionKeys) {
                        continue;
                    }
                    try {
                        for (var directionKeys_1 = (e_4 = void 0, __values$7(directionKeys)), directionKeys_1_1 = directionKeys_1.next(); !directionKeys_1_1.done; directionKeys_1_1 = directionKeys_1.next()) {
                            var directionKey = directionKeys_1_1.value;
                            if (axisKeys.indexOf(directionKey) >= 0) {
                                return axis;
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (directionKeys_1_1 && !directionKeys_1_1.done && (_b = directionKeys_1.return)) _b.call(directionKeys_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (directionAxes_1_1 && !directionAxes_1_1.done && (_a = directionAxes_1.return)) _a.call(directionAxes_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        Chart.prototype.resize = function (width, height) {
            if (this.scene.resize(width, height)) {
                this.background.width = this.width;
                this.background.height = this.height;
                this.disablePointer();
                this.update(ChartUpdateType.PERFORM_LAYOUT, { forceNodeDataRefresh: true });
            }
        };
        Chart.prototype.processData = function () {
            return __awaiter$b(this, void 0, void 0, function () {
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.axes.length > 0 || this.series.some(function (s) { return s instanceof CartesianSeries; })) {
                                this.assignAxesToSeries(true);
                                this.assignSeriesToAxes();
                            }
                            return [4 /*yield*/, Promise.all(this.series.map(function (s) { return s.processData(); }))];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.updateLegend()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Chart.prototype.placeLabels = function () {
            var e_5, _a;
            var visibleSeries = [];
            var data = [];
            try {
                for (var _b = __values$7(this.series), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var series = _c.value;
                    if (!series.visible) {
                        continue;
                    }
                    var labelData = series.getLabelData();
                    if (!(labelData && isPointLabelDatum(labelData[0]))) {
                        continue;
                    }
                    data.push(labelData);
                    visibleSeries.push(series);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            var seriesRect = this.seriesRect;
            var labels = seriesRect && data.length > 0
                ? placeLabels(data, { x: 0, y: 0, width: seriesRect.width, height: seriesRect.height })
                : [];
            return new Map(labels.map(function (l, i) { return [visibleSeries[i], l]; }));
        };
        Chart.prototype.updateLegend = function () {
            return __awaiter$b(this, void 0, void 0, function () {
                var legendData, formatter;
                return __generator$b(this, function (_a) {
                    legendData = [];
                    this.series
                        .filter(function (s) { return s.showInLegend; })
                        .forEach(function (series) {
                        legendData.push.apply(legendData, __spread$9(series.getLegendData()));
                    });
                    formatter = this.legend.item.label.formatter;
                    if (formatter) {
                        legendData.forEach(function (datum) {
                            return (datum.label.text = formatter({
                                get id() {
                                    doOnce(function () {
                                        return console.warn("AG Charts - LegendLabelFormatterParams.id is deprecated, use seriesId instead", datum);
                                    }, "LegendLabelFormatterParams.id deprecated");
                                    return datum.seriesId;
                                },
                                itemId: datum.itemId,
                                value: datum.label.text,
                                seriesId: datum.seriesId,
                            }));
                        });
                    }
                    this.legend.data = legendData;
                    return [2 /*return*/];
                });
            });
        };
        Chart.prototype.positionCaptions = function (shrinkRect) {
            var _a = this, title = _a._title, subtitle = _a._subtitle;
            var newShrinkRect = shrinkRect.clone();
            var positionAndShrinkBBox = function (caption) {
                var _a;
                var baseY = newShrinkRect.y;
                caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;
                caption.node.y = baseY;
                var bbox = caption.node.computeBBox();
                // As the bbox (x,y) ends up at a different location than specified above, we need to
                // take it into consideration when calculating how much space needs to be reserved to
                // accommodate the caption.
                var bboxHeight = Math.ceil(bbox.y - baseY + bbox.height + ((_a = caption.spacing) !== null && _a !== void 0 ? _a : 0));
                newShrinkRect.shrink(bboxHeight, 'top');
            };
            if (!title) {
                return newShrinkRect;
            }
            title.node.visible = title.enabled;
            if (title.enabled) {
                positionAndShrinkBBox(title);
            }
            if (!subtitle) {
                return newShrinkRect;
            }
            subtitle.node.visible = title.enabled && subtitle.enabled;
            if (title.enabled && subtitle.enabled) {
                positionAndShrinkBBox(subtitle);
            }
            return newShrinkRect;
        };
        Chart.prototype.positionLegend = function (shrinkRect) {
            var legend = this.legend;
            var newShrinkRect = shrinkRect.clone();
            if (!legend.enabled || !legend.data.length) {
                return newShrinkRect;
            }
            var _a = __read$f(this.calculateLegendDimensions(shrinkRect), 2), legendWidth = _a[0], legendHeight = _a[1];
            var translationX = 0;
            var translationY = 0;
            legend.translationX = 0;
            legend.translationY = 0;
            legend.performLayout(legendWidth, legendHeight);
            var legendBBox = legend.computePagedBBox();
            var calculateTranslationPerpendicularDimension = function () {
                switch (legend.position) {
                    case 'top':
                        return 0;
                    case 'bottom':
                        return shrinkRect.height - legendBBox.height;
                    case 'left':
                        return 0;
                    case 'right':
                    default:
                        return shrinkRect.width - legendBBox.width;
                }
            };
            if (legend.visible) {
                switch (legend.position) {
                    case 'top':
                    case 'bottom':
                        translationX = (shrinkRect.width - legendBBox.width) / 2;
                        translationY = calculateTranslationPerpendicularDimension();
                        newShrinkRect.shrink(legendBBox.height, legend.position);
                        break;
                    case 'left':
                    case 'right':
                    default:
                        translationX = calculateTranslationPerpendicularDimension();
                        translationY = (shrinkRect.height - legendBBox.height) / 2;
                        newShrinkRect.shrink(legendBBox.width, legend.position);
                }
                // Round off for pixel grid alignment to work properly.
                legend.translationX = Math.floor(-legendBBox.x + shrinkRect.x + translationX);
                legend.translationY = Math.floor(-legendBBox.y + shrinkRect.y + translationY);
            }
            return newShrinkRect;
        };
        Chart.prototype.calculateLegendDimensions = function (shrinkRect) {
            var legend = this.legend;
            var width = shrinkRect.width, height = shrinkRect.height;
            var aspectRatio = width / height;
            var maxCoefficient = 0.5;
            var minHeightCoefficient = 0.2;
            var minWidthCoefficient = 0.25;
            var legendWidth = 0;
            var legendHeight = 0;
            switch (legend.position) {
                case 'top':
                case 'bottom':
                    // A horizontal legend should take maximum between 20 to 50 percent of the chart height if height is larger than width
                    // and maximum 20 percent of the chart height if height is smaller than width.
                    var heightCoefficient = aspectRatio < 1
                        ? Math.min(maxCoefficient, minHeightCoefficient * (1 / aspectRatio))
                        : minHeightCoefficient;
                    legendWidth = legend.maxWidth ? Math.min(legend.maxWidth, width) : width;
                    legendHeight = legend.maxHeight
                        ? Math.min(legend.maxHeight, height)
                        : Math.round(height * heightCoefficient);
                    break;
                case 'left':
                case 'right':
                default:
                    // A vertical legend should take maximum between 25 to 50 percent of the chart width if width is larger than height
                    // and maximum 25 percent of the chart width if width is smaller than height.
                    var widthCoefficient = aspectRatio > 1 ? Math.min(maxCoefficient, minWidthCoefficient * aspectRatio) : minWidthCoefficient;
                    legendWidth = legend.maxWidth ? Math.min(legend.maxWidth, width) : Math.round(width * widthCoefficient);
                    legendHeight = legend.maxHeight ? Math.min(legend.maxHeight, height) : height;
            }
            return [legendWidth, legendHeight];
        };
        Chart.prototype.getSeriesRect = function () {
            return this.seriesRect;
        };
        // x/y are local canvas coordinates in CSS pixels, not actual pixels
        Chart.prototype.pickSeriesNode = function (point) {
            var e_6, _a;
            var _b, _c;
            var tracking = this.tooltip.tracking;
            var start = performance.now();
            // Disable 'nearest match' options if tooltip.tracking is enabled.
            var pickModes = tracking ? undefined : [SeriesNodePickMode.EXACT_SHAPE_MATCH];
            // Iterate through series in reverse, as later declared series appears on top of earlier
            // declared series.
            var reverseSeries = __spread$9(this.series).reverse();
            var result = undefined;
            try {
                for (var reverseSeries_1 = __values$7(reverseSeries), reverseSeries_1_1 = reverseSeries_1.next(); !reverseSeries_1_1.done; reverseSeries_1_1 = reverseSeries_1.next()) {
                    var series = reverseSeries_1_1.value;
                    if (!series.visible || !series.rootGroup.visible) {
                        continue;
                    }
                    var _d = (_b = series.pickNode(point, pickModes)) !== null && _b !== void 0 ? _b : {}, match = _d.match, distance = _d.distance;
                    if (!match || distance == null) {
                        continue;
                    }
                    if (!result || result.distance > distance) {
                        result = { series: series, distance: distance, datum: match };
                    }
                    if (distance === 0) {
                        break;
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (reverseSeries_1_1 && !reverseSeries_1_1.done && (_a = reverseSeries_1.return)) _a.call(reverseSeries_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
            this.extraDebugStats['pickSeriesNode'] = Math.round(((_c = this.extraDebugStats['pickSeriesNode']) !== null && _c !== void 0 ? _c : 0) + (performance.now() - start));
            return result;
        };
        Chart.prototype.onMouseMove = function (event) {
            if (this.tooltip.enabled) {
                if (this.tooltip.delay > 0) {
                    this.togglePointer(false);
                }
            }
            this.lastInteractionEvent = event;
            this.pointerScheduler.schedule();
            this.extraDebugStats['mouseX'] = event.offsetX;
            this.extraDebugStats['mouseY'] = event.offsetY;
            this.update(ChartUpdateType.SCENE_RENDER);
        };
        Chart.prototype.disablePointer = function () {
            this.highlightManager.updateHighlight(this.id);
            this.togglePointer(false);
        };
        Chart.prototype.handlePointer = function (event) {
            var _this = this;
            var lastPick = this.lastPick;
            var pageX = event.pageX, pageY = event.pageY, offsetX = event.offsetX, offsetY = event.offsetY;
            var disablePointer = function () {
                if (lastPick) {
                    // Cursor moved from a non-marker node to empty space.
                    _this.disablePointer();
                }
            };
            if (!(this.seriesRect && this.seriesRect.containsPoint(offsetX, offsetY))) {
                disablePointer();
                return;
            }
            var pick = this.pickSeriesNode({ x: offsetX, y: offsetY });
            if (!pick) {
                disablePointer();
                return;
            }
            var meta = { pageX: pageX, pageY: pageY, offsetX: offsetX, offsetY: offsetY, event: event.sourceEvent };
            if (!lastPick || lastPick.datum !== pick.datum) {
                this.onSeriesDatumPick(meta, pick.datum);
                return;
            }
            lastPick.event = event.sourceEvent;
            if (this.tooltip.enabled && pick.series.tooltip.enabled) {
                this.tooltip.show(this.mergePointerDatum(meta, pick.datum));
            }
        };
        Chart.prototype.onClick = function (event) {
            if (this.checkSeriesNodeClick(event)) {
                this.update(ChartUpdateType.SERIES_UPDATE);
                return;
            }
            this.fireEvent({
                type: 'click',
                event: event.sourceEvent,
            });
        };
        Chart.prototype.checkSeriesNodeClick = function (event) {
            var lastPick = this.lastPick;
            if (lastPick === null || lastPick === void 0 ? void 0 : lastPick.datum) {
                var datum = lastPick.datum;
                datum.series.fireNodeClickEvent(event.sourceEvent, datum);
                return true;
            }
            else if (event.sourceEvent.type.startsWith('touch')) {
                var pick = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY });
                if (pick) {
                    pick.series.fireNodeClickEvent(event.sourceEvent, pick.datum);
                    return true;
                }
            }
            return false;
        };
        Chart.prototype.onSeriesNodeClick = function (event) {
            var seriesNodeClickEvent = __assign$d(__assign$d({}, event), { type: 'seriesNodeClick' });
            Object.defineProperty(seriesNodeClickEvent, 'series', {
                enumerable: false,
                // Should display the deprecation warning
                get: function () { return event.series; },
            });
            this.fireEvent(seriesNodeClickEvent);
        };
        Chart.prototype.onSeriesDatumPick = function (meta, datum) {
            var lastPick = this.lastPick;
            if (lastPick) {
                if (lastPick.datum === datum) {
                    return;
                }
            }
            this.highlightManager.updateHighlight(this.id, datum);
            if (datum) {
                meta = this.mergePointerDatum(meta, datum);
            }
            var tooltipEnabled = this.tooltip.enabled && datum.series.tooltip.enabled;
            var html = tooltipEnabled && datum.series.getTooltipHtml(datum);
            if (html) {
                this.tooltip.show(meta, html);
            }
        };
        Chart.prototype.mergePointerDatum = function (meta, datum) {
            if (datum.point) {
                var _a = datum.point, x = _a.x, y = _a.y;
                var canvas = this.scene.canvas;
                var point = datum.series.rootGroup.inverseTransformPoint(x, y);
                var canvasRect = canvas.element.getBoundingClientRect();
                return __assign$d(__assign$d({}, meta), { pageX: Math.round(canvasRect.left + window.scrollX + point.x), pageY: Math.round(canvasRect.top + window.scrollY + point.y), offsetX: Math.round(point.x), offsetY: Math.round(point.y) });
            }
            return meta;
        };
        Chart.prototype.changeHighlightDatum = function (event) {
            var seriesToUpdate = new Set();
            var _a = event.currentHighlight || {}, _b = _a.series, newSeries = _b === void 0 ? undefined : _b, newDatum = _a.datum;
            var _c = event.previousHighlight || {}, _d = _c.series, lastSeries = _d === void 0 ? undefined : _d, lastDatum = _c.datum;
            if (lastSeries) {
                seriesToUpdate.add(lastSeries);
            }
            if (newSeries) {
                seriesToUpdate.add(newSeries);
            }
            // Adjust cursor if a specific datum is highlighted, rather than just a series.
            if ((lastSeries === null || lastSeries === void 0 ? void 0 : lastSeries.cursor) && lastDatum) {
                this.cursorManager.updateCursor(lastSeries.id);
            }
            if ((newSeries === null || newSeries === void 0 ? void 0 : newSeries.cursor) && newDatum) {
                this.cursorManager.updateCursor(newSeries.id, newSeries.cursor);
            }
            this.lastPick = event.currentHighlight ? { datum: event.currentHighlight } : undefined;
            var updateAll = newSeries == null || lastSeries == null;
            if (updateAll) {
                this.update(ChartUpdateType.SERIES_UPDATE);
            }
            else {
                this.update(ChartUpdateType.SERIES_UPDATE, { seriesToUpdate: seriesToUpdate });
            }
        };
        Chart.prototype.waitForUpdate = function (timeoutMs) {
            if (timeoutMs === void 0) { timeoutMs = 5000; }
            return __awaiter$b(this, void 0, void 0, function () {
                var start;
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            start = performance.now();
                            _a.label = 1;
                        case 1:
                            if (!(this._pendingFactoryUpdates.length > 0 || this.updatePending)) return [3 /*break*/, 3];
                            if (performance.now() - start > timeoutMs) {
                                throw new Error('waitForUpdate() timeout reached.');
                            }
                            return [4 /*yield*/, sleep(5)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 1];
                        case 3: return [4 /*yield*/, this.awaitUpdateCompletion()];
                        case 4:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        __decorate$i([
            Validate(BOOLEAN)
        ], Chart.prototype, "_autoSize", void 0);
        return Chart;
    }(Observable));

    /**
     * The tree layout is calculated in abstract x/y coordinates, where the root is at (0, 0)
     * and the tree grows downward from the root.
     */
    var TreeNode = /** @class */ (function () {
        function TreeNode(label, parent, number) {
            if (label === void 0) { label = ''; }
            if (number === void 0) { number = 0; }
            this.x = 0;
            this.y = 0;
            this.subtreeLeft = NaN;
            this.subtreeRight = NaN;
            this.screenX = 0;
            this.screenY = 0;
            this.children = [];
            this.leafCount = 0;
            this.prelim = 0;
            this.mod = 0;
            this.ancestor = this;
            this.change = 0;
            this.shift = 0;
            this.label = label;
            // screenX and screenY are meant to be recomputed from (layout) x and y
            // when the tree is resized (without performing another layout)
            this.parent = parent;
            this.depth = parent ? parent.depth + 1 : 0;
            this.number = number;
        }
        TreeNode.prototype.getLeftSibling = function () {
            return this.number > 0 && this.parent ? this.parent.children[this.number - 1] : undefined;
        };
        TreeNode.prototype.getLeftmostSibling = function () {
            return this.number > 0 && this.parent ? this.parent.children[0] : undefined;
        };
        // traverse the left contour of a subtree, return the successor of v on this contour
        TreeNode.prototype.nextLeft = function () {
            return this.children ? this.children[0] : this.thread;
        };
        // traverse the right contour of a subtree, return the successor of v on this contour
        TreeNode.prototype.nextRight = function () {
            return this.children ? this.children[this.children.length - 1] : this.thread;
        };
        TreeNode.prototype.getSiblings = function () {
            var _this = this;
            return this.parent ? this.parent.children.filter(function (_, i) { return i !== _this.number; }) : [];
        };
        return TreeNode;
    }());
    /**
     * Converts an array of ticks, where each tick has an array of labels, to a label tree.
     * If `pad` is `true`, will ensure that every branch matches the depth of the tree by
     * creating empty labels.
     */
    function ticksToTree(ticks, pad) {
        if (pad === void 0) { pad = true; }
        var root = new TreeNode();
        var depth = 0;
        if (pad) {
            ticks.forEach(function (tick) { return (depth = Math.max(depth, tick.labels.length)); });
        }
        ticks.forEach(function (tick) {
            if (pad) {
                while (tick.labels.length < depth) {
                    tick.labels.unshift('');
                }
            }
            insertTick(root, tick);
        });
        return root;
    }
    function insertTick(root, tick) {
        var pathParts = tick.labels.slice().reverse(); // path elements from root to leaf label
        var lastPartIndex = pathParts.length - 1;
        pathParts.forEach(function (pathPart, partIndex) {
            var children = root.children;
            var existingNode = find(children, function (child) { return child.label === pathPart; });
            var isNotLeaf = partIndex !== lastPartIndex;
            if (existingNode && isNotLeaf) {
                // the isNotLeaf check is to allow duplicate leafs
                root = existingNode;
            }
            else {
                var node = new TreeNode(pathPart, root);
                node.number = children.length;
                children.push(node);
                if (isNotLeaf) {
                    root = node;
                }
            }
        });
    }
    // Shift the subtree.
    function moveSubtree(wm, wp, shift) {
        var subtrees = wp.number - wm.number;
        var ratio = shift / subtrees;
        wp.change -= ratio;
        wp.shift += shift;
        wm.change += ratio;
        wp.prelim += shift;
        wp.mod += shift;
    }
    function ancestor(vim, v, defaultAncestor) {
        return v.getSiblings().indexOf(vim.ancestor) >= 0 ? vim.ancestor : defaultAncestor;
    }
    // Spaces out the children.
    function executeShifts(v) {
        var children = v.children;
        if (children) {
            var shift = 0;
            var change = 0;
            for (var i = children.length - 1; i >= 0; i--) {
                var w = children[i];
                w.prelim += shift;
                w.mod += shift;
                change += w.change;
                shift += w.shift + change;
            }
        }
    }
    // Moves current subtree with v as the root if some nodes are conflicting in space.
    function apportion(v, defaultAncestor, distance) {
        var w = v.getLeftSibling();
        if (w) {
            var vop = v;
            var vip = v;
            var vim = w;
            var vom = vip.getLeftmostSibling();
            var sip = vip.mod;
            var sop = vop.mod;
            var sim = vim.mod;
            var som = vom.mod;
            while (vim.nextRight() && vip.nextLeft()) {
                vim = vim.nextRight();
                vip = vip.nextLeft();
                vom = vom.nextLeft();
                vop = vop.nextRight();
                vop.ancestor = v;
                var shift = vim.prelim + sim - (vip.prelim + sip) + distance;
                if (shift > 0) {
                    moveSubtree(ancestor(vim, v, defaultAncestor), v, shift);
                    sip += shift;
                    sop += shift;
                }
                sim += vim.mod;
                sip += vip.mod;
                som += vom.mod;
                sop += vop.mod;
            }
            if (vim.nextRight() && !vop.nextRight()) {
                vop.thread = vim.nextRight();
                vop.mod += sim - sop;
            }
            else {
                if (vip.nextLeft() && !vom.nextLeft()) {
                    vom.thread = vip.nextLeft();
                    vom.mod += sip - som;
                }
                defaultAncestor = v;
            }
        }
        return defaultAncestor;
    }
    // Compute the preliminary x-coordinate of node and its children (recursively).
    function firstWalk(node, distance) {
        var children = node.children;
        if (children.length) {
            var defaultAncestor_1 = children[0];
            children.forEach(function (child) {
                firstWalk(child, distance);
                defaultAncestor_1 = apportion(child, defaultAncestor_1, distance);
            });
            executeShifts(node);
            var midpoint = (children[0].prelim + children[children.length - 1].prelim) / 2;
            var leftSibling = node.getLeftSibling();
            if (leftSibling) {
                node.prelim = leftSibling.prelim + distance;
                node.mod = node.prelim - midpoint;
            }
            else {
                node.prelim = midpoint;
            }
        }
        else {
            var leftSibling = node.getLeftSibling();
            node.prelim = leftSibling ? leftSibling.prelim + distance : 0;
        }
    }
    var Dimensions = /** @class */ (function () {
        function Dimensions() {
            this.top = Infinity;
            this.right = -Infinity;
            this.bottom = -Infinity;
            this.left = Infinity;
        }
        Dimensions.prototype.update = function (node, xy) {
            var _a = xy(node), x = _a.x, y = _a.y;
            if (x > this.right) {
                this.right = x;
            }
            if (x < this.left) {
                this.left = x;
            }
            if (y > this.bottom) {
                this.bottom = y;
            }
            if (y < this.top) {
                this.top = y;
            }
        };
        return Dimensions;
    }());
    function secondWalk(v, m, layout) {
        v.x = v.prelim + m;
        v.y = v.depth;
        layout.update(v);
        v.children.forEach(function (w) { return secondWalk(w, m + v.mod, layout); });
    }
    // After the second walk the parent nodes are positioned at the center of their immediate children.
    // If we want the parent nodes to be positioned at the center of the subtree for which they are roots,
    // we need a third walk to adjust the positions.
    function thirdWalk(v) {
        var children = v.children;
        var leafCount = 0;
        children.forEach(function (w) {
            thirdWalk(w);
            if (w.children.length) {
                leafCount += w.leafCount;
            }
            else {
                leafCount++;
            }
        });
        v.leafCount = leafCount;
        if (children.length) {
            v.subtreeLeft = children[0].subtreeLeft;
            v.subtreeRight = children[v.children.length - 1].subtreeRight;
            v.x = (v.subtreeLeft + v.subtreeRight) / 2;
        }
        else {
            v.subtreeLeft = v.x;
            v.subtreeRight = v.x;
        }
    }
    function treeLayout(root) {
        var layout = new TreeLayout();
        firstWalk(root, 1);
        secondWalk(root, -root.prelim, layout);
        thirdWalk(root);
        return layout;
    }
    var TreeLayout = /** @class */ (function () {
        function TreeLayout() {
            this.dimensions = new Dimensions();
            this.leafCount = 0;
            this.nodes = [];
            // One might want to process leaf nodes separately from the rest of the tree.
            // For example, position labels corresponding to leafs vertically, rather than horizontally.
            this.leafNodes = [];
            this.nonLeafNodes = [];
            this.depth = 0;
        }
        TreeLayout.prototype.update = function (node) {
            this.dimensions.update(node, function (node) { return ({ x: node.x, y: node.y }); });
            if (!node.children.length) {
                this.leafCount++;
                this.leafNodes.push(node);
            }
            else {
                this.nonLeafNodes.push(node);
            }
            if (node.depth > this.depth) {
                this.depth = node.depth;
            }
            this.nodes.push(node);
        };
        TreeLayout.prototype.resize = function (width, height, shiftX, shiftY, flipX) {
            if (shiftX === void 0) { shiftX = 0; }
            if (shiftY === void 0) { shiftY = 0; }
            if (flipX === void 0) { flipX = false; }
            var xSteps = this.leafCount - 1;
            var ySteps = this.depth;
            var dimensions = this.dimensions;
            var scalingX = 1;
            var scalingY = 1;
            if (width > 0 && xSteps) {
                var existingSpacingX = (dimensions.right - dimensions.left) / xSteps;
                var desiredSpacingX = width / xSteps;
                scalingX = desiredSpacingX / existingSpacingX;
                if (flipX) {
                    scalingX = -scalingX;
                }
            }
            if (height > 0 && ySteps) {
                var existingSpacingY = (dimensions.bottom - dimensions.top) / ySteps;
                var desiredSpacingY = height / ySteps;
                scalingY = desiredSpacingY / existingSpacingY;
            }
            var screenDimensions = new Dimensions();
            this.nodes.forEach(function (node) {
                node.screenX = node.x * scalingX;
                node.screenY = node.y * scalingY;
                screenDimensions.update(node, function (node) { return ({ x: node.screenX, y: node.screenY }); });
            });
            // Normalize so that root top and leftmost leaf left start at zero.
            var offsetX = -screenDimensions.left;
            var offsetY = -screenDimensions.top;
            this.nodes.forEach(function (node) {
                node.screenX += offsetX + shiftX;
                node.screenY += offsetY + shiftY;
            });
        };
        return TreeLayout;
    }());

    var __extends$u = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$h = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$e = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$8 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$e(arguments[i]));
        return ar;
    };
    var GroupedCategoryAxisLabel = /** @class */ (function (_super) {
        __extends$u(GroupedCategoryAxisLabel, _super);
        function GroupedCategoryAxisLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.grid = false;
            return _this;
        }
        __decorate$h([
            Validate(BOOLEAN)
        ], GroupedCategoryAxisLabel.prototype, "grid", void 0);
        return GroupedCategoryAxisLabel;
    }(AxisLabel));
    var GroupedCategoryAxis = /** @class */ (function (_super) {
        __extends$u(GroupedCategoryAxis, _super);
        function GroupedCategoryAxis() {
            var _this = _super.call(this, new BandScale()) || this;
            // Label scale (labels are positioned between ticks, tick count = label count + 1).
            // We don't call is `labelScale` for consistency with other axes.
            _this.tickScale = new BandScale();
            _this.translation = {
                x: 0,
                y: 0,
            };
            _this.line = new AxisLine();
            _this.label = new GroupedCategoryAxisLabel();
            /**
             * The color of the labels.
             * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.
             */
            _this.labelColor = 'rgba(87, 87, 87, 1)';
            _this.includeInvisibleDomains = true;
            var _a = _this, axisGroup = _a.axisGroup, gridlineGroup = _a.gridlineGroup, tickScale = _a.tickScale, scale = _a.scale;
            scale.paddingOuter = 0.1;
            scale.paddingInner = scale.paddingOuter * 2;
            _this.requestedRange = scale.range.slice();
            _this.refreshScale();
            tickScale.paddingInner = 1;
            tickScale.paddingOuter = 0;
            _this.gridLineSelection = Selection.select(gridlineGroup).selectAll();
            _this.axisLineSelection = Selection.select(axisGroup).selectAll();
            _this.separatorSelection = Selection.select(axisGroup).selectAll();
            _this.labelSelection = Selection.select(axisGroup).selectAll();
            return _this;
        }
        Object.defineProperty(GroupedCategoryAxis.prototype, "range", {
            get: function () {
                return this.requestedRange.slice();
            },
            set: function (value) {
                this.requestedRange = value.slice();
                this.updateRange();
            },
            enumerable: false,
            configurable: true
        });
        GroupedCategoryAxis.prototype.updateRange = function () {
            var _a = this, rr = _a.requestedRange, vr = _a.visibleRange, scale = _a.scale;
            var span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
            var shift = span * vr[0];
            var start = rr[0] - shift;
            this.tickScale.range = scale.range = [start, start + span];
            this.resizeTickTree();
        };
        GroupedCategoryAxis.prototype.resizeTickTree = function () {
            var s = this.scale;
            var range = s.domain.length ? [s.convert(s.domain[0]), s.convert(s.domain[s.domain.length - 1])] : s.range;
            var layout = this.tickTreeLayout;
            var lineHeight = this.lineHeight;
            if (layout) {
                layout.resize(Math.abs(range[1] - range[0]), layout.depth * lineHeight, (Math.min(range[0], range[1]) || 0) + (s.bandwidth || 0) / 2, -layout.depth * lineHeight, range[1] - range[0] < 0);
            }
        };
        Object.defineProperty(GroupedCategoryAxis.prototype, "lineHeight", {
            get: function () {
                return this.label.fontSize * 1.5;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GroupedCategoryAxis.prototype, "gridLength", {
            get: function () {
                return this._gridLength;
            },
            /**
             * The length of the grid. The grid is only visible in case of a non-zero value.
             */
            set: function (value) {
                // Was visible and now invisible, or was invisible and now visible.
                if ((this._gridLength && !value) || (!this._gridLength && value)) {
                    this.gridLineSelection = this.gridLineSelection.remove().setData([]);
                    this.labelSelection = this.labelSelection.remove().setData([]);
                }
                this._gridLength = value;
            },
            enumerable: false,
            configurable: true
        });
        GroupedCategoryAxis.prototype.calculateDomain = function () {
            var _a;
            var _b = this, direction = _b.direction, boundSeries = _b.boundSeries;
            var domains = [];
            var isNumericX = undefined;
            boundSeries
                .filter(function (s) { return s.visible; })
                .forEach(function (series) {
                if (direction === ChartAxisDirection.X) {
                    if (isNumericX === undefined) {
                        // always add first X domain
                        var domain_1 = series.getDomain(direction);
                        domains.push(domain_1);
                        isNumericX = typeof domain_1[0] === 'number';
                    }
                    else if (isNumericX) {
                        // only add further X domains if the axis is numeric
                        domains.push(series.getDomain(direction));
                    }
                }
                else {
                    domains.push(series.getDomain(direction));
                }
            });
            var domain = (_a = new Array()).concat.apply(_a, __spread$8(domains));
            var values = extent(domain, isContinuous) || domain;
            this.dataDomain = this.normaliseDataDomain(values);
        };
        GroupedCategoryAxis.prototype.normaliseDataDomain = function (d) {
            // Prevent duplicate categories.
            var values = d.filter(function (s, i, arr) { return arr.indexOf(s) === i; });
            var tickTree = ticksToTree(values);
            this.tickTreeLayout = treeLayout(tickTree);
            var tickScaleDomain = values.slice();
            tickScaleDomain.push('');
            this.tickScale.domain = tickScaleDomain;
            this.resizeTickTree();
            return values;
        };
        /**
         * Creates/removes/updates the scene graph nodes that constitute the axis.
         * Supposed to be called _manually_ after changing _any_ of the axis properties.
         * This allows to bulk set axis properties before updating the nodes.
         * The node changes made by this method are rendered on the next animation frame.
         * We could schedule this method call automatically on the next animation frame
         * when any of the axis properties change (the way we do when properties of scene graph's
         * nodes change), but this will mean that we first wait for the next animation
         * frame to make changes to the nodes of the axis, then wait for another animation
         * frame to render those changes. It's nice to have everything update automatically,
         * but this extra level of async indirection will not just introduce an unwanted delay,
         * it will also make it harder to reason about the program.
         */
        GroupedCategoryAxis.prototype.update = function (primaryTickCount) {
            var _this = this;
            this.calculateDomain();
            var _a = this, scale = _a.scale, label = _a.label, tickScale = _a.tickScale, requestedRange = _a.requestedRange;
            scale.domain = this.dataDomain;
            var rangeStart = scale.range[0];
            var rangeEnd = scale.range[1];
            var rangeLength = Math.abs(rangeEnd - rangeStart);
            var bandwidth = rangeLength / scale.domain.length || 0;
            var parallelLabels = label.parallel;
            var rotation = toRadians(this.rotation);
            var isHorizontal = Math.abs(Math.cos(rotation)) < 1e-8;
            var labelRotation = this.label.rotation ? normalizeAngle360(toRadians(this.label.rotation)) : 0;
            this.updatePosition();
            var title = this.title;
            // The Text `node` of the Caption is not used to render the title of the grouped category axis.
            // The phantom root of the tree layout is used instead.
            if (title) {
                title.node.visible = false;
            }
            var lineHeight = this.lineHeight;
            // Render ticks and labels.
            var tickTreeLayout = this.tickTreeLayout;
            var labels = scale.ticks();
            var treeLabels = tickTreeLayout ? tickTreeLayout.nodes : [];
            var isLabelTree = tickTreeLayout ? tickTreeLayout.depth > 1 : false;
            var ticks = tickScale.ticks();
            // The side of the axis line to position the labels on.
            // -1 = left (default)
            //  1 = right
            var sideFlag = label.mirrored ? 1 : -1;
            // When labels are parallel to the axis line, the `parallelFlipFlag` is used to
            // flip the labels to avoid upside-down text, when the axis is rotated
            // such that it is in the right hemisphere, i.e. the angle of rotation
            // is in the [0, π] interval.
            // The rotation angle is normalized, so that we have an easier time checking
            // if it's in the said interval. Since the axis is always rendered vertically
            // and then rotated, zero rotation means 12 (not 3) o-clock.
            // -1 = flip
            //  1 = don't flip (default)
            var parallelFlipRotation = normalizeAngle360(rotation);
            var parallelFlipFlag = !labelRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;
            var regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);
            // Flip if the axis rotation angle is in the top hemisphere.
            var regularFlipFlag = !labelRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;
            var updateGridLines = this.gridLineSelection.setData(this.gridLength ? ticks : []);
            updateGridLines.exit.remove();
            var enterGridLines = updateGridLines.enter.append(Line);
            var gridLineSelection = updateGridLines.merge(enterGridLines);
            var updateLabels = this.labelSelection.setData(treeLabels);
            updateLabels.exit.remove();
            var enterLabels = updateLabels.enter.append(Text);
            var labelSelection = updateLabels.merge(enterLabels);
            var labelFormatter = label.formatter;
            var labelBBoxes = new Map();
            var maxLeafLabelWidth = 0;
            labelSelection.each(function (node, datum, index) {
                node.fontStyle = label.fontStyle;
                node.fontWeight = label.fontWeight;
                node.fontSize = label.fontSize;
                node.fontFamily = label.fontFamily;
                node.fill = label.color;
                node.textBaseline = parallelFlipFlag === -1 ? 'bottom' : 'hanging';
                node.textAlign = 'center';
                node.translationX = datum.screenY - label.fontSize * 0.25;
                node.translationY = datum.screenX;
                if (index === 0) {
                    // use the phantom root as the axis title
                    if (title && title.enabled && labels.length > 0) {
                        node.visible = true;
                        node.text = title.text;
                        node.fontSize = title.fontSize;
                        node.fontStyle = title.fontStyle;
                        node.fontWeight = title.fontWeight;
                        node.fontFamily = title.fontFamily;
                        node.textBaseline = 'hanging';
                    }
                    else {
                        node.visible = false;
                    }
                }
                else {
                    node.text = labelFormatter
                        ? labelFormatter({
                            value: String(datum.label),
                            index: index,
                        })
                        : String(datum.label);
                    node.visible = datum.screenX >= requestedRange[0] && datum.screenX <= requestedRange[1];
                }
                var bbox = node.computeBBox();
                labelBBoxes.set(node.id, bbox);
                if (bbox.width > maxLeafLabelWidth) {
                    maxLeafLabelWidth = bbox.width;
                }
            });
            var labelX = sideFlag * label.padding;
            var autoRotation = parallelLabels ? (parallelFlipFlag * Math.PI) / 2 : regularFlipFlag === -1 ? Math.PI : 0;
            var labelGrid = this.label.grid;
            var separatorData = [];
            labelSelection.each(function (label, datum, index) {
                label.x = labelX;
                label.rotationCenterX = labelX;
                if (!datum.children.length) {
                    label.rotation = labelRotation;
                    label.textAlign = 'end';
                    label.textBaseline = 'middle';
                    var bbox = labelBBoxes.get(label.id);
                    if (bbox && bbox.height > bandwidth) {
                        label.visible = false;
                    }
                }
                else {
                    label.translationX -= maxLeafLabelWidth - lineHeight + _this.label.padding;
                    var availableRange = datum.leafCount * bandwidth;
                    var bbox = labelBBoxes.get(label.id);
                    if (bbox && bbox.width > availableRange) {
                        label.visible = false;
                    }
                    else if (isHorizontal) {
                        label.rotation = autoRotation;
                    }
                    else {
                        label.rotation = -Math.PI / 2;
                    }
                }
                // Calculate positions of label separators for all nodes except the root.
                // Each separator is placed to the top of the current label.
                if (datum.parent && isLabelTree) {
                    var y = !datum.children.length
                        ? datum.screenX - bandwidth / 2
                        : datum.screenX - (datum.leafCount * bandwidth) / 2;
                    if (!datum.children.length) {
                        if (datum.number !== datum.children.length - 1 || labelGrid) {
                            separatorData.push({
                                y: y,
                                x1: 0,
                                x2: -maxLeafLabelWidth - _this.label.padding * 2,
                                toString: function () { return String(index); },
                            });
                        }
                    }
                    else {
                        var x = -maxLeafLabelWidth - _this.label.padding * 2 + datum.screenY;
                        separatorData.push({
                            y: y,
                            x1: x + lineHeight,
                            x2: x,
                            toString: function () { return String(index); },
                        });
                    }
                }
            });
            // Calculate the position of the long separator on the far bottom of the axis.
            var minX = 0;
            separatorData.forEach(function (d) { return (minX = Math.min(minX, d.x2)); });
            separatorData.push({
                y: Math.max(rangeStart, rangeEnd),
                x1: 0,
                x2: minX,
                toString: function () { return String(separatorData.length); },
            });
            var updateSeparators = this.separatorSelection.setData(separatorData);
            updateSeparators.exit.remove();
            var enterSeparators = updateSeparators.enter.append(Line);
            var separatorSelection = updateSeparators.merge(enterSeparators);
            this.separatorSelection = separatorSelection;
            var epsilon = 0.0000001;
            separatorSelection.each(function (line, datum) {
                line.x1 = datum.x1;
                line.x2 = datum.x2;
                line.y1 = datum.y;
                line.y2 = datum.y;
                line.visible = datum.y >= requestedRange[0] - epsilon && datum.y <= requestedRange[1] + epsilon;
                line.stroke = _this.tick.color;
                line.fill = undefined;
                line.strokeWidth = 1;
            });
            this.gridLineSelection = gridLineSelection;
            this.labelSelection = labelSelection;
            // Render axis lines.
            var lineCount = tickTreeLayout ? tickTreeLayout.depth + 1 : 1;
            var lines = [];
            for (var i = 0; i < lineCount; i++) {
                lines.push(i);
            }
            var updateAxisLines = this.axisLineSelection.setData(lines);
            updateAxisLines.exit.remove();
            var enterAxisLines = updateAxisLines.enter.append(Line);
            var axisLineSelection = updateAxisLines.merge(enterAxisLines);
            this.axisLineSelection = axisLineSelection;
            axisLineSelection.each(function (line, _, index) {
                var x = index > 0 ? -maxLeafLabelWidth - _this.label.padding * 2 - (index - 1) * lineHeight : 0;
                line.x1 = x;
                line.x2 = x;
                line.y1 = requestedRange[0];
                line.y2 = requestedRange[1];
                line.strokeWidth = _this.line.width;
                line.stroke = _this.line.color;
                line.visible = labels.length > 0 && (index === 0 || (labelGrid && isLabelTree));
            });
            if (this.gridLength) {
                var styles_1 = this.gridStyle;
                var styleCount_1 = styles_1.length;
                gridLineSelection.each(function (line, datum, index) {
                    var y = Math.round(tickScale.convert(datum));
                    line.x1 = 0;
                    line.x2 = -sideFlag * _this.gridLength;
                    line.y1 = y;
                    line.y2 = y;
                    line.visible =
                        y >= requestedRange[0] &&
                            y <= requestedRange[1] &&
                            Math.abs(line.parent.translationY - rangeStart) > 1;
                    var style = styles_1[index % styleCount_1];
                    line.stroke = style.stroke;
                    line.strokeWidth = _this.tick.width;
                    line.lineDash = style.lineDash;
                    line.fill = undefined;
                });
            }
            return primaryTickCount;
        };
        GroupedCategoryAxis.className = 'GroupedCategoryAxis';
        GroupedCategoryAxis.type = 'groupedCategory';
        __decorate$h([
            Validate(OPT_COLOR_STRING)
        ], GroupedCategoryAxis.prototype, "labelColor", void 0);
        return GroupedCategoryAxis;
    }(ChartAxis));

    var __extends$t = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$g = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RangeHandle = /** @class */ (function (_super) {
        __extends$t(RangeHandle, _super);
        function RangeHandle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._fill = '#f2f2f2';
            _this._stroke = '#999999';
            _this._strokeWidth = 1;
            _this._lineCap = 'square';
            _this._centerX = 0;
            _this._centerY = 0;
            // Use an even number for better looking results.
            _this._width = 8;
            // Use an even number for better looking results.
            _this._gripLineGap = 2;
            // Use an even number for better looking results.
            _this._gripLineLength = 8;
            _this._height = 16;
            return _this;
        }
        Object.defineProperty(RangeHandle.prototype, "centerX", {
            get: function () {
                return this._centerX;
            },
            set: function (value) {
                if (this._centerX !== value) {
                    this._centerX = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeHandle.prototype, "centerY", {
            get: function () {
                return this._centerY;
            },
            set: function (value) {
                if (this._centerY !== value) {
                    this._centerY = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeHandle.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                if (this._width !== value) {
                    this._width = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeHandle.prototype, "gripLineGap", {
            get: function () {
                return this._gripLineGap;
            },
            set: function (value) {
                if (this._gripLineGap !== value) {
                    this._gripLineGap = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeHandle.prototype, "gripLineLength", {
            get: function () {
                return this._gripLineLength;
            },
            set: function (value) {
                if (this._gripLineLength !== value) {
                    this._gripLineLength = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeHandle.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (value) {
                if (this._height !== value) {
                    this._height = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        RangeHandle.prototype.computeBBox = function () {
            var _a = this, centerX = _a.centerX, centerY = _a.centerY, width = _a.width, height = _a.height;
            var x = centerX - width / 2;
            var y = centerY - height / 2;
            return new BBox(x, y, width, height);
        };
        RangeHandle.prototype.isPointInPath = function (x, y) {
            var point = this.transformPoint(x, y);
            var bbox = this.computeBBox();
            return bbox.containsPoint(point.x, point.y);
        };
        RangeHandle.prototype.updatePath = function () {
            var _a = this, path = _a.path, centerX = _a.centerX, centerY = _a.centerY, width = _a.width, height = _a.height;
            path.clear();
            var x = centerX - width / 2;
            var y = centerY - height / 2;
            var ax = this.align(x);
            var ay = this.align(y);
            var axw = ax + this.align(x, width);
            var ayh = ay + this.align(y, height);
            // Handle.
            path.moveTo(ax, ay);
            path.lineTo(axw, ay);
            path.lineTo(axw, ayh);
            path.lineTo(ax, ayh);
            path.lineTo(ax, ay);
            // Grip lines.
            var dx = this.gripLineGap / 2;
            var dy = this.gripLineLength / 2;
            path.moveTo(this.align(centerX - dx), this.align(centerY - dy));
            path.lineTo(this.align(centerX - dx), this.align(centerY + dy));
            path.moveTo(this.align(centerX + dx), this.align(centerY - dy));
            path.lineTo(this.align(centerX + dx), this.align(centerY + dy));
        };
        RangeHandle.className = 'RangeHandle';
        __decorate$g([
            Validate(COLOR_STRING)
        ], RangeHandle.prototype, "_fill", void 0);
        __decorate$g([
            Validate(COLOR_STRING)
        ], RangeHandle.prototype, "_stroke", void 0);
        __decorate$g([
            Validate(NUMBER(0))
        ], RangeHandle.prototype, "_strokeWidth", void 0);
        __decorate$g([
            Validate(LINE_CAP)
        ], RangeHandle.prototype, "_lineCap", void 0);
        __decorate$g([
            Validate(NUMBER(0))
        ], RangeHandle.prototype, "_width", void 0);
        __decorate$g([
            Validate(NUMBER(0))
        ], RangeHandle.prototype, "_gripLineGap", void 0);
        __decorate$g([
            Validate(NUMBER(0))
        ], RangeHandle.prototype, "_gripLineLength", void 0);
        __decorate$g([
            Validate(NUMBER(0))
        ], RangeHandle.prototype, "_height", void 0);
        return RangeHandle;
    }(Path));

    var __extends$s = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$f = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RangeMask = /** @class */ (function (_super) {
        __extends$s(RangeMask, _super);
        function RangeMask() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._stroke = '#999999';
            _this._strokeWidth = 1;
            _this._fill = '#999999';
            _this._fillOpacity = 0.2;
            _this._lineCap = 'square';
            _this._x = 0;
            _this._y = 0;
            _this._width = 200;
            _this._height = 30;
            _this.minRange = 0.05;
            _this._min = 0;
            _this._max = 1;
            return _this;
        }
        Object.defineProperty(RangeMask.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                if (this._x !== value) {
                    this._x = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeMask.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                if (this._y !== value) {
                    this._y = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeMask.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (value) {
                if (this._width !== value) {
                    this._width = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeMask.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (value) {
                if (this._height !== value) {
                    this._height = value;
                    this.dirtyPath = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeMask.prototype, "min", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                var _a;
                value = Math.min(Math.max(value, 0), this.max - this.minRange);
                if (isNaN(value)) {
                    return;
                }
                if (this._min !== value) {
                    this._min = value;
                    this.dirtyPath = true;
                    (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeMask.prototype, "max", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                var _a;
                value = Math.max(Math.min(value, 1), this.min + this.minRange);
                if (isNaN(value)) {
                    return;
                }
                if (this._max !== value) {
                    this._max = value;
                    this.dirtyPath = true;
                    (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);
                }
            },
            enumerable: false,
            configurable: true
        });
        RangeMask.prototype.computeBBox = function () {
            var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
            return new BBox(x, y, width, height);
        };
        RangeMask.prototype.computeVisibleRangeBBox = function () {
            var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height, min = _a.min, max = _a.max;
            var minX = x + width * min;
            var maxX = x + width * max;
            return new BBox(minX, y, maxX - minX, height);
        };
        RangeMask.prototype.updatePath = function () {
            var _a = this, path = _a.path, x = _a.x, y = _a.y, width = _a.width, height = _a.height, min = _a.min, max = _a.max;
            path.clear();
            var ax = this.align(x);
            var ay = this.align(y);
            var axw = ax + this.align(x, width);
            var ayh = ay + this.align(y, height);
            // Whole range.
            path.moveTo(ax, ay);
            path.lineTo(axw, ay);
            path.lineTo(axw, ayh);
            path.lineTo(ax, ayh);
            path.lineTo(ax, ay);
            var minX = this.align(x + width * min);
            var maxX = this.align(x + width * max);
            // Visible range.
            path.moveTo(minX, ay);
            path.lineTo(minX, ayh);
            path.lineTo(maxX, ayh);
            path.lineTo(maxX, ay);
            path.lineTo(minX, ay);
        };
        RangeMask.className = 'RangeMask';
        __decorate$f([
            Validate(COLOR_STRING)
        ], RangeMask.prototype, "_stroke", void 0);
        __decorate$f([
            Validate(NUMBER(0))
        ], RangeMask.prototype, "_strokeWidth", void 0);
        __decorate$f([
            Validate(COLOR_STRING)
        ], RangeMask.prototype, "_fill", void 0);
        __decorate$f([
            Validate(NUMBER(0, 1))
        ], RangeMask.prototype, "_fillOpacity", void 0);
        __decorate$f([
            Validate(LINE_CAP)
        ], RangeMask.prototype, "_lineCap", void 0);
        __decorate$f([
            Validate(NUMBER(0))
        ], RangeMask.prototype, "_width", void 0);
        __decorate$f([
            Validate(NUMBER(0))
        ], RangeMask.prototype, "_height", void 0);
        __decorate$f([
            Validate(NUMBER())
        ], RangeMask.prototype, "_min", void 0);
        __decorate$f([
            Validate(NUMBER())
        ], RangeMask.prototype, "_max", void 0);
        return RangeMask;
    }(Path));

    var __extends$r = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$c = (undefined && undefined.__assign) || function () {
        __assign$c = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$c.apply(this, arguments);
    };
    var RangeSelector = /** @class */ (function (_super) {
        __extends$r(RangeSelector, _super);
        function RangeSelector() {
            var _this = _super.call(this, { name: 'rangeSelectorGroup' }) || this;
            _this.minHandle = new RangeHandle();
            _this.maxHandle = new RangeHandle();
            _this.mask = (function () {
                var _a = RangeSelector.defaults, x = _a.x, y = _a.y, width = _a.width, height = _a.height, min = _a.min, max = _a.max;
                var mask = new RangeMask();
                mask.x = x;
                mask.y = y;
                mask.width = width;
                mask.height = height;
                mask.min = min;
                mask.max = max;
                var _b = _this, minHandle = _b.minHandle, maxHandle = _b.maxHandle;
                minHandle.centerX = x;
                maxHandle.centerX = x + width;
                minHandle.centerY = maxHandle.centerY = y + height / 2;
                _this.append([mask, minHandle, maxHandle]);
                mask.onRangeChange = function () {
                    var _a;
                    _this.updateHandles();
                    (_a = _this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(_this);
                };
                return mask;
            })();
            _this._x = RangeSelector.defaults.x;
            _this._y = RangeSelector.defaults.y;
            _this._width = RangeSelector.defaults.width;
            _this._height = RangeSelector.defaults.height;
            _this._min = RangeSelector.defaults.min;
            _this._max = RangeSelector.defaults.max;
            _this.isContainerNode = true;
            return _this;
        }
        Object.defineProperty(RangeSelector.prototype, "x", {
            get: function () {
                return this.mask.x;
            },
            set: function (value) {
                this.mask.x = value;
                this.updateHandles();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeSelector.prototype, "y", {
            get: function () {
                return this.mask.y;
            },
            set: function (value) {
                this.mask.y = value;
                this.updateHandles();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeSelector.prototype, "width", {
            get: function () {
                return this.mask.width;
            },
            set: function (value) {
                this.mask.width = value;
                this.updateHandles();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeSelector.prototype, "height", {
            get: function () {
                return this.mask.height;
            },
            set: function (value) {
                this.mask.height = value;
                this.updateHandles();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeSelector.prototype, "min", {
            get: function () {
                return this.mask.min;
            },
            set: function (value) {
                this.mask.min = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RangeSelector.prototype, "max", {
            get: function () {
                return this.mask.max;
            },
            set: function (value) {
                this.mask.max = value;
            },
            enumerable: false,
            configurable: true
        });
        RangeSelector.prototype.updateHandles = function () {
            var _a = this, minHandle = _a.minHandle, maxHandle = _a.maxHandle, x = _a.x, y = _a.y, width = _a.width, height = _a.height, mask = _a.mask;
            minHandle.centerX = x + width * mask.min;
            maxHandle.centerX = x + width * mask.max;
            minHandle.centerY = maxHandle.centerY = y + height / 2;
        };
        RangeSelector.prototype.computeBBox = function () {
            return this.mask.computeBBox();
        };
        RangeSelector.prototype.computeVisibleRangeBBox = function () {
            return this.mask.computeVisibleRangeBBox();
        };
        RangeSelector.prototype.render = function (renderCtx) {
            var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped++;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            var _a = this, mask = _a.mask, minHandle = _a.minHandle, maxHandle = _a.maxHandle;
            [mask, minHandle, maxHandle].forEach(function (child) {
                if (child.visible && (forceRender || child.dirty > RedrawType.NONE)) {
                    ctx.save();
                    child.render(__assign$c(__assign$c({}, renderCtx), { ctx: ctx, forceRender: forceRender }));
                    ctx.restore();
                }
            });
            this.markClean({ force: true });
            if (stats)
                stats.nodesRendered++;
        };
        RangeSelector.className = 'Range';
        RangeSelector.defaults = {
            x: 0,
            y: 0,
            width: 200,
            height: 30,
            min: 0,
            max: 1,
        };
        return RangeSelector;
    }(Group));

    var NavigatorMask = /** @class */ (function () {
        function NavigatorMask(rangeMask) {
            this.rm = rangeMask;
        }
        Object.defineProperty(NavigatorMask.prototype, "fill", {
            get: function () {
                return this.rm.fill;
            },
            set: function (value) {
                this.rm.fill = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorMask.prototype, "stroke", {
            get: function () {
                return this.rm.stroke;
            },
            set: function (value) {
                this.rm.stroke = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorMask.prototype, "strokeWidth", {
            get: function () {
                return this.rm.strokeWidth;
            },
            set: function (value) {
                this.rm.strokeWidth = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorMask.prototype, "fillOpacity", {
            get: function () {
                return this.rm.fillOpacity;
            },
            set: function (value) {
                this.rm.fillOpacity = value;
            },
            enumerable: false,
            configurable: true
        });
        return NavigatorMask;
    }());

    var NavigatorHandle = /** @class */ (function () {
        function NavigatorHandle(rangeHandle) {
            this.rh = rangeHandle;
        }
        Object.defineProperty(NavigatorHandle.prototype, "fill", {
            get: function () {
                return this.rh.fill;
            },
            set: function (value) {
                this.rh.fill = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorHandle.prototype, "stroke", {
            get: function () {
                return this.rh.stroke;
            },
            set: function (value) {
                this.rh.stroke = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorHandle.prototype, "strokeWidth", {
            get: function () {
                return this.rh.strokeWidth;
            },
            set: function (value) {
                this.rh.strokeWidth = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorHandle.prototype, "width", {
            get: function () {
                return this.rh.width;
            },
            set: function (value) {
                this.rh.width = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorHandle.prototype, "height", {
            get: function () {
                return this.rh.height;
            },
            set: function (value) {
                this.rh.height = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorHandle.prototype, "gripLineGap", {
            get: function () {
                return this.rh.gripLineGap;
            },
            set: function (value) {
                this.rh.gripLineGap = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NavigatorHandle.prototype, "gripLineLength", {
            get: function () {
                return this.rh.gripLineLength;
            },
            set: function (value) {
                this.rh.gripLineLength = value;
            },
            enumerable: false,
            configurable: true
        });
        return NavigatorHandle;
    }());

    var __decorate$e = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Navigator = /** @class */ (function () {
        function Navigator(chart, interactionManager, cursorManager) {
            var _this = this;
            this.chart = chart;
            this.cursorManager = cursorManager;
            this.rs = new RangeSelector();
            this.mask = new NavigatorMask(this.rs.mask);
            this.minHandle = new NavigatorHandle(this.rs.minHandle);
            this.maxHandle = new NavigatorHandle(this.rs.maxHandle);
            this.minHandleDragging = false;
            this.maxHandleDragging = false;
            this.panHandleOffset = NaN;
            this._enabled = false;
            this._margin = 10;
            this._visible = true;
            this.chart.scene.root.append(this.rs);
            this.rs.onRangeChange = function () { return chart.update(ChartUpdateType.PERFORM_LAYOUT, { forceNodeDataRefresh: true }); };
            interactionManager.addListener('drag-start', function (event) { return _this.onDragStart(event); });
            interactionManager.addListener('drag', function (event) { return _this.onDrag(event); });
            interactionManager.addListener('hover', function (event) { return _this.onDrag(event); });
            interactionManager.addListener('drag-end', function () { return _this.onDragStop(); });
        }
        Object.defineProperty(Navigator.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            set: function (value) {
                this._enabled = value;
                this.updateGroupVisibility();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "x", {
            get: function () {
                return this.rs.x;
            },
            set: function (value) {
                this.rs.x = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "y", {
            get: function () {
                return this.rs.y;
            },
            set: function (value) {
                this.rs.y = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "width", {
            get: function () {
                return this.rs.width;
            },
            set: function (value) {
                this.rs.width = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "height", {
            get: function () {
                return this.rs.height;
            },
            set: function (value) {
                this.rs.height = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "margin", {
            get: function () {
                return this._margin;
            },
            set: function (value) {
                this._margin = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "min", {
            get: function () {
                return this.rs.min;
            },
            set: function (value) {
                this.rs.min = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "max", {
            get: function () {
                return this.rs.max;
            },
            set: function (value) {
                this.rs.max = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Navigator.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                this.updateGroupVisibility();
            },
            enumerable: false,
            configurable: true
        });
        Navigator.prototype.updateGroupVisibility = function () {
            this.rs.visible = this.enabled && this.visible;
        };
        Navigator.prototype.onDragStart = function (offset) {
            if (!this.enabled) {
                return;
            }
            var offsetX = offset.offsetX, offsetY = offset.offsetY;
            var rs = this.rs;
            var minHandle = rs.minHandle, maxHandle = rs.maxHandle, x = rs.x, width = rs.width, min = rs.min;
            var visibleRange = rs.computeVisibleRangeBBox();
            if (!(this.minHandleDragging || this.maxHandleDragging)) {
                if (minHandle.containsPoint(offsetX, offsetY)) {
                    this.minHandleDragging = true;
                }
                else if (maxHandle.containsPoint(offsetX, offsetY)) {
                    this.maxHandleDragging = true;
                }
                else if (visibleRange.containsPoint(offsetX, offsetY)) {
                    this.panHandleOffset = (offsetX - x) / width - min;
                }
            }
        };
        Navigator.prototype.onDrag = function (offset) {
            if (!this.enabled) {
                return;
            }
            var _a = this, rs = _a.rs, panHandleOffset = _a.panHandleOffset;
            var x = rs.x, y = rs.y, width = rs.width, height = rs.height, minHandle = rs.minHandle, maxHandle = rs.maxHandle;
            var offsetX = offset.offsetX, offsetY = offset.offsetY;
            var minX = x + width * rs.min;
            var maxX = x + width * rs.max;
            var visibleRange = new BBox(minX, y, maxX - minX, height);
            function getRatio() {
                return Math.min(Math.max((offsetX - x) / width, 0), 1);
            }
            if (minHandle.containsPoint(offsetX, offsetY) || maxHandle.containsPoint(offsetX, offsetY)) {
                this.cursorManager.updateCursor('navigator', 'ew-resize');
            }
            else if (visibleRange.containsPoint(offsetX, offsetY)) {
                this.cursorManager.updateCursor('navigator', 'grab');
            }
            else {
                this.cursorManager.updateCursor('navigator');
            }
            if (this.minHandleDragging) {
                rs.min = getRatio();
            }
            else if (this.maxHandleDragging) {
                rs.max = getRatio();
            }
            else if (!isNaN(panHandleOffset)) {
                var span = rs.max - rs.min;
                var min = Math.min(getRatio() - panHandleOffset, 1 - span);
                if (min <= rs.min) {
                    // pan left
                    rs.min = min;
                    rs.max = rs.min + span;
                }
                else {
                    // pan right
                    rs.max = min + span;
                    rs.min = rs.max - span;
                }
            }
        };
        Navigator.prototype.onDragStop = function () {
            this.stopHandleDragging();
        };
        Navigator.prototype.stopHandleDragging = function () {
            this.minHandleDragging = this.maxHandleDragging = false;
            this.panHandleOffset = NaN;
        };
        __decorate$e([
            Validate(BOOLEAN)
        ], Navigator.prototype, "_enabled", void 0);
        __decorate$e([
            Validate(NUMBER(0))
        ], Navigator.prototype, "_margin", void 0);
        return Navigator;
    }());

    var __extends$q = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$b = (undefined && undefined.__assign) || function () {
        __assign$b = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$b.apply(this, arguments);
    };
    var __awaiter$a = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$a = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __values$6 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$d = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var CartesianChart = /** @class */ (function (_super) {
        __extends$q(CartesianChart, _super);
        function CartesianChart(document, overrideDevicePixelRatio, resources) {
            if (document === void 0) { document = window.document; }
            var _this = _super.call(this, document, overrideDevicePixelRatio, resources) || this;
            /** Integrated Charts feature state - not used in Standalone Charts. */
            _this.paired = true;
            _this.navigator = new Navigator(_this, _this.interactionManager, _this.cursorManager);
            _this._lastAxisWidths = {
                top: 0,
                bottom: 0,
                left: 0,
                right: 0,
            };
            _this._lastVisibility = {
                crossLines: true,
                series: true,
            };
            var root = _this.scene.root;
            _this.legend.attachLegend(root);
            _this.navigator.enabled = false;
            return _this;
        }
        CartesianChart.prototype.performLayout = function () {
            return __awaiter$a(this, void 0, void 0, function () {
                var _a, width, height, legend, navigator, padding, shrinkRect, legendPadding, navigatorTotalHeight, _b, seriesRect, visibility, seriesRoot;
                return __generator$a(this, function (_c) {
                    this.scene.root.visible = true;
                    _a = this, width = _a.width, height = _a.height, legend = _a.legend, navigator = _a.navigator, padding = _a.padding;
                    shrinkRect = new BBox(0, 0, width, height);
                    shrinkRect.x += padding.left;
                    shrinkRect.y += padding.top;
                    shrinkRect.width -= padding.left + padding.right;
                    shrinkRect.height -= padding.top + padding.bottom;
                    shrinkRect = this.positionCaptions(shrinkRect);
                    shrinkRect = this.positionLegend(shrinkRect);
                    if (legend.visible && legend.enabled && legend.data.length) {
                        legendPadding = legend.spacing;
                        shrinkRect.shrink(legendPadding, legend.position);
                    }
                    if (navigator.enabled) {
                        navigatorTotalHeight = navigator.height + navigator.margin;
                        shrinkRect.shrink(navigatorTotalHeight, 'bottom');
                        navigator.y = shrinkRect.y + shrinkRect.height + navigator.margin;
                    }
                    _b = this.updateAxes(shrinkRect), seriesRect = _b.seriesRect, visibility = _b.visibility;
                    if (navigator.enabled && visibility.series) {
                        navigator.x = seriesRect.x;
                        navigator.width = seriesRect.width;
                    }
                    this.seriesRoot.visible = visibility.series;
                    navigator.visible = visibility.series;
                    this.seriesRect = seriesRect;
                    this.series.forEach(function (series) {
                        series.rootGroup.translationX = Math.floor(seriesRect.x);
                        series.rootGroup.translationY = Math.floor(seriesRect.y);
                    });
                    seriesRoot = this.seriesRoot;
                    seriesRoot.x = seriesRect.x;
                    seriesRoot.y = seriesRect.y;
                    seriesRoot.width = seriesRect.width;
                    seriesRoot.height = seriesRect.height;
                    return [2 /*return*/];
                });
            });
        };
        CartesianChart.prototype.updateAxes = function (inputShrinkRect) {
            var e_1, _a;
            var _b;
            // Start with a good approximation from the last update - this should mean that in many resize
            // cases that only a single pass is needed \o/.
            var axisWidths = __assign$b({}, this._lastAxisWidths);
            var visibility = __assign$b({}, this._lastVisibility);
            // Clean any positions which aren't valid with the current axis status (otherwise we end up
            // never being able to find a stable result).
            var liveAxisWidths = new Set(this._axes.map(function (a) { return a.position; }));
            try {
                for (var _c = __values$6(Object.keys(axisWidths)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var position = _d.value;
                    if (!liveAxisWidths.has(position)) {
                        delete axisWidths[position];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var stableOutputs = function (otherAxisWidths, otherVisibility) {
                // Check for new axis positions.
                if (Object.keys(otherAxisWidths).some(function (k) { return axisWidths[k] == null; })) {
                    return false;
                }
                return (visibility.crossLines === otherVisibility.crossLines &&
                    visibility.series === otherVisibility.series &&
                    // Check for existing axis positions and equality.
                    Object.entries(axisWidths).every(function (_a) {
                        var _b = __read$d(_a, 2), p = _b[0], w = _b[1];
                        var otherW = otherAxisWidths[p];
                        if (w != null || otherW != null) {
                            return w === otherW;
                        }
                        return true;
                    }));
            };
            var ceilValues = function (records) {
                return Object.entries(records).reduce(function (out, _a) {
                    var _b = __read$d(_a, 2), key = _b[0], value = _b[1];
                    if (value && Math.abs(value) === Infinity) {
                        value = 0;
                    }
                    out[key] = value != null ? Math.ceil(value) : value;
                    return out;
                }, {});
            };
            // Iteratively try to resolve axis widths - since X axis width affects Y axis range,
            // and vice-versa, we need to iteratively try and find a fit for the axes and their
            // ticks/labels.
            var lastPassAxisWidths = {};
            var lastPassVisibility = {};
            var clipSeries = false;
            var seriesRect = (_b = this.seriesRect) === null || _b === void 0 ? void 0 : _b.clone();
            var count = 0;
            do {
                Object.assign(axisWidths, lastPassAxisWidths);
                Object.assign(visibility, lastPassVisibility);
                var result = this.updateAxesPass(axisWidths, inputShrinkRect.clone(), seriesRect);
                lastPassAxisWidths = ceilValues(result.axisWidths);
                lastPassVisibility = result.visibility;
                clipSeries = result.clipSeries;
                seriesRect = result.seriesRect;
                if (count++ > 10) {
                    console.warn('AG Charts - unable to find stable axis layout.');
                    break;
                }
            } while (!stableOutputs(lastPassAxisWidths, lastPassVisibility));
            this.seriesRoot.enabled = clipSeries;
            // update visibility of crosslines
            this.axes.forEach(function (axis) {
                axis.setCrossLinesVisible(visibility.crossLines);
            });
            this._lastAxisWidths = axisWidths;
            this._lastVisibility = visibility;
            return { seriesRect: seriesRect, visibility: visibility };
        };
        CartesianChart.prototype.updateAxesPass = function (axisWidths, bounds, lastPassSeriesRect) {
            var _this = this;
            var axes = this.axes;
            var visited = {};
            var newAxisWidths = {};
            var visibility = {
                series: true,
                crossLines: true,
            };
            var clipSeries = false;
            var primaryTickCounts = {};
            var crossLinePadding = lastPassSeriesRect ? this.buildCrossLinePadding(lastPassSeriesRect, axisWidths) : {};
            var axisBound = this.buildAxisBound(bounds, axisWidths, crossLinePadding, visibility);
            var seriesRect = this.buildSeriesRect(axisBound, axisWidths);
            // Set the number of ticks for continuous axes based on the available range
            // before updating the axis domain via `this.updateAxes()` as the tick count has an effect on the calculated `nice` domain extent
            axes.forEach(function (axis) {
                var _a, _b;
                var position = axis.position;
                var _c = _this.calculateAxisDimensions({
                    axis: axis,
                    seriesRect: seriesRect,
                    axisWidths: axisWidths,
                    newAxisWidths: newAxisWidths,
                    primaryTickCounts: primaryTickCounts,
                    clipSeries: clipSeries,
                    addInterAxisPadding: ((_a = visited[position]) !== null && _a !== void 0 ? _a : 0) > 0,
                }), newClipSeries = _c.clipSeries, axisThickness = _c.axisThickness, axisOffset = _c.axisOffset;
                visited[position] = ((_b = visited[position]) !== null && _b !== void 0 ? _b : 0) + 1;
                clipSeries = clipSeries || newClipSeries;
                _this.positionAxis({
                    axis: axis,
                    axisBound: axisBound,
                    axisOffset: axisOffset,
                    axisThickness: axisThickness,
                    axisWidths: axisWidths,
                    primaryTickCounts: primaryTickCounts,
                    seriesRect: seriesRect,
                });
            });
            return { clipSeries: clipSeries, seriesRect: seriesRect, axisWidths: newAxisWidths, visibility: visibility };
        };
        CartesianChart.prototype.buildCrossLinePadding = function (lastPassSeriesRect, axisWidths) {
            var e_2, _a;
            var _b;
            var crossLinePadding = {};
            this.axes.forEach(function (axis) {
                if (axis.crossLines) {
                    axis.crossLines.forEach(function (crossLine) {
                        crossLine.calculatePadding(crossLinePadding, lastPassSeriesRect);
                    });
                }
            });
            try {
                // Reduce cross-line padding to account for overlap with axes.
                for (var _c = __values$6(Object.entries(crossLinePadding)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read$d(_d.value, 2), side = _e[0], _f = _e[1], padding = _f === void 0 ? 0 : _f;
                    crossLinePadding[side] = Math.max(padding - ((_b = axisWidths[side]) !== null && _b !== void 0 ? _b : 0), 0);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return crossLinePadding;
        };
        CartesianChart.prototype.buildAxisBound = function (bounds, axisWidths, crossLinePadding, visibility) {
            var _a, _b, _c, _d;
            var result = bounds.clone();
            var _e = crossLinePadding.top, top = _e === void 0 ? 0 : _e, _f = crossLinePadding.right, right = _f === void 0 ? 0 : _f, _g = crossLinePadding.bottom, bottom = _g === void 0 ? 0 : _g, _h = crossLinePadding.left, left = _h === void 0 ? 0 : _h;
            var horizontalPadding = left + right;
            var verticalPadding = top + bottom;
            var totalWidth = ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0) + ((_b = axisWidths.right) !== null && _b !== void 0 ? _b : 0) + horizontalPadding;
            var totalHeight = ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0) + ((_d = axisWidths.bottom) !== null && _d !== void 0 ? _d : 0) + verticalPadding;
            if (result.width <= totalWidth || result.height <= totalHeight) {
                // Not enough space for crossLines and series
                visibility.crossLines = false;
                visibility.series = false;
                return result;
            }
            result.x += left;
            result.y += top;
            result.width -= horizontalPadding;
            result.height -= verticalPadding;
            return result;
        };
        CartesianChart.prototype.buildSeriesRect = function (axisBound, axisWidths) {
            var result = axisBound.clone();
            var top = axisWidths.top, bottom = axisWidths.bottom, left = axisWidths.left, right = axisWidths.right;
            result.x += left !== null && left !== void 0 ? left : 0;
            result.y += top !== null && top !== void 0 ? top : 0;
            result.width -= (left !== null && left !== void 0 ? left : 0) + (right !== null && right !== void 0 ? right : 0);
            result.height -= (top !== null && top !== void 0 ? top : 0) + (bottom !== null && bottom !== void 0 ? bottom : 0);
            // Width and height should not be negative.
            result.width = Math.max(0, result.width);
            result.height = Math.max(0, result.height);
            return result;
        };
        CartesianChart.prototype.clampToOutsideSeriesRect = function (seriesRect, value, dimension, direction) {
            var x = seriesRect.x, y = seriesRect.y, width = seriesRect.width, height = seriesRect.height;
            var clampBounds = [x, y, x + width, y + height];
            var fn = direction === 1 ? Math.min : Math.max;
            var compareTo = clampBounds[(dimension === 'x' ? 0 : 1) + (direction === 1 ? 0 : 2)];
            return fn(value, compareTo);
        };
        CartesianChart.prototype.calculateAxisDimensions = function (opts) {
            var _a, _b, _c, _d, _e;
            var axis = opts.axis, seriesRect = opts.seriesRect, axisWidths = opts.axisWidths, newAxisWidths = opts.newAxisWidths, primaryTickCounts = opts.primaryTickCounts, addInterAxisPadding = opts.addInterAxisPadding;
            var clipSeries = opts.clipSeries;
            var navigator = this.navigator;
            var position = axis.position, direction = axis.direction;
            var axisLeftRightRange = function (axis) {
                if (axis instanceof CategoryAxis || axis instanceof GroupedCategoryAxis) {
                    return [0, seriesRect.height];
                }
                return [seriesRect.height, 0];
            };
            axis.label.mirrored = ['top', 'right'].includes(position);
            var axisOffset = (_a = newAxisWidths[position]) !== null && _a !== void 0 ? _a : 0;
            switch (position) {
                case 'top':
                case 'bottom':
                    axis.range = [0, seriesRect.width];
                    axis.gridLength = seriesRect.height;
                    break;
                case 'right':
                case 'left':
                    axis.range = axisLeftRightRange(axis);
                    axis.gridLength = seriesRect.width;
                    break;
            }
            if (axis.direction === ChartAxisDirection.X) {
                var min = navigator.min, max = navigator.max, enabled = navigator.enabled;
                if (enabled) {
                    axis.visibleRange = [min, max];
                }
                else {
                    axis.visibleRange = [0, 1];
                }
            }
            if (!clipSeries && (axis.visibleRange[0] > 0 || axis.visibleRange[1] < 1)) {
                clipSeries = true;
            }
            var primaryTickCount = axis.nice ? primaryTickCounts[direction] : undefined;
            primaryTickCount = axis.update(primaryTickCount);
            primaryTickCounts[direction] = (_b = primaryTickCounts[direction]) !== null && _b !== void 0 ? _b : primaryTickCount;
            var axisThickness = 0;
            if (axis.thickness) {
                axisThickness = axis.thickness;
            }
            else {
                var bbox = axis.computeBBox();
                axisThickness = direction === ChartAxisDirection.X ? bbox.height : bbox.width;
            }
            // for multiple axes in the same direction and position, apply padding at the top of each inner axis (i.e. between axes).
            var axisPadding = 15;
            if (addInterAxisPadding) {
                axisThickness += axisPadding;
            }
            axisThickness = Math.ceil(axisThickness);
            newAxisWidths[position] = ((_c = newAxisWidths[position]) !== null && _c !== void 0 ? _c : 0) + axisThickness;
            axis.gridPadding = ((_d = axisWidths[position]) !== null && _d !== void 0 ? _d : 0) - ((_e = newAxisWidths[position]) !== null && _e !== void 0 ? _e : 0);
            return { clipSeries: clipSeries, axisThickness: axisThickness, axisOffset: axisOffset };
        };
        CartesianChart.prototype.positionAxis = function (opts) {
            var _a, _b, _c, _d;
            var axis = opts.axis, axisBound = opts.axisBound, axisWidths = opts.axisWidths, seriesRect = opts.seriesRect, axisOffset = opts.axisOffset, axisThickness = opts.axisThickness;
            var position = axis.position;
            switch (position) {
                case 'top':
                    axis.translation.x = axisBound.x + ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0);
                    axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + 1 + axisOffset + axisThickness, 'y', 1);
                    break;
                case 'bottom':
                    axis.translation.x = axisBound.x + ((_b = axisWidths.left) !== null && _b !== void 0 ? _b : 0);
                    axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + axisBound.height + 1 - axisThickness - axisOffset, 'y', -1);
                    break;
                case 'left':
                    axis.translation.y = axisBound.y + ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0);
                    axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisOffset + axisThickness, 'x', 1);
                    break;
                case 'right':
                    axis.translation.y = axisBound.y + ((_d = axisWidths.top) !== null && _d !== void 0 ? _d : 0);
                    axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisBound.width - axisThickness - axisOffset, 'x', -1);
                    break;
            }
            axis.updatePosition();
        };
        CartesianChart.className = 'CartesianChart';
        CartesianChart.type = 'cartesian';
        return CartesianChart;
    }(Chart));

    var __extends$p = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var PolarSeries = /** @class */ (function (_super) {
        __extends$p(PolarSeries, _super);
        function PolarSeries(_a) {
            var _b;
            var _c = _a.useLabelLayer, useLabelLayer = _c === void 0 ? false : _c;
            var _this = _super.call(this, { useLabelLayer: useLabelLayer, pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH] }) || this;
            _this.directionKeys = (_b = {},
                _b[ChartAxisDirection.X] = ['angleKey'],
                _b[ChartAxisDirection.Y] = ['radiusKey'],
                _b);
            /**
             * The center of the polar series (for example, the center of a pie).
             * If the polar chart has multiple series, all of them will have their
             * center set to the same value as a result of the polar chart layout.
             * The center coordinates are not supposed to be set by the user.
             */
            _this.centerX = 0;
            _this.centerY = 0;
            /**
             * The maximum radius the series can use.
             * This value is set automatically as a result of the polar chart layout
             * and is not supposed to be set by the user.
             */
            _this.radius = 0;
            return _this;
        }
        PolarSeries.prototype.getLabelData = function () {
            return [];
        };
        PolarSeries.prototype.computeLabelsBBox = function (_options) {
            return null;
        };
        return PolarSeries;
    }(Series));

    var __extends$o = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$9 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$9 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var PolarChart = /** @class */ (function (_super) {
        __extends$o(PolarChart, _super);
        function PolarChart(document, overrideDevicePixelRatio, resources) {
            if (document === void 0) { document = window.document; }
            var _this = _super.call(this, document, overrideDevicePixelRatio, resources) || this;
            _this.padding = new Padding(40);
            var root = _this.scene.root;
            _this.legend.attachLegend(root);
            return _this;
        }
        PolarChart.prototype.performLayout = function () {
            return __awaiter$9(this, void 0, void 0, function () {
                var _a, width, height, padding, shrinkRect;
                return __generator$9(this, function (_b) {
                    this.scene.root.visible = true;
                    _a = this, width = _a.width, height = _a.height, padding = _a.padding;
                    shrinkRect = new BBox(0, 0, width, height);
                    shrinkRect.shrink(padding.left, 'left');
                    shrinkRect.shrink(padding.top, 'top');
                    shrinkRect.shrink(padding.right, 'right');
                    shrinkRect.shrink(padding.bottom, 'bottom');
                    shrinkRect = this.positionCaptions(shrinkRect);
                    shrinkRect = this.positionLegend(shrinkRect);
                    this.computeSeriesRect(shrinkRect);
                    this.computeCircle();
                    return [2 /*return*/];
                });
            });
        };
        PolarChart.prototype.computeSeriesRect = function (shrinkRect) {
            var legend = this.legend;
            if (legend.visible && legend.enabled && legend.data.length) {
                var legendPadding = legend.spacing;
                shrinkRect.shrink(legendPadding, legend.position);
            }
            this.seriesRect = shrinkRect;
        };
        PolarChart.prototype.computeCircle = function () {
            var _this = this;
            var seriesBox = this.seriesRect;
            var polarSeries = this.series.filter(function (series) {
                return series instanceof PolarSeries;
            });
            var setSeriesCircle = function (cx, cy, r) {
                polarSeries.forEach(function (series) {
                    series.centerX = cx;
                    series.centerY = cy;
                    series.radius = r;
                });
            };
            var centerX = seriesBox.x + seriesBox.width / 2;
            var centerY = seriesBox.y + seriesBox.height / 2;
            var initialRadius = Math.max(0, Math.min(seriesBox.width, seriesBox.height) / 2);
            var radius = initialRadius;
            setSeriesCircle(centerX, centerY, radius);
            var shake = function (_a) {
                var _b = (_a === void 0 ? {} : _a).hideWhenNecessary, hideWhenNecessary = _b === void 0 ? false : _b;
                var labelBoxes = polarSeries
                    .map(function (series) { return series.computeLabelsBBox({ hideWhenNecessary: hideWhenNecessary }); })
                    .filter(function (box) { return box != null; });
                if (labelBoxes.length === 0) {
                    setSeriesCircle(centerX, centerY, initialRadius);
                    return;
                }
                var labelBox = BBox.merge(labelBoxes);
                var refined = _this.refineCircle(labelBox, radius);
                setSeriesCircle(refined.centerX, refined.centerY, refined.radius);
                if (refined.radius === radius) {
                    return;
                }
                radius = refined.radius;
            };
            shake(); // Initial attempt
            shake(); // Precise attempt
            shake({ hideWhenNecessary: true }); // Hide unnecessary labels
            shake({ hideWhenNecessary: true }); // Final result
        };
        PolarChart.prototype.refineCircle = function (labelsBox, radius) {
            var minCircleRatio = 0.5; // Prevents reduced circle to be too small
            var seriesBox = this.seriesRect;
            var circleLeft = -radius;
            var circleTop = -radius;
            var circleRight = radius;
            var circleBottom = radius;
            // Label padding around the circle
            var padLeft = Math.max(0, circleLeft - labelsBox.x);
            var padTop = Math.max(0, circleTop - labelsBox.y);
            var padRight = Math.max(0, labelsBox.x + labelsBox.width - circleRight);
            var padBottom = Math.max(0, labelsBox.y + labelsBox.height - circleBottom);
            // Available area for the circle (after the padding will be applied)
            var availCircleWidth = seriesBox.width - padLeft - padRight;
            var availCircleHeight = seriesBox.height - padTop - padBottom;
            var newRadius = Math.min(availCircleWidth, availCircleHeight) / 2;
            var minHorizontalRadius = (minCircleRatio * seriesBox.width) / 2;
            var minVerticalRadius = (minCircleRatio * seriesBox.height) / 2;
            var minRadius = Math.min(minHorizontalRadius, minVerticalRadius);
            if (newRadius < minRadius) {
                // If the radius is too small, reduce the label padding
                newRadius = minRadius;
                if (newRadius === minVerticalRadius) {
                    var t = seriesBox.height / (newRadius * 2 + padTop + padBottom);
                    padTop *= t;
                    padBottom *= t;
                }
                if (newRadius === minHorizontalRadius) {
                    var padWidth = seriesBox.width - 2 * newRadius;
                    if (Math.min(padLeft, padRight) * 2 > padWidth) {
                        padLeft = padWidth / 2;
                        padRight = padWidth / 2;
                    }
                    else if (padLeft > padRight) {
                        padLeft = padWidth - padRight;
                    }
                    else {
                        padRight = padWidth - padLeft;
                    }
                }
            }
            var newWidth = padLeft + 2 * newRadius + padRight;
            var newHeight = padTop + 2 * newRadius + padBottom;
            return {
                centerX: seriesBox.x + (seriesBox.width - newWidth) / 2 + padLeft + newRadius,
                centerY: seriesBox.y + (seriesBox.height - newHeight) / 2 + padTop + newRadius,
                radius: newRadius,
            };
        };
        PolarChart.className = 'PolarChart';
        PolarChart.type = 'polar';
        return PolarChart;
    }(Chart));

    var __extends$n = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$8 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$8 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var HierarchyChart = /** @class */ (function (_super) {
        __extends$n(HierarchyChart, _super);
        function HierarchyChart(document, overrideDevicePixelRatio, resources) {
            if (document === void 0) { document = window.document; }
            var _this = _super.call(this, document, overrideDevicePixelRatio, resources) || this;
            _this._data = {};
            var root = _this.scene.root;
            _this.legend.attachLegend(root);
            return _this;
        }
        HierarchyChart.prototype.performLayout = function () {
            return __awaiter$8(this, void 0, void 0, function () {
                var _a, width, height, legend, padding, shrinkRect, legendPadding, seriesRoot;
                return __generator$8(this, function (_b) {
                    this.scene.root.visible = true;
                    _a = this, width = _a.width, height = _a.height, legend = _a.legend, padding = _a.padding;
                    shrinkRect = new BBox(0, 0, width, height);
                    shrinkRect.shrink(padding.left, 'left');
                    shrinkRect.shrink(padding.top, 'top');
                    shrinkRect.shrink(padding.right, 'right');
                    shrinkRect.shrink(padding.bottom, 'bottom');
                    shrinkRect = this.positionCaptions(shrinkRect);
                    shrinkRect = this.positionLegend(shrinkRect);
                    if (legend.visible && legend.enabled && legend.data.length) {
                        legendPadding = legend.spacing;
                        shrinkRect.shrink(legendPadding, legend.position);
                    }
                    this.seriesRect = shrinkRect;
                    this.series.forEach(function (series) {
                        series.rootGroup.translationX = Math.floor(shrinkRect.x);
                        series.rootGroup.translationY = Math.floor(shrinkRect.y);
                        series.update({ seriesRect: shrinkRect }); // this has to happen after the `updateAxes` call
                    });
                    seriesRoot = this.seriesRoot;
                    seriesRoot.x = shrinkRect.x;
                    seriesRoot.y = shrinkRect.y;
                    seriesRoot.width = shrinkRect.width;
                    seriesRoot.height = shrinkRect.height;
                    return [2 /*return*/];
                });
            });
        };
        HierarchyChart.className = 'HierarchyChart';
        HierarchyChart.type = 'hierarchy';
        return HierarchyChart;
    }(Chart));

    function equal(a, b) {
        if (a === b)
            return true;
        if (a && b && typeof a == 'object' && typeof b == 'object') {
            if (a.constructor !== b.constructor)
                return false;
            var length_1, i = void 0;
            if (Array.isArray(a)) {
                length_1 = a.length;
                if (length_1 != b.length)
                    return false;
                for (i = length_1; i-- !== 0;)
                    if (!equal(a[i], b[i]))
                        return false;
                return true;
            }
            if (a.constructor === RegExp)
                return a.source === b.source && a.flags === b.flags;
            if (a.valueOf !== Object.prototype.valueOf)
                return a.valueOf() === b.valueOf();
            if (a.toString !== Object.prototype.toString)
                return a.toString() === b.toString();
            var keys = Object.keys(a);
            length_1 = keys.length;
            if (length_1 !== Object.keys(b).length)
                return false;
            for (i = length_1; i-- !== 0;)
                if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
                    return false;
            for (i = length_1; i-- !== 0;) {
                var key = keys[i];
                if (!equal(a[key], b[key]))
                    return false;
            }
            return true;
        }
        // true if both NaN, false otherwise
        return a !== a && b !== b;
    }

    var __read$c = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var interpolatePattern = /(#\{(.*?)\})/g;
    function interpolate(input, values, formats) {
        return input.replace(interpolatePattern, function () {
            var name = arguments[2];
            var _a = __read$c(name.split(':'), 2), valueName = _a[0], formatName = _a[1];
            var value = values[valueName];
            if (typeof value === 'number') {
                var format = formatName && formats && formats[formatName];
                if (format) {
                    var _b = format, locales = _b.locales, options = _b.options;
                    return value.toLocaleString(locales, options);
                }
                return String(value);
            }
            if (value instanceof Date) {
                var format = formatName && formats && formats[formatName];
                if (typeof format === 'string') {
                    var formatter = buildFormatter(format);
                    return formatter(value);
                }
                return value.toDateString();
            }
            if (typeof value === 'string' || (value && value.toString)) {
                return String(value);
            }
            return '';
        });
    }

    var __decorate$d = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Label = /** @class */ (function () {
        function Label() {
            this.enabled = true;
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.color = 'rgba(70, 70, 70, 1)';
        }
        Label.prototype.getFont = function () {
            return getFont(this.fontSize, this.fontFamily, this.fontStyle, this.fontWeight);
        };
        __decorate$d([
            Validate(BOOLEAN)
        ], Label.prototype, "enabled", void 0);
        __decorate$d([
            Validate(NUMBER(0))
        ], Label.prototype, "fontSize", void 0);
        __decorate$d([
            Validate(STRING)
        ], Label.prototype, "fontFamily", void 0);
        __decorate$d([
            Validate(OPT_FONT_STYLE)
        ], Label.prototype, "fontStyle", void 0);
        __decorate$d([
            Validate(OPT_FONT_WEIGHT)
        ], Label.prototype, "fontWeight", void 0);
        __decorate$d([
            Validate(COLOR_STRING)
        ], Label.prototype, "color", void 0);
        return Label;
    }());

    var element = null;
    function sanitizeHtml(text) {
        element = element || document.createElement('div');
        if (!text) {
            return '';
        }
        element.textContent = text;
        return element.innerHTML;
    }

    var __extends$m = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$c = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$7 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$7 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __values$5 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$b = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$7 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$b(arguments[i]));
        return ar;
    };
    var AreaSeriesLabel = /** @class */ (function (_super) {
        __extends$m(AreaSeriesLabel, _super);
        function AreaSeriesLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.formatter = undefined;
            return _this;
        }
        __decorate$c([
            Validate(OPT_FUNCTION)
        ], AreaSeriesLabel.prototype, "formatter", void 0);
        return AreaSeriesLabel;
    }(Label));
    var AreaSeriesTooltip = /** @class */ (function (_super) {
        __extends$m(AreaSeriesTooltip, _super);
        function AreaSeriesTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderer = undefined;
            _this.format = undefined;
            return _this;
        }
        __decorate$c([
            Validate(OPT_FUNCTION)
        ], AreaSeriesTooltip.prototype, "renderer", void 0);
        __decorate$c([
            Validate(OPT_STRING)
        ], AreaSeriesTooltip.prototype, "format", void 0);
        return AreaSeriesTooltip;
    }(SeriesTooltip));
    var AreaSeriesTag;
    (function (AreaSeriesTag) {
        AreaSeriesTag[AreaSeriesTag["Fill"] = 0] = "Fill";
        AreaSeriesTag[AreaSeriesTag["Stroke"] = 1] = "Stroke";
        AreaSeriesTag[AreaSeriesTag["Marker"] = 2] = "Marker";
        AreaSeriesTag[AreaSeriesTag["Label"] = 3] = "Label";
    })(AreaSeriesTag || (AreaSeriesTag = {}));
    var AreaSeries = /** @class */ (function (_super) {
        __extends$m(AreaSeries, _super);
        function AreaSeries() {
            var _this = _super.call(this, {
                pathsPerSeries: 2,
                pathsZIndexSubOrderOffset: [0, 1000],
                hasMarkers: true,
                renderLayerPerSubSeries: false,
            }) || this;
            _this.tooltip = new AreaSeriesTooltip();
            _this.xData = [];
            _this.yData = [];
            _this.yDomain = [];
            _this.xDomain = [];
            _this.directionKeys = {
                x: ['xKey'],
                y: ['yKeys'],
            };
            _this.marker = new CartesianSeriesMarker();
            _this.label = new AreaSeriesLabel();
            _this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];
            _this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];
            _this.fillOpacity = 1;
            _this.strokeOpacity = 1;
            _this.lineDash = [0];
            _this.lineDashOffset = 0;
            _this._xKey = '';
            _this.xName = '';
            _this._yKeys = [];
            _this._visibles = [];
            _this.yNames = [];
            _this.strokeWidth = 2;
            _this.shadow = undefined;
            var _a = _this, marker = _a.marker, label = _a.label;
            marker.enabled = false;
            label.enabled = false;
            return _this;
        }
        Object.defineProperty(AreaSeries.prototype, "xKey", {
            get: function () {
                return this._xKey;
            },
            set: function (value) {
                this._xKey = value;
                this.xData = [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AreaSeries.prototype, "yKeys", {
            get: function () {
                return this._yKeys;
            },
            set: function (values) {
                if (!equal(this._yKeys, values)) {
                    this._yKeys = values;
                    this.yData = [];
                    this.processSeriesItemEnabled();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AreaSeries.prototype, "visibles", {
            get: function () {
                return this._visibles;
            },
            set: function (visibles) {
                this._visibles = visibles;
                this.processSeriesItemEnabled();
            },
            enumerable: false,
            configurable: true
        });
        AreaSeries.prototype.processSeriesItemEnabled = function () {
            var _a = this, seriesItemEnabled = _a.seriesItemEnabled, _b = _a._visibles, visibles = _b === void 0 ? [] : _b;
            seriesItemEnabled.clear();
            this._yKeys.forEach(function (key, idx) { var _a; return seriesItemEnabled.set(key, (_a = visibles[idx]) !== null && _a !== void 0 ? _a : true); });
        };
        Object.defineProperty(AreaSeries.prototype, "normalizedTo", {
            get: function () {
                return this._normalizedTo;
            },
            set: function (value) {
                var absValue = value ? Math.abs(value) : undefined;
                if (this._normalizedTo !== absValue) {
                    this._normalizedTo = absValue;
                }
            },
            enumerable: false,
            configurable: true
        });
        AreaSeries.prototype.processData = function () {
            return __awaiter$7(this, void 0, void 0, function () {
                var _a, xKey, yKeys, seriesItemEnabled, xAxis, yAxis, normalizedTo, data, isContinuousX, isContinuousY, normalized, yData, xData, xValues, missingYKeys, _loop_1, data_1, data_1_1, datum, missingYKeysString_1, yMin, yMax, i, total, yData_1, yData_1_1, seriesYs, y, normalizedTotal, yData_2, yData_2_1, seriesYs, normalizedY, domainWhitespaceAdjustment;
                var e_1, _b, e_2, _c, e_3, _d;
                return __generator$7(this, function (_e) {
                    _a = this, xKey = _a.xKey, yKeys = _a.yKeys, seriesItemEnabled = _a.seriesItemEnabled, xAxis = _a.xAxis, yAxis = _a.yAxis, normalizedTo = _a.normalizedTo;
                    data = xKey && yKeys.length && this.data ? this.data : [];
                    if (!xAxis || !yAxis) {
                        return [2 /*return*/];
                    }
                    isContinuousX = xAxis.scale instanceof ContinuousScale;
                    isContinuousY = yAxis.scale instanceof ContinuousScale;
                    normalized = normalizedTo && isFinite(normalizedTo);
                    yData = [];
                    xData = [];
                    xValues = [];
                    missingYKeys = new Set(yKeys);
                    _loop_1 = function (datum) {
                        // X datum
                        if (!(xKey in datum)) {
                            doOnce(function () { return console.warn("AG Charts - The key '" + xKey + "' was not found in the data: ", datum); }, xKey + " not found in data");
                            return "continue";
                        }
                        var xDatum = checkDatum(datum[xKey], isContinuousX);
                        if (isContinuousX && xDatum === undefined) {
                            return "continue";
                        }
                        else {
                            xValues.push(xDatum);
                            xData.push({ xDatum: xDatum, seriesDatum: datum });
                        }
                        // Y datum
                        yKeys.forEach(function (yKey, i) {
                            var seriesYs = yData[i] || (yData[i] = []);
                            if (!(yKey in datum)) {
                                seriesYs.push(NaN);
                                return;
                            }
                            missingYKeys.delete(yKey);
                            var value = datum[yKey];
                            if (!seriesItemEnabled.get(yKey)) {
                                seriesYs.push(NaN);
                            }
                            else {
                                var yDatum = checkDatum(value, isContinuousY);
                                seriesYs.push(yDatum);
                            }
                        });
                    };
                    try {
                        for (data_1 = __values$5(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                            datum = data_1_1.value;
                            _loop_1(datum);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (data_1_1 && !data_1_1.done && (_b = data_1.return)) _b.call(data_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (missingYKeys.size > 0) {
                        missingYKeysString_1 = JSON.stringify(__spread$7(missingYKeys));
                        doOnce(function () { return console.log("AG Charts - yKeys " + missingYKeysString_1 + " were not found in the data."); }, missingYKeysString_1 + " not found in data.");
                    }
                    this.yData = yData;
                    this.xData = xData;
                    this.xDomain = isContinuousX ? this.fixNumericExtent(extent(xValues, isContinuous), xAxis) : xValues;
                    yMin = undefined;
                    yMax = undefined;
                    for (i = 0; i < xData.length; i++) {
                        total = { sum: 0, absSum: 0 };
                        try {
                            for (yData_1 = (e_2 = void 0, __values$5(yData)), yData_1_1 = yData_1.next(); !yData_1_1.done; yData_1_1 = yData_1.next()) {
                                seriesYs = yData_1_1.value;
                                if (seriesYs[i] === undefined || isNaN(seriesYs[i])) {
                                    continue;
                                }
                                y = +seriesYs[i];
                                total.absSum += Math.abs(y);
                                total.sum += y;
                                if (total.sum >= (yMax !== null && yMax !== void 0 ? yMax : 0)) {
                                    yMax = total.sum;
                                }
                                else if (total.sum <= (yMin !== null && yMin !== void 0 ? yMin : 0)) {
                                    yMin = total.sum;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (yData_1_1 && !yData_1_1.done && (_c = yData_1.return)) _c.call(yData_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (!(normalized && normalizedTo)) {
                            continue;
                        }
                        normalizedTotal = undefined;
                        try {
                            // normalize y values using the absolute sum of y values in the stack
                            for (yData_2 = (e_3 = void 0, __values$5(yData)), yData_2_1 = yData_2.next(); !yData_2_1.done; yData_2_1 = yData_2.next()) {
                                seriesYs = yData_2_1.value;
                                normalizedY = (+seriesYs[i] / total.absSum) * normalizedTo;
                                seriesYs[i] = normalizedY;
                                if (!isNaN(normalizedY)) {
                                    // sum normalized values to get updated yMin and yMax of normalized area
                                    normalizedTotal = (normalizedTotal !== null && normalizedTotal !== void 0 ? normalizedTotal : 0) + normalizedY;
                                }
                                else {
                                    continue;
                                }
                                if (normalizedTotal >= (yMax !== null && yMax !== void 0 ? yMax : 0)) {
                                    yMax = normalizedTotal;
                                }
                                else if (normalizedTotal <= (yMin !== null && yMin !== void 0 ? yMin : 0)) {
                                    yMin = normalizedTotal;
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (yData_2_1 && !yData_2_1.done && (_d = yData_2.return)) _d.call(yData_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                    if (normalized && normalizedTo) {
                        domainWhitespaceAdjustment = 0.5;
                        // set the yMin and yMax based on cumulative sum of normalized values
                        yMin = (yMin !== null && yMin !== void 0 ? yMin : 0) < -normalizedTo * domainWhitespaceAdjustment ? -normalizedTo : yMin;
                        yMax = (yMax !== null && yMax !== void 0 ? yMax : 0) > normalizedTo * domainWhitespaceAdjustment ? normalizedTo : yMax;
                    }
                    this.yDomain = this.fixNumericExtent(yMin === undefined && yMax === undefined ? undefined : [yMin !== null && yMin !== void 0 ? yMin : 0, yMax !== null && yMax !== void 0 ? yMax : 0], yAxis);
                    return [2 /*return*/];
                });
            });
        };
        AreaSeries.prototype.getDomain = function (direction) {
            if (direction === ChartAxisDirection.X) {
                return this.xDomain;
            }
            else {
                return this.yDomain;
            }
        };
        AreaSeries.prototype.createNodeData = function () {
            return __awaiter$7(this, void 0, void 0, function () {
                var _a, data, xAxis, yAxis, xData, yData, contexts, _b, yKeys, marker, label, fills, strokes, seriesId, xScale, yScale, continuousY, xOffset, cumulativePathValues, cumulativeMarkerValues, createPathCoordinates, createMarkerCoordinate;
                var _this = this;
                return __generator$7(this, function (_c) {
                    _a = this, data = _a.data, xAxis = _a.xAxis, yAxis = _a.yAxis, xData = _a.xData, yData = _a.yData;
                    if (!data || !xAxis || !yAxis || !xData.length || !yData.length) {
                        return [2 /*return*/, []];
                    }
                    contexts = [];
                    _b = this, yKeys = _b.yKeys, marker = _b.marker, label = _b.label, fills = _b.fills, strokes = _b.strokes, seriesId = _b.id;
                    xScale = xAxis.scale;
                    yScale = yAxis.scale;
                    continuousY = yScale instanceof ContinuousScale;
                    xOffset = (xScale.bandwidth || 0) / 2;
                    cumulativePathValues = new Array(xData.length)
                        .fill(null)
                        .map(function () { return ({ left: 0, right: 0 }); });
                    cumulativeMarkerValues = new Array(xData.length).fill(0);
                    createPathCoordinates = function (xDatum, yDatum, idx, side) {
                        var x = xScale.convert(xDatum) + xOffset;
                        var prevY = cumulativePathValues[idx][side];
                        var currY = cumulativePathValues[idx][side] + yDatum;
                        var prevYCoordinate = yScale.convert(prevY, { strict: false });
                        var currYCoordinate = yScale.convert(currY, { strict: false });
                        cumulativePathValues[idx][side] = currY;
                        return [
                            { x: x, y: currYCoordinate, size: marker.size },
                            { x: x, y: prevYCoordinate, size: marker.size },
                        ];
                    };
                    createMarkerCoordinate = function (xDatum, yDatum, idx, rawYDatum) {
                        var currY;
                        // if not normalized, the invalid data points will be processed as `undefined` in processData()
                        // if normalized, the invalid data points will be processed as 0 rather than `undefined`
                        // check if unprocessed datum is valid as we only want to show markers for valid points
                        var normalized = _this.normalizedTo && isFinite(_this.normalizedTo);
                        var normalizedAndValid = normalized && continuousY && isContinuous(rawYDatum);
                        var valid = (!normalized && !isNaN(rawYDatum)) || normalizedAndValid;
                        if (valid) {
                            currY = cumulativeMarkerValues[idx] += yDatum;
                        }
                        var x = xScale.convert(xDatum) + xOffset;
                        var y = yScale.convert(currY, { strict: false });
                        return { x: x, y: y, size: marker.size };
                    };
                    yData.forEach(function (seriesYs, seriesIdx) {
                        var yKey = yKeys[seriesIdx];
                        var labelSelectionData = [];
                        var markerSelectionData = [];
                        var strokeSelectionData = { itemId: yKey, points: [], yValues: [] };
                        var fillSelectionData = { itemId: yKey, points: [] };
                        contexts[seriesIdx] = {
                            itemId: yKey,
                            fillSelectionData: fillSelectionData,
                            labelData: labelSelectionData,
                            nodeData: markerSelectionData,
                            strokeSelectionData: strokeSelectionData,
                        };
                        if (!_this.seriesItemEnabled.get(yKey)) {
                            return;
                        }
                        var fillPoints = fillSelectionData.points;
                        var fillPhantomPoints = [];
                        var strokePoints = strokeSelectionData.points;
                        var yValues = strokeSelectionData.yValues;
                        seriesYs.forEach(function (rawYDatum, datumIdx) {
                            var _a;
                            var yDatum = isNaN(rawYDatum) ? undefined : rawYDatum;
                            var _b = xData[datumIdx], xDatum = _b.xDatum, seriesDatum = _b.seriesDatum;
                            var nextXDatum = (_a = xData[datumIdx + 1]) === null || _a === void 0 ? void 0 : _a.xDatum;
                            var rawNextYDatum = seriesYs[datumIdx + 1];
                            var nextYDatum = isNaN(rawNextYDatum) ? undefined : rawNextYDatum;
                            // marker data
                            var point = createMarkerCoordinate(xDatum, +yDatum, datumIdx, seriesDatum[yKey]);
                            if (marker) {
                                markerSelectionData.push({
                                    index: datumIdx,
                                    series: _this,
                                    itemId: yKey,
                                    datum: seriesDatum,
                                    yValue: yDatum,
                                    yKey: yKey,
                                    point: point,
                                    fill: fills[seriesIdx % fills.length],
                                    stroke: strokes[seriesIdx % strokes.length],
                                });
                            }
                            // label data
                            var labelText;
                            if (label.formatter) {
                                labelText = label.formatter({ value: yDatum, seriesId: seriesId });
                            }
                            else {
                                labelText = isNumber(yDatum) ? Number(yDatum).toFixed(2) : String(yDatum);
                            }
                            if (label) {
                                labelSelectionData.push({
                                    index: datumIdx,
                                    itemId: yKey,
                                    point: point,
                                    label: _this.seriesItemEnabled.get(yKey) && labelText
                                        ? {
                                            text: labelText,
                                            fontStyle: label.fontStyle,
                                            fontWeight: label.fontWeight,
                                            fontSize: label.fontSize,
                                            fontFamily: label.fontFamily,
                                            textAlign: 'center',
                                            textBaseline: 'bottom',
                                            fill: label.color,
                                        }
                                        : undefined,
                                });
                            }
                            // fill data
                            // Handle data in pairs of current and next x and y values
                            var windowX = [xDatum, nextXDatum];
                            var windowY = [yDatum, nextYDatum];
                            if (windowX.some(function (v) { return v == undefined; })) {
                                return;
                            }
                            if (windowY.some(function (v) { return v == undefined; })) {
                                windowY[0] = 0;
                                windowY[1] = 0;
                            }
                            var currCoordinates = createPathCoordinates(windowX[0], +windowY[0], datumIdx, 'right');
                            fillPoints.push(currCoordinates[0]);
                            fillPhantomPoints.push(currCoordinates[1]);
                            var nextCoordinates = createPathCoordinates(windowX[1], +windowY[1], datumIdx, 'left');
                            fillPoints.push(nextCoordinates[0]);
                            fillPhantomPoints.push(nextCoordinates[1]);
                            // stroke data
                            strokePoints.push({ x: NaN, y: NaN }); // moveTo
                            yValues.push(undefined);
                            strokePoints.push(currCoordinates[0]);
                            yValues.push(yDatum);
                            if (nextYDatum !== undefined) {
                                strokePoints.push(nextCoordinates[0]);
                                yValues.push(yDatum);
                            }
                        });
                        for (var i = fillPhantomPoints.length - 1; i >= 0; i--) {
                            fillPoints.push(fillPhantomPoints[i]);
                        }
                    });
                    return [2 /*return*/, contexts];
                });
            });
        };
        AreaSeries.prototype.isPathOrSelectionDirty = function () {
            return this.marker.isDirty();
        };
        AreaSeries.prototype.updatePaths = function (opts) {
            return __awaiter$7(this, void 0, void 0, function () {
                var _a, fillSelectionData, strokeSelectionData, _b, fill, stroke;
                return __generator$7(this, function (_c) {
                    _a = opts.contextData, fillSelectionData = _a.fillSelectionData, strokeSelectionData = _a.strokeSelectionData, _b = __read$b(opts.paths, 2), fill = _b[0], stroke = _b[1];
                    fill.datum = fillSelectionData;
                    fill.tag = AreaSeriesTag.Fill;
                    fill.lineJoin = 'round';
                    fill.stroke = undefined;
                    fill.pointerEvents = PointerEvents.None;
                    stroke.datum = strokeSelectionData;
                    stroke.tag = AreaSeriesTag.Stroke;
                    stroke.fill = undefined;
                    stroke.lineJoin = stroke.lineCap = 'round';
                    stroke.pointerEvents = PointerEvents.None;
                    return [2 /*return*/];
                });
            });
        };
        AreaSeries.prototype.updatePathNodes = function (opts) {
            return __awaiter$7(this, void 0, void 0, function () {
                var _a, fill, stroke, seriesIdx, itemId, _b, strokes, fills, fillOpacity, strokeOpacity, strokeWidth, shadow, points, path, i, points_1, points_1_1, p, _c, points, yValues, moveTo_1, path, i, points_2, points_2_1, p;
                var e_4, _d, e_5, _e;
                return __generator$7(this, function (_f) {
                    _a = __read$b(opts.paths, 2), fill = _a[0], stroke = _a[1], seriesIdx = opts.seriesIdx, itemId = opts.itemId;
                    _b = this, strokes = _b.strokes, fills = _b.fills, fillOpacity = _b.fillOpacity, strokeOpacity = _b.strokeOpacity, strokeWidth = _b.strokeWidth, shadow = _b.shadow;
                    {
                        points = fill.datum.points;
                        fill.fill = fills[seriesIdx % fills.length];
                        fill.fillOpacity = fillOpacity;
                        fill.strokeOpacity = strokeOpacity;
                        fill.strokeWidth = strokeWidth;
                        fill.lineDash = this.lineDash;
                        fill.lineDashOffset = this.lineDashOffset;
                        fill.fillShadow = shadow;
                        path = fill.path;
                        path.clear({ trackChanges: true });
                        i = 0;
                        try {
                            for (points_1 = __values$5(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {
                                p = points_1_1.value;
                                if (i++ > 0) {
                                    path.lineTo(p.x, p.y);
                                }
                                else {
                                    path.moveTo(p.x, p.y);
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (points_1_1 && !points_1_1.done && (_d = points_1.return)) _d.call(points_1);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        path.closePath();
                        fill.checkPathDirty();
                    }
                    {
                        _c = stroke.datum, points = _c.points, yValues = _c.yValues;
                        moveTo_1 = true;
                        stroke.stroke = strokes[seriesIdx % strokes.length];
                        stroke.strokeWidth = this.getStrokeWidth(this.strokeWidth, { itemId: itemId });
                        stroke.strokeOpacity = strokeOpacity;
                        stroke.lineDash = this.lineDash;
                        stroke.lineDashOffset = this.lineDashOffset;
                        path = stroke.path;
                        path.clear({ trackChanges: true });
                        i = 0;
                        try {
                            for (points_2 = __values$5(points), points_2_1 = points_2.next(); !points_2_1.done; points_2_1 = points_2.next()) {
                                p = points_2_1.value;
                                if (yValues[i++] === undefined) {
                                    moveTo_1 = true;
                                }
                                else if (moveTo_1) {
                                    path.moveTo(p.x, p.y);
                                    moveTo_1 = false;
                                }
                                else {
                                    path.lineTo(p.x, p.y);
                                }
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (points_2_1 && !points_2_1.done && (_e = points_2.return)) _e.call(points_2);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                        stroke.checkPathDirty();
                    }
                    return [2 /*return*/];
                });
            });
        };
        AreaSeries.prototype.updateMarkerSelection = function (opts) {
            return __awaiter$7(this, void 0, void 0, function () {
                var nodeData, markerSelection, _a, enabled, shape, data, MarkerShape, updateMarkerSelection, enterMarkers;
                return __generator$7(this, function (_b) {
                    nodeData = opts.nodeData, markerSelection = opts.markerSelection;
                    _a = this.marker, enabled = _a.enabled, shape = _a.shape;
                    data = enabled && nodeData ? nodeData : [];
                    MarkerShape = getMarker(shape);
                    if (this.marker.isDirty()) {
                        markerSelection = markerSelection.setData([]);
                        markerSelection.exit.remove();
                    }
                    updateMarkerSelection = markerSelection.setData(data);
                    updateMarkerSelection.exit.remove();
                    enterMarkers = updateMarkerSelection.enter.append(MarkerShape).each(function (marker) {
                        marker.tag = AreaSeriesTag.Marker;
                    });
                    return [2 /*return*/, updateMarkerSelection.merge(enterMarkers)];
                });
            });
        };
        AreaSeries.prototype.updateMarkerNodes = function (opts) {
            return __awaiter$7(this, void 0, void 0, function () {
                var markerSelection, isDatumHighlighted, _a, seriesId, xKey, marker, seriesItemEnabled, yKeys, fills, strokes, seriesFillOpacity, _b, markerFillOpacity, strokeOpacity, _c, highlightedFill, _d, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, size, formatter, markerStrokeWidth, customMarker;
                return __generator$7(this, function (_e) {
                    markerSelection = opts.markerSelection, isDatumHighlighted = opts.isHighlight;
                    _a = this, seriesId = _a.id, xKey = _a.xKey, marker = _a.marker, seriesItemEnabled = _a.seriesItemEnabled, yKeys = _a.yKeys, fills = _a.fills, strokes = _a.strokes, seriesFillOpacity = _a.fillOpacity, _b = _a.marker.fillOpacity, markerFillOpacity = _b === void 0 ? seriesFillOpacity : _b, strokeOpacity = _a.strokeOpacity, _c = _a.highlightStyle.item, highlightedFill = _c.fill, _d = _c.fillOpacity, highlightFillOpacity = _d === void 0 ? markerFillOpacity : _d, highlightedStroke = _c.stroke, highlightedDatumStrokeWidth = _c.strokeWidth;
                    size = marker.size, formatter = marker.formatter;
                    markerStrokeWidth = marker.strokeWidth !== undefined ? marker.strokeWidth : this.strokeWidth;
                    customMarker = typeof marker.shape === 'function';
                    markerSelection.each(function (node, datum) {
                        var _a, _b;
                        var yKeyIndex = yKeys.indexOf(datum.yKey);
                        var fill = isDatumHighlighted && highlightedFill !== undefined
                            ? highlightedFill
                            : marker.fill || fills[yKeyIndex % fills.length];
                        var fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;
                        var stroke = isDatumHighlighted && highlightedStroke !== undefined
                            ? highlightedStroke
                            : marker.stroke || strokes[yKeyIndex % fills.length];
                        var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined
                            ? highlightedDatumStrokeWidth
                            : markerStrokeWidth;
                        var format = undefined;
                        if (formatter) {
                            format = formatter({
                                datum: datum.datum,
                                xKey: xKey,
                                yKey: datum.yKey,
                                fill: fill,
                                stroke: stroke,
                                strokeWidth: strokeWidth,
                                size: size,
                                highlighted: isDatumHighlighted,
                                seriesId: seriesId,
                            });
                        }
                        node.fill = (format && format.fill) || fill;
                        node.stroke = (format && format.stroke) || stroke;
                        node.strokeWidth = format && format.strokeWidth !== undefined ? format.strokeWidth : strokeWidth;
                        node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
                        node.strokeOpacity = (_b = (_a = marker.strokeOpacity) !== null && _a !== void 0 ? _a : strokeOpacity) !== null && _b !== void 0 ? _b : 1;
                        node.size = format && format.size !== undefined ? format.size : size;
                        node.translationX = datum.point.x;
                        node.translationY = datum.point.y;
                        node.visible =
                            node.size > 0 && !!seriesItemEnabled.get(datum.yKey) && !isNaN(datum.point.x) && !isNaN(datum.point.y);
                        if (!customMarker || node.dirtyPath) {
                            return;
                        }
                        // Only for cutom marker shapes
                        node.path.clear({ trackChanges: true });
                        node.updatePath();
                        node.checkPathDirty();
                    });
                    if (!isDatumHighlighted) {
                        this.marker.markClean();
                    }
                    return [2 /*return*/];
                });
            });
        };
        AreaSeries.prototype.updateLabelSelection = function (opts) {
            return __awaiter$7(this, void 0, void 0, function () {
                var labelData, labelSelection, updateLabels, enterLabels;
                return __generator$7(this, function (_a) {
                    labelData = opts.labelData, labelSelection = opts.labelSelection;
                    updateLabels = labelSelection.setData(labelData);
                    updateLabels.exit.remove();
                    enterLabels = updateLabels.enter.append(Text).each(function (text) {
                        text.tag = AreaSeriesTag.Label;
                    });
                    return [2 /*return*/, updateLabels.merge(enterLabels)];
                });
            });
        };
        AreaSeries.prototype.updateLabelNodes = function (opts) {
            return __awaiter$7(this, void 0, void 0, function () {
                var labelSelection, _a, labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color;
                return __generator$7(this, function (_b) {
                    labelSelection = opts.labelSelection;
                    _a = this.label, labelEnabled = _a.enabled, fontStyle = _a.fontStyle, fontWeight = _a.fontWeight, fontSize = _a.fontSize, fontFamily = _a.fontFamily, color = _a.color;
                    labelSelection.each(function (text, datum) {
                        var point = datum.point, label = datum.label;
                        if (label && labelEnabled) {
                            text.fontStyle = fontStyle;
                            text.fontWeight = fontWeight;
                            text.fontSize = fontSize;
                            text.fontFamily = fontFamily;
                            text.textAlign = label.textAlign;
                            text.textBaseline = label.textBaseline;
                            text.text = label.text;
                            text.x = point.x;
                            text.y = point.y - 10;
                            text.fill = color;
                            text.visible = true;
                        }
                        else {
                            text.visible = false;
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        AreaSeries.prototype.getNodeClickEvent = function (event, datum) {
            return new CartesianSeriesNodeClickEvent(this.xKey, datum.yKey, event, datum, this);
        };
        AreaSeries.prototype.getTooltipHtml = function (nodeDatum) {
            var _a = this, xKey = _a.xKey, seriesId = _a.id;
            var yKey = nodeDatum.yKey;
            if (!(xKey && yKey) || !this.seriesItemEnabled.get(yKey)) {
                return '';
            }
            var datum = nodeDatum.datum;
            var xValue = datum[xKey];
            var yValue = datum[yKey];
            var _b = this, xAxis = _b.xAxis, yAxis = _b.yAxis;
            if (!(xAxis && yAxis && isNumber(yValue))) {
                return '';
            }
            var _c = this, xName = _c.xName, yKeys = _c.yKeys, yNames = _c.yNames, yData = _c.yData, fills = _c.fills, strokes = _c.strokes, tooltip = _c.tooltip, marker = _c.marker;
            var size = marker.size, markerFormatter = marker.formatter, markerStrokeWidth = marker.strokeWidth, markerFill = marker.fill, markerStroke = marker.stroke;
            var xString = xAxis.formatDatum(xValue);
            var yString = yAxis.formatDatum(yValue);
            var yKeyIndex = yKeys.indexOf(yKey);
            var seriesYs = yData[yKeyIndex];
            var processedYValue = seriesYs[nodeDatum.index];
            var yName = yNames[yKeyIndex];
            var title = sanitizeHtml(yName);
            var content = sanitizeHtml(xString + ': ' + yString);
            var strokeWidth = markerStrokeWidth !== undefined ? markerStrokeWidth : this.strokeWidth;
            var fill = markerFill || fills[yKeyIndex % fills.length];
            var stroke = markerStroke || strokes[yKeyIndex % fills.length];
            var format = undefined;
            if (markerFormatter) {
                format = markerFormatter({
                    datum: datum,
                    xKey: xKey,
                    yKey: yKey,
                    fill: fill,
                    stroke: stroke,
                    strokeWidth: strokeWidth,
                    size: size,
                    highlighted: false,
                    seriesId: seriesId,
                });
            }
            var color = (format && format.fill) || fill;
            var defaults = {
                title: title,
                backgroundColor: color,
                content: content,
            };
            var tooltipRenderer = tooltip.renderer, tooltipFormat = tooltip.format;
            if (tooltipFormat || tooltipRenderer) {
                var params = {
                    datum: datum,
                    xKey: xKey,
                    xName: xName,
                    xValue: xValue,
                    yKey: yKey,
                    yValue: yValue,
                    processedYValue: processedYValue,
                    yName: yName,
                    color: color,
                    title: title,
                    seriesId: seriesId,
                };
                if (tooltipFormat) {
                    return toTooltipHtml({
                        content: interpolate(tooltipFormat, params),
                    }, defaults);
                }
                if (tooltipRenderer) {
                    return toTooltipHtml(tooltipRenderer(params), defaults);
                }
            }
            return toTooltipHtml(defaults);
        };
        AreaSeries.prototype.getLegendData = function () {
            var _a, _b;
            var _c = this, data = _c.data, id = _c.id, xKey = _c.xKey, yKeys = _c.yKeys, yNames = _c.yNames, seriesItemEnabled = _c.seriesItemEnabled, marker = _c.marker, fills = _c.fills, strokes = _c.strokes, fillOpacity = _c.fillOpacity, strokeOpacity = _c.strokeOpacity;
            if (!data || !data.length || !xKey || !yKeys.length) {
                return [];
            }
            var legendData = [];
            // Area stacks should be listed in the legend in reverse order, for symmetry with the
            // vertical stack display order.
            for (var index = yKeys.length - 1; index >= 0; index--) {
                var yKey = yKeys[index];
                legendData.push({
                    id: id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: seriesItemEnabled.get(yKey) || false,
                    label: {
                        text: yNames[index] || yKeys[index],
                    },
                    marker: {
                        shape: marker.shape,
                        fill: marker.fill || fills[index % fills.length],
                        stroke: marker.stroke || strokes[index % strokes.length],
                        fillOpacity: (_a = marker.fillOpacity) !== null && _a !== void 0 ? _a : fillOpacity,
                        strokeOpacity: (_b = marker.strokeOpacity) !== null && _b !== void 0 ? _b : strokeOpacity,
                    },
                });
            }
            return legendData;
        };
        AreaSeries.prototype.isLabelEnabled = function () {
            return this.label.enabled;
        };
        AreaSeries.className = 'AreaSeries';
        AreaSeries.type = 'area';
        __decorate$c([
            Validate(COLOR_STRING_ARRAY)
        ], AreaSeries.prototype, "fills", void 0);
        __decorate$c([
            Validate(COLOR_STRING_ARRAY)
        ], AreaSeries.prototype, "strokes", void 0);
        __decorate$c([
            Validate(NUMBER(0, 1))
        ], AreaSeries.prototype, "fillOpacity", void 0);
        __decorate$c([
            Validate(NUMBER(0, 1))
        ], AreaSeries.prototype, "strokeOpacity", void 0);
        __decorate$c([
            Validate(OPT_LINE_DASH)
        ], AreaSeries.prototype, "lineDash", void 0);
        __decorate$c([
            Validate(NUMBER(0))
        ], AreaSeries.prototype, "lineDashOffset", void 0);
        __decorate$c([
            Validate(STRING)
        ], AreaSeries.prototype, "_xKey", void 0);
        __decorate$c([
            Validate(STRING)
        ], AreaSeries.prototype, "xName", void 0);
        __decorate$c([
            Validate(STRING_ARRAY)
        ], AreaSeries.prototype, "_yKeys", void 0);
        __decorate$c([
            Validate(BOOLEAN_ARRAY)
        ], AreaSeries.prototype, "_visibles", void 0);
        __decorate$c([
            Validate(STRING_ARRAY)
        ], AreaSeries.prototype, "yNames", void 0);
        __decorate$c([
            Validate(OPT_NUMBER())
        ], AreaSeries.prototype, "_normalizedTo", void 0);
        __decorate$c([
            Validate(NUMBER(0))
        ], AreaSeries.prototype, "strokeWidth", void 0);
        return AreaSeries;
    }(CartesianSeries));

    var __extends$l = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$b = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$6 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$6 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$a = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$6 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$a(arguments[i]));
        return ar;
    };
    var __values$4 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var BAR_LABEL_PLACEMENTS = ['inside', 'outside'];
    var OPT_BAR_LABEL_PLACEMENT = function (v, ctx) {
        return OPTIONAL(v, ctx, function (v) { return BAR_LABEL_PLACEMENTS.includes(v); });
    };
    var BarSeriesNodeTag;
    (function (BarSeriesNodeTag) {
        BarSeriesNodeTag[BarSeriesNodeTag["Bar"] = 0] = "Bar";
        BarSeriesNodeTag[BarSeriesNodeTag["Label"] = 1] = "Label";
    })(BarSeriesNodeTag || (BarSeriesNodeTag = {}));
    var BarSeriesLabel = /** @class */ (function (_super) {
        __extends$l(BarSeriesLabel, _super);
        function BarSeriesLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.formatter = undefined;
            _this.placement = 'inside';
            return _this;
        }
        __decorate$b([
            Validate(OPT_FUNCTION)
        ], BarSeriesLabel.prototype, "formatter", void 0);
        __decorate$b([
            Validate(OPT_BAR_LABEL_PLACEMENT)
        ], BarSeriesLabel.prototype, "placement", void 0);
        return BarSeriesLabel;
    }(Label));
    var BarSeriesTooltip = /** @class */ (function (_super) {
        __extends$l(BarSeriesTooltip, _super);
        function BarSeriesTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderer = undefined;
            return _this;
        }
        __decorate$b([
            Validate(OPT_FUNCTION)
        ], BarSeriesTooltip.prototype, "renderer", void 0);
        return BarSeriesTooltip;
    }(SeriesTooltip));
    function flat(arr, target) {
        if (target === void 0) { target = []; }
        arr.forEach(function (v) {
            if (Array.isArray(v)) {
                flat(v, target);
            }
            else {
                target.push(v);
            }
        });
        return target;
    }
    function is2dArray$1(array) {
        return array.length > 0 && Array.isArray(array[0]);
    }
    var BarSeries = /** @class */ (function (_super) {
        __extends$l(BarSeries, _super);
        function BarSeries() {
            var _a;
            var _this = _super.call(this, {
                pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],
                pathsPerSeries: 0,
            }) || this;
            _this.xData = [];
            _this.yData = [];
            _this.yDomain = [];
            _this.label = new BarSeriesLabel();
            _this.tooltip = new BarSeriesTooltip();
            _this.flipXY = false;
            _this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];
            _this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];
            _this.fillOpacity = 1;
            _this.strokeOpacity = 1;
            _this.lineDash = [0];
            _this.lineDashOffset = 0;
            _this.formatter = undefined;
            /**
             * Used to get the position of bars within each group.
             */
            _this.groupScale = new BandScale();
            _this.directionKeys = (_a = {},
                _a[ChartAxisDirection.X] = ['xKey'],
                _a[ChartAxisDirection.Y] = ['yKeys'],
                _a);
            _this._xKey = '';
            _this.xName = '';
            _this.cumYKeyCount = [];
            _this.flatYKeys = undefined; // only set when a user used a flat array for yKeys
            _this.hideInLegend = [];
            _this._yKeys = [];
            _this._visibles = [];
            _this._grouped = false;
            /**
             * A map of `yKeys` to their names (used in legends and tooltips).
             * For example, if a key is `product_name` it's name can be a more presentable `Product Name`.
             */
            _this._yNames = {};
            _this.strokeWidth = 1;
            _this.shadow = undefined;
            _this.smallestDataInterval = undefined;
            _this.label.enabled = false;
            return _this;
        }
        BarSeries.prototype.getKeys = function (direction) {
            var _this = this;
            var directionKeys = this.directionKeys;
            var keys = directionKeys && directionKeys[this.flipXY ? flipChartAxisDirection(direction) : direction];
            var values = [];
            if (keys) {
                keys.forEach(function (key) {
                    var value = _this[key];
                    if (value) {
                        if (Array.isArray(value)) {
                            values = values.concat(flat(value));
                        }
                        else {
                            values.push(value);
                        }
                    }
                });
            }
            return values;
        };
        Object.defineProperty(BarSeries.prototype, "xKey", {
            get: function () {
                return this._xKey;
            },
            set: function (value) {
                this._xKey = value;
                this.xData = [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BarSeries.prototype, "yKeys", {
            get: function () {
                return this._yKeys;
            },
            set: function (yKeys) {
                var _this = this;
                var flatYKeys = undefined;
                // Convert from flat y-keys to grouped y-keys.
                if (!is2dArray$1(yKeys)) {
                    flatYKeys = yKeys;
                    yKeys = this.grouped ? flatYKeys.map(function (k) { return [k]; }) : [flatYKeys];
                }
                if (!equal(this._yKeys, yKeys)) {
                    this.flatYKeys = flatYKeys ? flatYKeys : undefined;
                    this._yKeys = yKeys;
                    var prevYKeyCount_1 = 0;
                    this.cumYKeyCount = [];
                    var visibleStacks_1 = [];
                    yKeys.forEach(function (stack, index) {
                        if (stack.length > 0) {
                            visibleStacks_1.push(String(index));
                        }
                        _this.cumYKeyCount.push(prevYKeyCount_1);
                        prevYKeyCount_1 += stack.length;
                    });
                    this.yData = [];
                    this.processSeriesItemEnabled();
                    var groupScale = this.groupScale;
                    groupScale.domain = visibleStacks_1;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BarSeries.prototype, "visibles", {
            get: function () {
                return this._visibles;
            },
            set: function (visibles) {
                var flattenFn = function (r, n) { return r.concat.apply(r, __spread$6((Array.isArray(n) ? n : [n]))); };
                this._visibles = visibles.reduce(flattenFn, []);
                this.processSeriesItemEnabled();
            },
            enumerable: false,
            configurable: true
        });
        BarSeries.prototype.processSeriesItemEnabled = function () {
            var _a = this, seriesItemEnabled = _a.seriesItemEnabled, _b = _a._visibles, visibles = _b === void 0 ? [] : _b;
            seriesItemEnabled.clear();
            var visiblesIdx = 0;
            this._yKeys.forEach(function (stack) {
                stack.forEach(function (yKey) { var _a; return seriesItemEnabled.set(yKey, (_a = visibles === null || visibles === void 0 ? void 0 : visibles[visiblesIdx++]) !== null && _a !== void 0 ? _a : true); });
            });
        };
        Object.defineProperty(BarSeries.prototype, "grouped", {
            get: function () {
                return this._grouped;
            },
            set: function (value) {
                if (this._grouped !== value) {
                    this._grouped = value;
                    if (this.flatYKeys) {
                        this.yKeys = this.flatYKeys;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BarSeries.prototype, "yNames", {
            get: function () {
                return this._yNames;
            },
            set: function (values) {
                if (Array.isArray(values) && this.flatYKeys) {
                    var map_1 = {};
                    this.flatYKeys.forEach(function (k, i) {
                        map_1[k] = values[i];
                    });
                    values = map_1;
                }
                this._yNames = values;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BarSeries.prototype, "normalizedTo", {
            get: function () {
                return this._normalizedTo;
            },
            set: function (value) {
                var absValue = value ? Math.abs(value) : undefined;
                this._normalizedTo = absValue;
            },
            enumerable: false,
            configurable: true
        });
        BarSeries.prototype.processData = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var _a, xKey, yKeys, seriesItemEnabled, data, xAxis, yAxis, setSmallestXInterval, isContinuousX, isContinuousY, keysFound, prevX, yMinMax, _b, yData, normalizedTo, yAbsTotal, _c, yMin, yMax;
                var _this = this;
                return __generator$6(this, function (_d) {
                    _a = this, xKey = _a.xKey, yKeys = _a.yKeys, seriesItemEnabled = _a.seriesItemEnabled;
                    data = xKey && yKeys.length && this.data ? this.data : [];
                    xAxis = this.getCategoryAxis();
                    yAxis = this.getValueAxis();
                    if (!(xAxis && yAxis)) {
                        return [2 /*return*/];
                    }
                    setSmallestXInterval = function (curr, prev) {
                        if (_this.smallestDataInterval === undefined) {
                            _this.smallestDataInterval = { x: Infinity, y: Infinity };
                        }
                        var x = _this.smallestDataInterval.x;
                        var interval = Math.abs(curr - prev);
                        if (interval > 0 && interval < x) {
                            _this.smallestDataInterval.x = interval;
                        }
                    };
                    isContinuousX = xAxis.scale instanceof ContinuousScale;
                    isContinuousY = yAxis.scale instanceof ContinuousScale;
                    keysFound = true;
                    prevX = Infinity;
                    this.xData = data.map(function (datum) {
                        if (keysFound && !(xKey in datum)) {
                            keysFound = false;
                            console.warn("The key '" + xKey + "' was not found in the data: ", datum);
                        }
                        var x = checkDatum(datum[xKey], isContinuousX);
                        if (isContinuousX) {
                            setSmallestXInterval(x, prevX);
                        }
                        prevX = x;
                        return x;
                    });
                    this.yData = data.map(function (datum) {
                        return yKeys.map(function (stack) {
                            return stack.map(function (yKey) {
                                if (keysFound && !(yKey in datum)) {
                                    keysFound = false;
                                    console.warn("The key '" + yKey + "' was not found in the data: ", datum);
                                }
                                var yDatum = checkDatum(datum[yKey], isContinuousY);
                                if (!seriesItemEnabled.get(yKey) || yDatum === undefined) {
                                    return NaN;
                                }
                                return yDatum;
                            });
                        });
                    });
                    yMinMax = this.yData.map(function (group) { return group.map(function (stack) { return findMinMax(stack); }); });
                    _b = this, yData = _b.yData, normalizedTo = _b.normalizedTo;
                    yAbsTotal = this.yData.map(function (group) {
                        return group.map(function (stack) {
                            return stack.reduce(function (acc, stack) {
                                acc += isNaN(stack) ? 0 : Math.abs(stack);
                                return acc;
                            }, 0);
                        });
                    });
                    _c = this.findLargestMinMax(yMinMax), yMin = _c.min, yMax = _c.max;
                    if (yMin === Infinity && yMax === -Infinity) {
                        // There's no data in the domain.
                        this.yDomain = [];
                        return [2 /*return*/];
                    }
                    if (normalizedTo && isFinite(normalizedTo)) {
                        yMin = yMin < 0 ? -normalizedTo : 0;
                        yMax = yMax > 0 ? normalizedTo : 0;
                        yData.forEach(function (group, i) {
                            group.forEach(function (stack, j) {
                                stack.forEach(function (y, k) {
                                    stack[k] = (y / yAbsTotal[i][j]) * normalizedTo;
                                });
                            });
                        });
                    }
                    this.yDomain = this.fixNumericExtent([yMin, yMax], this.yAxis);
                    return [2 /*return*/];
                });
            });
        };
        BarSeries.prototype.findLargestMinMax = function (groups) {
            var e_1, _a, e_2, _b;
            var tallestStackMin = Infinity;
            var tallestStackMax = -Infinity;
            try {
                for (var groups_1 = __values$4(groups), groups_1_1 = groups_1.next(); !groups_1_1.done; groups_1_1 = groups_1.next()) {
                    var group = groups_1_1.value;
                    try {
                        for (var group_1 = (e_2 = void 0, __values$4(group)), group_1_1 = group_1.next(); !group_1_1.done; group_1_1 = group_1.next()) {
                            var stack = group_1_1.value;
                            var _c = stack.min, min = _c === void 0 ? Infinity : _c, _d = stack.max, max = _d === void 0 ? -Infinity : _d;
                            if (min < tallestStackMin) {
                                tallestStackMin = min;
                            }
                            if (max > tallestStackMax) {
                                tallestStackMax = max;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (group_1_1 && !group_1_1.done && (_b = group_1.return)) _b.call(group_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (groups_1_1 && !groups_1_1.done && (_a = groups_1.return)) _a.call(groups_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return { min: tallestStackMin, max: tallestStackMax };
        };
        BarSeries.prototype.getDomain = function (direction) {
            var _a, _b, _c, _d, _e;
            var flipXY = this.flipXY;
            if (this.flipXY) {
                direction = flipChartAxisDirection(direction);
            }
            if (direction === ChartAxisDirection.X) {
                if (!(((_a = this.getCategoryAxis()) === null || _a === void 0 ? void 0 : _a.scale) instanceof ContinuousScale)) {
                    return this.xData;
                }
                // The last node will be clipped if the scale is not a band scale
                // Extend the domain by the smallest data interval so that the last band is not clipped
                var xDomain = extent(this.xData, isContinuous, Number) || [NaN, NaN];
                if (flipXY) {
                    xDomain[0] = xDomain[0] - ((_c = (_b = this.smallestDataInterval) === null || _b === void 0 ? void 0 : _b.x) !== null && _c !== void 0 ? _c : 0);
                }
                else {
                    xDomain[1] = xDomain[1] + ((_e = (_d = this.smallestDataInterval) === null || _d === void 0 ? void 0 : _d.x) !== null && _e !== void 0 ? _e : 0);
                }
                return xDomain;
            }
            else {
                return this.yDomain;
            }
        };
        BarSeries.prototype.getNodeClickEvent = function (event, datum) {
            return new CartesianSeriesNodeClickEvent(this.xKey, datum.yKey, event, datum, this);
        };
        BarSeries.prototype.getCategoryAxis = function () {
            return this.flipXY ? this.yAxis : this.xAxis;
        };
        BarSeries.prototype.getValueAxis = function () {
            return this.flipXY ? this.xAxis : this.yAxis;
        };
        BarSeries.prototype.calculateStep = function (range) {
            var _a;
            var smallestInterval = this.smallestDataInterval;
            var xAxis = this.getCategoryAxis();
            if (!xAxis) {
                return;
            }
            // calculate step
            var domainLength = xAxis.dataDomain[1] - xAxis.dataDomain[0];
            var intervals = domainLength / ((_a = smallestInterval === null || smallestInterval === void 0 ? void 0 : smallestInterval.x) !== null && _a !== void 0 ? _a : 1) + 1;
            // The number of intervals/bands is used to determine the width of individual bands by dividing the available range.
            // Allow a maximum number of bands to ensure the step does not fall below 1 pixel.
            // This means there could be some overlap of the bands in the chart.
            var maxBands = Math.floor(range); // A minimum of 1px per bar/column means the maximum number of bands will equal the available range
            var bands = Math.min(intervals, maxBands);
            var step = range / Math.max(1, bands);
            return step;
        };
        BarSeries.prototype.createNodeData = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var _a, data, visible, xAxis, yAxis, xScale, yScale, _b, groupScale, yKeys, cumYKeyCount, fills, strokes, strokeWidth, seriesItemEnabled, xData, yData, label, flipXY, seriesId, labelFontStyle, labelFontWeight, labelFontSize, labelFontFamily, labelColor, labelFormatter, labelPlacement, xBandWidth, availableRange, step, barWidth, contexts;
                var _this = this;
                return __generator$6(this, function (_c) {
                    _a = this, data = _a.data, visible = _a.visible;
                    xAxis = this.getCategoryAxis();
                    yAxis = this.getValueAxis();
                    if (!(data && visible && xAxis && yAxis)) {
                        return [2 /*return*/, []];
                    }
                    xScale = xAxis.scale;
                    yScale = yAxis.scale;
                    _b = this, groupScale = _b.groupScale, yKeys = _b.yKeys, cumYKeyCount = _b.cumYKeyCount, fills = _b.fills, strokes = _b.strokes, strokeWidth = _b.strokeWidth, seriesItemEnabled = _b.seriesItemEnabled, xData = _b.xData, yData = _b.yData, label = _b.label, flipXY = _b.flipXY, seriesId = _b.id;
                    labelFontStyle = label.fontStyle, labelFontWeight = label.fontWeight, labelFontSize = label.fontSize, labelFontFamily = label.fontFamily, labelColor = label.color, labelFormatter = label.formatter, labelPlacement = label.placement;
                    xBandWidth = xScale.bandwidth;
                    if (xScale instanceof ContinuousScale) {
                        availableRange = Math.max(xAxis.range[0], xAxis.range[1]);
                        step = this.calculateStep(availableRange);
                        xBandWidth = step;
                    }
                    groupScale.range = [0, xBandWidth];
                    if (xAxis instanceof CategoryAxis) {
                        groupScale.padding = xAxis.groupPaddingInner;
                    }
                    else if (xAxis instanceof GroupedCategoryAxis) {
                        groupScale.padding = 0.1;
                    }
                    else {
                        // Number or Time axis
                        groupScale.padding = 0;
                    }
                    // To get exactly `0` padding we need to turn off rounding
                    if (groupScale.padding === 0) {
                        groupScale.round = false;
                    }
                    else {
                        groupScale.round = true;
                    }
                    barWidth = groupScale.bandwidth >= 1
                        ? // Pixel-rounded value for low-volume bar charts.
                            groupScale.bandwidth
                        : // Handle high-volume bar charts gracefully.
                            groupScale.rawBandwidth;
                    contexts = [];
                    xData.forEach(function (group, groupIndex) {
                        var _a, _b;
                        var seriesDatum = data[groupIndex];
                        var x = xScale.convert(group);
                        var groupYs = yData[groupIndex]; // y-data for groups of stacks
                        for (var stackIndex = 0; stackIndex < groupYs.length; stackIndex++) {
                            var stackYs = groupYs[stackIndex]; // y-data for a stack within a group
                            contexts[stackIndex] = (_a = contexts[stackIndex]) !== null && _a !== void 0 ? _a : [];
                            var prevMinY = 0;
                            var prevMaxY = 0;
                            for (var levelIndex = 0; levelIndex < stackYs.length; levelIndex++) {
                                var currY = +stackYs[levelIndex];
                                var yKey = yKeys[stackIndex][levelIndex];
                                var barX = x + groupScale.convert(String(stackIndex));
                                contexts[stackIndex][levelIndex] = (_b = contexts[stackIndex][levelIndex]) !== null && _b !== void 0 ? _b : {
                                    itemId: yKey,
                                    nodeData: [],
                                    labelData: [],
                                };
                                // Bars outside of visible range are not rendered, so we create node data
                                // only for the visible subset of user data.
                                if (!xAxis.inRange(barX, barWidth)) {
                                    continue;
                                }
                                if (isNaN(currY)) {
                                    continue;
                                }
                                var prevY = currY < 0 ? prevMinY : prevMaxY;
                                var y = yScale.convert(prevY + currY, { strict: false });
                                var bottomY = yScale.convert(prevY, { strict: false });
                                var yValue = seriesDatum[yKey]; // unprocessed y-value
                                var labelText = void 0;
                                if (labelFormatter) {
                                    labelText = labelFormatter({
                                        value: isNumber(yValue) ? yValue : undefined,
                                        seriesId: seriesId,
                                    });
                                }
                                else {
                                    labelText = isNumber(yValue) ? yValue.toFixed(2) : '';
                                }
                                var labelX = void 0;
                                var labelY = void 0;
                                if (flipXY) {
                                    labelY = barX + barWidth / 2;
                                    if (labelPlacement === 'inside') {
                                        labelX = y + ((yValue >= 0 ? -1 : 1) * Math.abs(bottomY - y)) / 2;
                                    }
                                    else {
                                        labelX = y + (yValue >= 0 ? 1 : -1) * 4;
                                    }
                                }
                                else {
                                    labelX = barX + barWidth / 2;
                                    if (labelPlacement === 'inside') {
                                        labelY = y + ((yValue >= 0 ? 1 : -1) * Math.abs(bottomY - y)) / 2;
                                    }
                                    else {
                                        labelY = y + (yValue >= 0 ? -3 : 4);
                                    }
                                }
                                var labelTextAlign = void 0;
                                var labelTextBaseline = void 0;
                                if (labelPlacement === 'inside') {
                                    labelTextAlign = 'center';
                                    labelTextBaseline = 'middle';
                                }
                                else {
                                    labelTextAlign = flipXY ? (yValue >= 0 ? 'start' : 'end') : 'center';
                                    labelTextBaseline = flipXY ? 'middle' : yValue >= 0 ? 'bottom' : 'top';
                                }
                                var colorIndex = cumYKeyCount[stackIndex] + levelIndex;
                                var nodeData = {
                                    index: groupIndex,
                                    series: _this,
                                    itemId: yKey,
                                    datum: seriesDatum,
                                    yValue: yValue,
                                    yKey: yKey,
                                    x: flipXY ? Math.min(y, bottomY) : barX,
                                    y: flipXY ? barX : Math.min(y, bottomY),
                                    width: flipXY ? Math.abs(bottomY - y) : barWidth,
                                    height: flipXY ? barWidth : Math.abs(bottomY - y),
                                    colorIndex: colorIndex,
                                    fill: fills[colorIndex % fills.length],
                                    stroke: strokes[colorIndex % strokes.length],
                                    strokeWidth: strokeWidth,
                                    label: seriesItemEnabled.get(yKey) && labelText
                                        ? {
                                            text: labelText,
                                            fontStyle: labelFontStyle,
                                            fontWeight: labelFontWeight,
                                            fontSize: labelFontSize,
                                            fontFamily: labelFontFamily,
                                            textAlign: labelTextAlign,
                                            textBaseline: labelTextBaseline,
                                            fill: labelColor,
                                            x: labelX,
                                            y: labelY,
                                        }
                                        : undefined,
                                };
                                contexts[stackIndex][levelIndex].nodeData.push(nodeData);
                                contexts[stackIndex][levelIndex].labelData.push(nodeData);
                                if (currY < 0) {
                                    prevMinY += currY;
                                }
                                else {
                                    prevMaxY += currY;
                                }
                            }
                        }
                    });
                    return [2 /*return*/, contexts.reduce(function (r, n) { return r.concat.apply(r, __spread$6(n)); }, [])];
                });
            });
        };
        BarSeries.prototype.updateDatumSelection = function (opts) {
            return __awaiter$6(this, void 0, void 0, function () {
                var nodeData, datumSelection, updateRects, enterRects;
                return __generator$6(this, function (_a) {
                    nodeData = opts.nodeData, datumSelection = opts.datumSelection;
                    updateRects = datumSelection.setData(nodeData);
                    updateRects.exit.remove();
                    enterRects = updateRects.enter.append(Rect).each(function (rect) {
                        rect.tag = BarSeriesNodeTag.Bar;
                    });
                    return [2 /*return*/, updateRects.merge(enterRects)];
                });
            });
        };
        BarSeries.prototype.updateDatumNodes = function (opts) {
            var _a, _b;
            return __awaiter$6(this, void 0, void 0, function () {
                var datumSelection, isDatumHighlighted, _c, fills, strokes, seriesFillOpacity, strokeOpacity, shadow, formatter, xKey, flipXY, _d, highlightedFill, _e, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, seriesId, _f, visibleMin, visibleMax, isZoomed, crisp;
                var _this = this;
                return __generator$6(this, function (_g) {
                    datumSelection = opts.datumSelection, isDatumHighlighted = opts.isHighlight;
                    _c = this, fills = _c.fills, strokes = _c.strokes, seriesFillOpacity = _c.fillOpacity, strokeOpacity = _c.strokeOpacity, shadow = _c.shadow, formatter = _c.formatter, xKey = _c.xKey, flipXY = _c.flipXY, _d = _c.highlightStyle.item, highlightedFill = _d.fill, _e = _d.fillOpacity, highlightFillOpacity = _e === void 0 ? seriesFillOpacity : _e, highlightedStroke = _d.stroke, highlightedDatumStrokeWidth = _d.strokeWidth, seriesId = _c.id;
                    _f = __read$a((_b = (_a = this.xAxis) === null || _a === void 0 ? void 0 : _a.visibleRange) !== null && _b !== void 0 ? _b : [], 2), visibleMin = _f[0], visibleMax = _f[1];
                    isZoomed = visibleMin !== 0 || visibleMax !== 1;
                    crisp = !isZoomed;
                    datumSelection.each(function (rect, datum) {
                        var colorIndex = datum.colorIndex;
                        var fill = isDatumHighlighted && highlightedFill !== undefined
                            ? highlightedFill
                            : fills[colorIndex % fills.length];
                        var stroke = isDatumHighlighted && highlightedStroke !== undefined
                            ? highlightedStroke
                            : strokes[colorIndex % fills.length];
                        var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined
                            ? highlightedDatumStrokeWidth
                            : _this.getStrokeWidth(_this.strokeWidth, datum);
                        var fillOpacity = isDatumHighlighted ? highlightFillOpacity : seriesFillOpacity;
                        var format = undefined;
                        if (formatter) {
                            format = formatter({
                                datum: datum.datum,
                                fill: fill,
                                stroke: stroke,
                                strokeWidth: strokeWidth,
                                highlighted: isDatumHighlighted,
                                xKey: xKey,
                                yKey: datum.yKey,
                                seriesId: seriesId,
                            });
                        }
                        rect.crisp = crisp;
                        rect.x = datum.x;
                        rect.y = datum.y;
                        rect.width = datum.width;
                        rect.height = datum.height;
                        rect.fill = (format && format.fill) || fill;
                        rect.stroke = (format && format.stroke) || stroke;
                        rect.strokeWidth = format && format.strokeWidth !== undefined ? format.strokeWidth : strokeWidth;
                        rect.fillOpacity = fillOpacity;
                        rect.strokeOpacity = strokeOpacity;
                        rect.lineDash = _this.lineDash;
                        rect.lineDashOffset = _this.lineDashOffset;
                        rect.fillShadow = shadow;
                        // Prevent stroke from rendering for zero height columns and zero width bars.
                        rect.visible = flipXY ? datum.width > 0 : datum.height > 0;
                    });
                    return [2 /*return*/];
                });
            });
        };
        BarSeries.prototype.updateLabelSelection = function (opts) {
            return __awaiter$6(this, void 0, void 0, function () {
                var labelData, labelSelection, enabled, data, updateLabels, enterLabels;
                return __generator$6(this, function (_a) {
                    labelData = opts.labelData, labelSelection = opts.labelSelection;
                    enabled = this.label.enabled;
                    data = enabled ? labelData : [];
                    updateLabels = labelSelection.setData(data);
                    updateLabels.exit.remove();
                    enterLabels = updateLabels.enter.append(Text).each(function (text) {
                        text.tag = BarSeriesNodeTag.Label;
                        text.pointerEvents = PointerEvents.None;
                    });
                    return [2 /*return*/, updateLabels.merge(enterLabels)];
                });
            });
        };
        BarSeries.prototype.updateLabelNodes = function (opts) {
            return __awaiter$6(this, void 0, void 0, function () {
                var labelSelection, _a, labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color;
                return __generator$6(this, function (_b) {
                    labelSelection = opts.labelSelection;
                    _a = this.label, labelEnabled = _a.enabled, fontStyle = _a.fontStyle, fontWeight = _a.fontWeight, fontSize = _a.fontSize, fontFamily = _a.fontFamily, color = _a.color;
                    labelSelection.each(function (text, datum) {
                        var label = datum.label;
                        if (label && labelEnabled) {
                            text.fontStyle = fontStyle;
                            text.fontWeight = fontWeight;
                            text.fontSize = fontSize;
                            text.fontFamily = fontFamily;
                            text.textAlign = label.textAlign;
                            text.textBaseline = label.textBaseline;
                            text.text = label.text;
                            text.x = label.x;
                            text.y = label.y;
                            text.fill = color;
                            text.visible = true;
                        }
                        else {
                            text.visible = false;
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        BarSeries.prototype.getTooltipHtml = function (nodeDatum) {
            var _a = this, xKey = _a.xKey, yKeys = _a.yKeys, yData = _a.yData;
            var xAxis = this.getCategoryAxis();
            var yAxis = this.getValueAxis();
            var yKey = nodeDatum.yKey;
            if (!yData.length || !xKey || !yKey || !xAxis || !yAxis) {
                return '';
            }
            var fillIndex = 0;
            var i = 0;
            var j = 0;
            for (; j < yKeys.length; j++) {
                var stack = yKeys[j];
                i = stack.indexOf(yKey);
                if (i >= 0) {
                    fillIndex += i;
                    break;
                }
                fillIndex += stack.length;
            }
            var _b = this, xName = _b.xName, yNames = _b.yNames, fills = _b.fills, strokes = _b.strokes, tooltip = _b.tooltip, formatter = _b.formatter, seriesId = _b.id;
            var tooltipRenderer = tooltip.renderer;
            var datum = nodeDatum.datum;
            var yName = yNames[yKey];
            var fill = fills[fillIndex % fills.length];
            var stroke = strokes[fillIndex % fills.length];
            var strokeWidth = this.getStrokeWidth(this.strokeWidth);
            var xValue = datum[xKey];
            var yValue = datum[yKey];
            var xString = sanitizeHtml(xAxis.formatDatum(xValue));
            var yString = sanitizeHtml(yAxis.formatDatum(yValue));
            var title = sanitizeHtml(yName);
            var content = xString + ': ' + yString;
            var format = undefined;
            if (formatter) {
                format = formatter({
                    datum: datum,
                    fill: fill,
                    stroke: stroke,
                    strokeWidth: strokeWidth,
                    highlighted: false,
                    xKey: xKey,
                    yKey: yKey,
                    seriesId: seriesId,
                });
            }
            var color = (format && format.fill) || fill;
            var defaults = {
                title: title,
                backgroundColor: color,
                content: content,
            };
            if (tooltipRenderer) {
                return toTooltipHtml(tooltipRenderer({
                    datum: datum,
                    xKey: xKey,
                    xValue: xValue,
                    xName: xName,
                    yKey: yKey,
                    yValue: yValue,
                    yName: yName,
                    color: color,
                    title: title,
                    seriesId: seriesId,
                }), defaults);
            }
            return toTooltipHtml(defaults);
        };
        BarSeries.prototype.getLegendData = function () {
            var _a = this, id = _a.id, data = _a.data, xKey = _a.xKey, yKeys = _a.yKeys, yNames = _a.yNames, cumYKeyCount = _a.cumYKeyCount, seriesItemEnabled = _a.seriesItemEnabled, hideInLegend = _a.hideInLegend, fills = _a.fills, strokes = _a.strokes, fillOpacity = _a.fillOpacity, strokeOpacity = _a.strokeOpacity, flipXY = _a.flipXY;
            if (!data || !data.length || !xKey || !yKeys.length) {
                return [];
            }
            var legendData = [];
            this.yKeys.forEach(function (stack, stackIndex) {
                // Column stacks should be listed in the legend in reverse order, for symmetry with the
                // vertical stack display order. Bar stacks are already consistent left-to-right with
                // the legend.
                var startLevel = flipXY ? 0 : stack.length - 1;
                var direction = flipXY ? 1 : -1;
                for (var levelIndex = startLevel, step = 0; step < stack.length; levelIndex += direction, step++) {
                    var yKey = stack[levelIndex];
                    if (hideInLegend.indexOf(yKey) >= 0) {
                        return;
                    }
                    var colorIndex = cumYKeyCount[stackIndex] + levelIndex;
                    legendData.push({
                        id: id,
                        itemId: yKey,
                        seriesId: id,
                        enabled: seriesItemEnabled.get(yKey) || false,
                        label: {
                            text: yNames[yKey] || yKey,
                        },
                        marker: {
                            fill: fills[colorIndex % fills.length],
                            stroke: strokes[colorIndex % strokes.length],
                            fillOpacity: fillOpacity,
                            strokeOpacity: strokeOpacity,
                        },
                    });
                }
            });
            return legendData;
        };
        BarSeries.prototype.toggleSeriesItem = function (itemId, enabled) {
            _super.prototype.toggleSeriesItem.call(this, itemId, enabled);
            var yKeys = this.yKeys.map(function (stack) { return stack.slice(); }); // deep clone
            this.seriesItemEnabled.forEach(function (enabled, yKey) {
                if (!enabled) {
                    yKeys.forEach(function (stack) {
                        var index = stack.indexOf(yKey);
                        if (index >= 0) {
                            stack.splice(index, 1);
                        }
                    });
                }
            });
            var visibleStacks = [];
            yKeys.forEach(function (stack, index) {
                if (stack.length > 0) {
                    visibleStacks.push(String(index));
                }
            });
            this.groupScale.domain = visibleStacks;
            this.nodeDataRefresh = true;
        };
        BarSeries.prototype.isLabelEnabled = function () {
            return this.label.enabled;
        };
        BarSeries.className = 'BarSeries';
        BarSeries.type = 'bar';
        __decorate$b([
            Validate(BOOLEAN)
        ], BarSeries.prototype, "flipXY", void 0);
        __decorate$b([
            Validate(COLOR_STRING_ARRAY)
        ], BarSeries.prototype, "fills", void 0);
        __decorate$b([
            Validate(COLOR_STRING_ARRAY)
        ], BarSeries.prototype, "strokes", void 0);
        __decorate$b([
            Validate(NUMBER(0, 1))
        ], BarSeries.prototype, "fillOpacity", void 0);
        __decorate$b([
            Validate(NUMBER(0, 1))
        ], BarSeries.prototype, "strokeOpacity", void 0);
        __decorate$b([
            Validate(OPT_LINE_DASH)
        ], BarSeries.prototype, "lineDash", void 0);
        __decorate$b([
            Validate(NUMBER(0))
        ], BarSeries.prototype, "lineDashOffset", void 0);
        __decorate$b([
            Validate(OPT_FUNCTION)
        ], BarSeries.prototype, "formatter", void 0);
        __decorate$b([
            Validate(STRING)
        ], BarSeries.prototype, "_xKey", void 0);
        __decorate$b([
            Validate(STRING)
        ], BarSeries.prototype, "xName", void 0);
        __decorate$b([
            Validate(STRING_ARRAY)
        ], BarSeries.prototype, "hideInLegend", void 0);
        __decorate$b([
            Validate(BOOLEAN_ARRAY)
        ], BarSeries.prototype, "_visibles", void 0);
        __decorate$b([
            Validate(BOOLEAN)
        ], BarSeries.prototype, "_grouped", void 0);
        __decorate$b([
            Validate(OPT_NUMBER())
        ], BarSeries.prototype, "_normalizedTo", void 0);
        __decorate$b([
            Validate(NUMBER(0))
        ], BarSeries.prototype, "strokeWidth", void 0);
        return BarSeries;
    }(CartesianSeries));

    var __extends$k = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$a = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$5 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$5 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$9 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$5 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$9(arguments[i]));
        return ar;
    };
    var HISTOGRAM_AGGREGATIONS = ['count', 'sum', 'mean'];
    var HISTOGRAM_AGGREGATION = predicateWithMessage(function (v) { return HISTOGRAM_AGGREGATIONS.includes(v); }, "expecting a histogram aggregation keyword such as 'count', 'sum' or 'mean");
    var HistogramSeriesNodeTag;
    (function (HistogramSeriesNodeTag) {
        HistogramSeriesNodeTag[HistogramSeriesNodeTag["Bin"] = 0] = "Bin";
        HistogramSeriesNodeTag[HistogramSeriesNodeTag["Label"] = 1] = "Label";
    })(HistogramSeriesNodeTag || (HistogramSeriesNodeTag = {}));
    var HistogramSeriesLabel = /** @class */ (function (_super) {
        __extends$k(HistogramSeriesLabel, _super);
        function HistogramSeriesLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.formatter = undefined;
            return _this;
        }
        __decorate$a([
            Validate(OPT_FUNCTION)
        ], HistogramSeriesLabel.prototype, "formatter", void 0);
        return HistogramSeriesLabel;
    }(Label));
    var defaultBinCount = 10;
    var aggregationFunctions = {
        count: function (bin) { return bin.data.length; },
        sum: function (bin, yKey) { return bin.data.reduce(function (acc, datum) { return acc + datum[yKey]; }, 0); },
        mean: function (bin, yKey) { return aggregationFunctions.sum(bin, yKey) / aggregationFunctions.count(bin, yKey); },
    };
    var HistogramBin = /** @class */ (function () {
        function HistogramBin(_a) {
            var _b = __read$9(_a, 2), domainMin = _b[0], domainMax = _b[1];
            this.data = [];
            this.aggregatedValue = 0;
            this.frequency = 0;
            this.domain = [domainMin, domainMax];
        }
        HistogramBin.prototype.addDatum = function (datum) {
            this.data.push(datum);
            this.frequency++;
        };
        Object.defineProperty(HistogramBin.prototype, "domainWidth", {
            get: function () {
                var _a = __read$9(this.domain, 2), domainMin = _a[0], domainMax = _a[1];
                return domainMax - domainMin;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HistogramBin.prototype, "relativeHeight", {
            get: function () {
                return this.aggregatedValue / this.domainWidth;
            },
            enumerable: false,
            configurable: true
        });
        HistogramBin.prototype.calculateAggregatedValue = function (aggregationName, yKey) {
            if (!yKey) {
                // not having a yKey forces us into a frequency plot
                aggregationName = 'count';
            }
            var aggregationFunction = aggregationFunctions[aggregationName];
            this.aggregatedValue = aggregationFunction(this, yKey);
        };
        HistogramBin.prototype.getY = function (areaPlot) {
            return areaPlot ? this.relativeHeight : this.aggregatedValue;
        };
        return HistogramBin;
    }());
    var HistogramSeriesTooltip = /** @class */ (function (_super) {
        __extends$k(HistogramSeriesTooltip, _super);
        function HistogramSeriesTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderer = undefined;
            return _this;
        }
        __decorate$a([
            Validate(OPT_FUNCTION)
        ], HistogramSeriesTooltip.prototype, "renderer", void 0);
        return HistogramSeriesTooltip;
    }(SeriesTooltip));
    var HistogramSeries = /** @class */ (function (_super) {
        __extends$k(HistogramSeries, _super);
        function HistogramSeries() {
            var _a;
            var _this = _super.call(this, { pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH] }) || this;
            _this.binnedData = [];
            _this.xDomain = [];
            _this.yDomain = [];
            _this.label = new HistogramSeriesLabel();
            _this.tooltip = new HistogramSeriesTooltip();
            _this.fill = undefined;
            _this.stroke = undefined;
            _this.fillOpacity = 1;
            _this.strokeOpacity = 1;
            _this.lineDash = [0];
            _this.lineDashOffset = 0;
            _this.directionKeys = (_a = {},
                _a[ChartAxisDirection.X] = ['xKey'],
                _a[ChartAxisDirection.Y] = ['yKey'],
                _a);
            _this.xKey = '';
            _this.areaPlot = false;
            _this.bins = undefined;
            _this.aggregation = 'count';
            _this.binCount = undefined;
            _this.xName = '';
            _this.yKey = '';
            _this.yName = '';
            _this.strokeWidth = 1;
            _this.shadow = undefined;
            _this.label.enabled = false;
            return _this;
        }
        HistogramSeries.prototype.getKeys = function (direction) {
            var _this = this;
            var directionKeys = this.directionKeys;
            var keys = directionKeys && directionKeys[direction];
            var values = [];
            if (keys) {
                keys.forEach(function (key) {
                    var value = _this[key];
                    if (value) {
                        if (Array.isArray(value)) {
                            values.push.apply(values, __spread$5(value));
                        }
                        else {
                            values.push(value);
                        }
                    }
                });
            }
            return values;
        };
        // During processData phase, used to unify different ways of the user specifying
        // the bins. Returns bins in format[[min1, max1], [min2, max2], ... ].
        HistogramSeries.prototype.deriveBins = function () {
            var _this = this;
            var bins = this.bins;
            if (!this.data) {
                return [];
            }
            var xData = this.data.map(function (datum) { return datum[_this.xKey]; });
            var xDomain = this.fixNumericExtent(extent(xData, isContinuous));
            if (this.binCount === undefined) {
                if (bins) {
                    return bins;
                }
                var binStarts = generateTicks(xDomain[0], xDomain[1], defaultBinCount);
                var binSize_1 = tickStep(xDomain[0], xDomain[1], defaultBinCount);
                var firstBinEnd = binStarts[0];
                var expandStartToBin = function (n) { return [n, n + binSize_1]; };
                return __spread$5([[firstBinEnd - binSize_1, firstBinEnd]], binStarts.map(expandStartToBin));
            }
            else {
                return this.calculateNiceBins(xDomain, this.binCount);
            }
        };
        HistogramSeries.prototype.calculateNiceBins = function (domain, binCount) {
            var _a;
            var start = Math.floor(domain[0]);
            var stop = domain[1];
            var binSize;
            var segments = binCount || 1;
            (_a = this.calculateNiceStart(start, stop, segments), start = _a.start, binSize = _a.binSize);
            return this.getBins(start, stop, binSize, segments);
        };
        HistogramSeries.prototype.getBins = function (start, stop, step, count) {
            var bins = [];
            for (var i = 0; i < count; i++) {
                var a = Math.round((start + i * step) * 10) / 10;
                var b = Math.round((start + (i + 1) * step) * 10) / 10;
                if (i === count - 1) {
                    b = Math.max(b, stop);
                }
                bins[i] = [a, b];
            }
            return bins;
        };
        HistogramSeries.prototype.calculateNiceStart = function (a, b, segments) {
            var binSize = Math.abs(b - a) / segments;
            var order = Math.floor(Math.log10(binSize));
            var magnitude = Math.pow(10, order);
            var start = Math.floor(a / magnitude) * magnitude;
            return {
                start: start,
                binSize: binSize,
            };
        };
        HistogramSeries.prototype.placeDataInBins = function (data) {
            var _this = this;
            var xKey = this.xKey;
            var derivedBins = this.deriveBins();
            this.bins = derivedBins;
            // creating a sorted copy allows binning in O(n) rather than O(n²)
            // but at the expense of more temporary memory
            var sortedData = data.slice().sort(function (a, b) {
                if (a[xKey] < b[xKey]) {
                    return -1;
                }
                if (a[xKey] > b[xKey]) {
                    return 1;
                }
                return 0;
            });
            var bins = [new HistogramBin(derivedBins[0])];
            var currentBin = 0;
            for (var i = 0; i < sortedData.length && currentBin < derivedBins.length; i++) {
                var datum = sortedData[i];
                while (datum[xKey] > derivedBins[currentBin][1] && currentBin < derivedBins.length) {
                    currentBin++;
                    bins.push(new HistogramBin(derivedBins[currentBin]));
                }
                if (currentBin < derivedBins.length) {
                    bins[currentBin].addDatum(datum);
                }
            }
            bins.forEach(function (b) { return b.calculateAggregatedValue(_this.aggregation, _this.yKey); });
            return bins;
        };
        Object.defineProperty(HistogramSeries.prototype, "xMax", {
            get: function () {
                var _this = this;
                return (this.data &&
                    this.data.reduce(function (acc, datum) {
                        return Math.max(acc, datum[_this.xKey]);
                    }, Number.NEGATIVE_INFINITY));
            },
            enumerable: false,
            configurable: true
        });
        HistogramSeries.prototype.processData = function () {
            return __awaiter$5(this, void 0, void 0, function () {
                var _a, xKey, data, yData, yMinMax, firstBin, lastBin, xMin, xMax;
                var _this = this;
                return __generator$5(this, function (_b) {
                    _a = this, xKey = _a.xKey, data = _a.data;
                    this.binnedData = this.placeDataInBins(xKey && data ? data : []);
                    yData = this.binnedData.map(function (b) { return b.getY(_this.areaPlot); });
                    yMinMax = extent(yData, isContinuous);
                    this.yDomain = this.fixNumericExtent([0, yMinMax ? yMinMax[1] : 1]);
                    firstBin = this.binnedData[0];
                    lastBin = this.binnedData[this.binnedData.length - 1];
                    xMin = firstBin.domain[0];
                    xMax = lastBin.domain[1];
                    this.xDomain = [xMin, xMax];
                    return [2 /*return*/];
                });
            });
        };
        HistogramSeries.prototype.getDomain = function (direction) {
            if (direction === ChartAxisDirection.X) {
                return this.xDomain;
            }
            else {
                return this.yDomain;
            }
        };
        HistogramSeries.prototype.getNodeClickEvent = function (event, datum) {
            return new CartesianSeriesNodeClickEvent(this.xKey, this.yKey, event, datum, this);
        };
        HistogramSeries.prototype.createNodeData = function () {
            return __awaiter$5(this, void 0, void 0, function () {
                var _a, xAxis, yAxis, xScale, yScale, _b, fill, stroke, strokeWidth, seriesId, nodeData, defaultLabelFormatter, _c, _d, labelFormatter, labelFontStyle, labelFontWeight, labelFontSize, labelFontFamily, labelColor;
                var _this = this;
                return __generator$5(this, function (_e) {
                    _a = this, xAxis = _a.xAxis, yAxis = _a.yAxis;
                    if (!this.seriesItemEnabled || !xAxis || !yAxis) {
                        return [2 /*return*/, []];
                    }
                    xScale = xAxis.scale;
                    yScale = yAxis.scale;
                    _b = this, fill = _b.fill, stroke = _b.stroke, strokeWidth = _b.strokeWidth, seriesId = _b.id;
                    nodeData = [];
                    defaultLabelFormatter = function (params) { return String(params.value); };
                    _c = this.label, _d = _c.formatter, labelFormatter = _d === void 0 ? defaultLabelFormatter : _d, labelFontStyle = _c.fontStyle, labelFontWeight = _c.fontWeight, labelFontSize = _c.fontSize, labelFontFamily = _c.fontFamily, labelColor = _c.color;
                    this.binnedData.forEach(function (binOfData) {
                        var total = binOfData.aggregatedValue, frequency = binOfData.frequency, _a = __read$9(binOfData.domain, 2), xDomainMin = _a[0], xDomainMax = _a[1], relativeHeight = binOfData.relativeHeight;
                        var xMinPx = xScale.convert(xDomainMin), xMaxPx = xScale.convert(xDomainMax), 
                        // note: assuming can't be negative:
                        y = _this.areaPlot ? relativeHeight : _this.yKey ? total : frequency, yZeroPx = yScale.convert(0), yMaxPx = yScale.convert(y), w = xMaxPx - xMinPx, h = Math.abs(yMaxPx - yZeroPx);
                        var selectionDatumLabel = y !== 0
                            ? {
                                text: labelFormatter({ value: binOfData.aggregatedValue, seriesId: seriesId }),
                                fontStyle: labelFontStyle,
                                fontWeight: labelFontWeight,
                                fontSize: labelFontSize,
                                fontFamily: labelFontFamily,
                                fill: labelColor,
                                x: xMinPx + w / 2,
                                y: yMaxPx + h / 2,
                            }
                            : undefined;
                        nodeData.push({
                            series: _this,
                            datum: binOfData,
                            // since each selection is an aggregation of multiple data.
                            x: xMinPx,
                            y: yMaxPx,
                            width: w,
                            height: h,
                            fill: fill,
                            stroke: stroke,
                            strokeWidth: strokeWidth,
                            label: selectionDatumLabel,
                        });
                    });
                    return [2 /*return*/, [{ itemId: this.yKey, nodeData: nodeData, labelData: nodeData }]];
                });
            });
        };
        HistogramSeries.prototype.updateDatumSelection = function (opts) {
            return __awaiter$5(this, void 0, void 0, function () {
                var nodeData, datumSelection, updateRects, enterRects;
                return __generator$5(this, function (_a) {
                    nodeData = opts.nodeData, datumSelection = opts.datumSelection;
                    updateRects = datumSelection.setData(nodeData);
                    updateRects.exit.remove();
                    enterRects = updateRects.enter.append(Rect).each(function (rect) {
                        rect.tag = HistogramSeriesNodeTag.Bin;
                        rect.crisp = true;
                    });
                    return [2 /*return*/, updateRects.merge(enterRects)];
                });
            });
        };
        HistogramSeries.prototype.updateDatumNodes = function (opts) {
            return __awaiter$5(this, void 0, void 0, function () {
                var datumSelection, isDatumHighlighted, _a, seriesFillOpacity, strokeOpacity, shadow, _b, highlightedFill, _c, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth;
                var _this = this;
                return __generator$5(this, function (_d) {
                    datumSelection = opts.datumSelection, isDatumHighlighted = opts.isHighlight;
                    _a = this, seriesFillOpacity = _a.fillOpacity, strokeOpacity = _a.strokeOpacity, shadow = _a.shadow, _b = _a.highlightStyle.item, highlightedFill = _b.fill, _c = _b.fillOpacity, highlightFillOpacity = _c === void 0 ? seriesFillOpacity : _c, highlightedStroke = _b.stroke, highlightedDatumStrokeWidth = _b.strokeWidth;
                    datumSelection.each(function (rect, datum, index) {
                        var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined
                            ? highlightedDatumStrokeWidth
                            : datum.strokeWidth;
                        var fillOpacity = isDatumHighlighted ? highlightFillOpacity : seriesFillOpacity;
                        rect.x = datum.x;
                        rect.y = datum.y;
                        rect.width = datum.width;
                        rect.height = datum.height;
                        rect.fill = isDatumHighlighted && highlightedFill !== undefined ? highlightedFill : datum.fill;
                        rect.stroke = isDatumHighlighted && highlightedStroke !== undefined ? highlightedStroke : datum.stroke;
                        rect.fillOpacity = fillOpacity;
                        rect.strokeOpacity = strokeOpacity;
                        rect.strokeWidth = strokeWidth;
                        rect.lineDash = _this.lineDash;
                        rect.lineDashOffset = _this.lineDashOffset;
                        rect.fillShadow = shadow;
                        rect.zIndex = isDatumHighlighted ? Series.highlightedZIndex : index;
                        rect.visible = datum.height > 0; // prevent stroke from rendering for zero height columns
                    });
                    return [2 /*return*/];
                });
            });
        };
        HistogramSeries.prototype.updateLabelSelection = function (opts) {
            return __awaiter$5(this, void 0, void 0, function () {
                var labelData, labelSelection, updateTexts, enterTexts;
                return __generator$5(this, function (_a) {
                    labelData = opts.labelData, labelSelection = opts.labelSelection;
                    updateTexts = labelSelection.setData(labelData);
                    updateTexts.exit.remove();
                    enterTexts = updateTexts.enter.append(Text).each(function (text) {
                        text.tag = HistogramSeriesNodeTag.Label;
                        text.pointerEvents = PointerEvents.None;
                        text.textAlign = 'center';
                        text.textBaseline = 'middle';
                    });
                    return [2 /*return*/, updateTexts.merge(enterTexts)];
                });
            });
        };
        HistogramSeries.prototype.updateLabelNodes = function (opts) {
            return __awaiter$5(this, void 0, void 0, function () {
                var labelSelection, labelEnabled;
                return __generator$5(this, function (_a) {
                    labelSelection = opts.labelSelection;
                    labelEnabled = this.label.enabled;
                    labelSelection.each(function (text, datum) {
                        var label = datum.label;
                        if (label && labelEnabled) {
                            text.text = label.text;
                            text.x = label.x;
                            text.y = label.y;
                            text.fontStyle = label.fontStyle;
                            text.fontWeight = label.fontWeight;
                            text.fontSize = label.fontSize;
                            text.fontFamily = label.fontFamily;
                            text.fill = label.fill;
                            text.visible = true;
                        }
                        else {
                            text.visible = false;
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        HistogramSeries.prototype.getTooltipHtml = function (nodeDatum) {
            var _a = this, xKey = _a.xKey, yKey = _a.yKey, xAxis = _a.xAxis, yAxis = _a.yAxis;
            if (!xKey || !xAxis || !yAxis) {
                return '';
            }
            var _b = this, xName = _b.xName, yName = _b.yName, color = _b.fill, tooltip = _b.tooltip, aggregation = _b.aggregation, seriesId = _b.id;
            var tooltipRenderer = tooltip.renderer;
            var bin = nodeDatum.datum;
            var aggregatedValue = bin.aggregatedValue, frequency = bin.frequency, _c = __read$9(bin.domain, 2), rangeMin = _c[0], rangeMax = _c[1];
            var title = sanitizeHtml(xName || xKey) + ": " + xAxis.formatDatum(rangeMin) + " - " + xAxis.formatDatum(rangeMax);
            var content = yKey
                ? "<b>" + sanitizeHtml(yName || yKey) + " (" + aggregation + ")</b>: " + yAxis.formatDatum(aggregatedValue) + "<br>"
                : '';
            content += "<b>Frequency</b>: " + frequency;
            var defaults = {
                title: title,
                backgroundColor: color,
                content: content,
            };
            if (tooltipRenderer) {
                return toTooltipHtml(tooltipRenderer({
                    datum: bin,
                    xKey: xKey,
                    xValue: bin.domain,
                    xName: xName,
                    yKey: yKey,
                    yValue: bin.aggregatedValue,
                    yName: yName,
                    color: color,
                    title: title,
                    seriesId: seriesId,
                }), defaults);
            }
            return toTooltipHtml(defaults);
        };
        HistogramSeries.prototype.getLegendData = function () {
            var _a = this, id = _a.id, data = _a.data, xKey = _a.xKey, yName = _a.yName, visible = _a.visible, fill = _a.fill, stroke = _a.stroke, fillOpacity = _a.fillOpacity, strokeOpacity = _a.strokeOpacity;
            if (!data || data.length === 0) {
                return [];
            }
            return [
                {
                    id: id,
                    itemId: xKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: yName || xKey || 'Frequency',
                    },
                    marker: {
                        fill: fill || 'rgba(0, 0, 0, 0)',
                        stroke: stroke || 'rgba(0, 0, 0, 0)',
                        fillOpacity: fillOpacity,
                        strokeOpacity: strokeOpacity,
                    },
                },
            ];
        };
        HistogramSeries.prototype.isLabelEnabled = function () {
            return this.label.enabled;
        };
        HistogramSeries.className = 'HistogramSeries';
        HistogramSeries.type = 'histogram';
        __decorate$a([
            Validate(OPT_COLOR_STRING)
        ], HistogramSeries.prototype, "fill", void 0);
        __decorate$a([
            Validate(OPT_COLOR_STRING)
        ], HistogramSeries.prototype, "stroke", void 0);
        __decorate$a([
            Validate(NUMBER(0, 1))
        ], HistogramSeries.prototype, "fillOpacity", void 0);
        __decorate$a([
            Validate(NUMBER(0, 1))
        ], HistogramSeries.prototype, "strokeOpacity", void 0);
        __decorate$a([
            Validate(OPT_LINE_DASH)
        ], HistogramSeries.prototype, "lineDash", void 0);
        __decorate$a([
            Validate(NUMBER(0))
        ], HistogramSeries.prototype, "lineDashOffset", void 0);
        __decorate$a([
            Validate(STRING)
        ], HistogramSeries.prototype, "xKey", void 0);
        __decorate$a([
            Validate(BOOLEAN)
        ], HistogramSeries.prototype, "areaPlot", void 0);
        __decorate$a([
            Validate(OPT_ARRAY())
        ], HistogramSeries.prototype, "bins", void 0);
        __decorate$a([
            Validate(HISTOGRAM_AGGREGATION)
        ], HistogramSeries.prototype, "aggregation", void 0);
        __decorate$a([
            Validate(OPT_NUMBER(0))
        ], HistogramSeries.prototype, "binCount", void 0);
        __decorate$a([
            Validate(STRING)
        ], HistogramSeries.prototype, "xName", void 0);
        __decorate$a([
            Validate(STRING)
        ], HistogramSeries.prototype, "yKey", void 0);
        __decorate$a([
            Validate(STRING)
        ], HistogramSeries.prototype, "yName", void 0);
        __decorate$a([
            Validate(NUMBER(0))
        ], HistogramSeries.prototype, "strokeWidth", void 0);
        return HistogramSeries;
    }(CartesianSeries));

    var __extends$j = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$4 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$4 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __values$3 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$8 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var LineSeriesLabel = /** @class */ (function (_super) {
        __extends$j(LineSeriesLabel, _super);
        function LineSeriesLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.formatter = undefined;
            return _this;
        }
        __decorate$9([
            Validate(OPT_FUNCTION)
        ], LineSeriesLabel.prototype, "formatter", void 0);
        return LineSeriesLabel;
    }(Label));
    var LineSeriesTooltip = /** @class */ (function (_super) {
        __extends$j(LineSeriesTooltip, _super);
        function LineSeriesTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderer = undefined;
            _this.format = undefined;
            return _this;
        }
        __decorate$9([
            Validate(OPT_FUNCTION)
        ], LineSeriesTooltip.prototype, "renderer", void 0);
        __decorate$9([
            Validate(OPT_STRING)
        ], LineSeriesTooltip.prototype, "format", void 0);
        return LineSeriesTooltip;
    }(SeriesTooltip));
    var LineSeries = /** @class */ (function (_super) {
        __extends$j(LineSeries, _super);
        function LineSeries() {
            var _this = _super.call(this, {
                hasMarkers: true,
                pickModes: [
                    SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,
                    SeriesNodePickMode.NEAREST_NODE,
                    SeriesNodePickMode.EXACT_SHAPE_MATCH,
                ],
            }) || this;
            _this.xDomain = [];
            _this.yDomain = [];
            _this.pointsData = [];
            _this.marker = new CartesianSeriesMarker();
            _this.label = new LineSeriesLabel();
            _this.title = undefined;
            _this.stroke = '#874349';
            _this.lineDash = [0];
            _this.lineDashOffset = 0;
            _this.strokeWidth = 2;
            _this.strokeOpacity = 1;
            _this.tooltip = new LineSeriesTooltip();
            _this._xKey = '';
            _this.xName = '';
            _this._yKey = '';
            _this.yName = '';
            var _a = _this, marker = _a.marker, label = _a.label;
            marker.fill = '#c16068';
            marker.stroke = '#874349';
            label.enabled = false;
            return _this;
        }
        Object.defineProperty(LineSeries.prototype, "xKey", {
            get: function () {
                return this._xKey;
            },
            set: function (value) {
                this._xKey = value;
                this.pointsData.splice(0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LineSeries.prototype, "yKey", {
            get: function () {
                return this._yKey;
            },
            set: function (value) {
                this._yKey = value;
                this.pointsData.splice(0);
            },
            enumerable: false,
            configurable: true
        });
        LineSeries.prototype.getDomain = function (direction) {
            if (direction === ChartAxisDirection.X) {
                return this.xDomain;
            }
            return this.yDomain;
        };
        LineSeries.prototype.processData = function () {
            return __awaiter$4(this, void 0, void 0, function () {
                var _a, xAxis, yAxis, xKey, yKey, pointsData, data, isContinuousX, isContinuousY, xData, yData, data_1, data_1_1, datum, x, y, xDatum, yDatum;
                var e_1, _b;
                return __generator$4(this, function (_c) {
                    _a = this, xAxis = _a.xAxis, yAxis = _a.yAxis, xKey = _a.xKey, yKey = _a.yKey, pointsData = _a.pointsData;
                    data = xKey && yKey && this.data ? this.data : [];
                    if (!xAxis || !yAxis) {
                        return [2 /*return*/];
                    }
                    isContinuousX = xAxis.scale instanceof ContinuousScale;
                    isContinuousY = yAxis.scale instanceof ContinuousScale;
                    xData = [];
                    yData = [];
                    pointsData.splice(0);
                    try {
                        for (data_1 = __values$3(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                            datum = data_1_1.value;
                            x = datum[xKey];
                            y = datum[yKey];
                            xDatum = checkDatum(x, isContinuousX);
                            if (isContinuousX && xDatum === undefined) {
                                continue;
                            }
                            yDatum = checkDatum(y, isContinuousY);
                            xData.push(xDatum);
                            yData.push(yDatum);
                            pointsData.push({
                                xDatum: xDatum,
                                yDatum: yDatum,
                                datum: datum,
                            });
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (data_1_1 && !data_1_1.done && (_b = data_1.return)) _b.call(data_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    this.xDomain = isContinuousX ? this.fixNumericExtent(extent(xData, isContinuous), xAxis) : xData;
                    this.yDomain = isContinuousY ? this.fixNumericExtent(extent(yData, isContinuous), yAxis) : yData;
                    return [2 /*return*/];
                });
            });
        };
        LineSeries.prototype.createNodeData = function () {
            var _a;
            return __awaiter$4(this, void 0, void 0, function () {
                var _b, data, xAxis, yAxis, _c, markerEnabled, markerSize, strokeWidth, _d, pointsData, label, yKey, seriesId, xScale, yScale, xOffset, yOffset, nodeData, size, moveTo, prevXInRange, nextPoint, actualLength, i, point, xDatum, yDatum, datum, x, tolerance, xInRange, nextXInRange, y, labelText;
                return __generator$4(this, function (_e) {
                    _b = this, data = _b.data, xAxis = _b.xAxis, yAxis = _b.yAxis, _c = _b.marker, markerEnabled = _c.enabled, markerSize = _c.size, strokeWidth = _c.strokeWidth;
                    if (!data || !xAxis || !yAxis) {
                        return [2 /*return*/, []];
                    }
                    _d = this, pointsData = _d.pointsData, label = _d.label, yKey = _d.yKey, seriesId = _d.id;
                    xScale = xAxis.scale;
                    yScale = yAxis.scale;
                    xOffset = (xScale.bandwidth || 0) / 2;
                    yOffset = (yScale.bandwidth || 0) / 2;
                    nodeData = new Array(data.length);
                    size = markerEnabled ? markerSize : 0;
                    moveTo = true;
                    prevXInRange = undefined;
                    nextPoint = undefined;
                    actualLength = 0;
                    for (i = 0; i < pointsData.length; i++) {
                        point = nextPoint || pointsData[i];
                        if (point.yDatum === undefined) {
                            prevXInRange = undefined;
                            moveTo = true;
                        }
                        else {
                            xDatum = point.xDatum, yDatum = point.yDatum, datum = point.datum;
                            x = xScale.convert(xDatum) + xOffset;
                            if (isNaN(x)) {
                                prevXInRange = undefined;
                                moveTo = true;
                                continue;
                            }
                            tolerance = (xScale.bandwidth || markerSize * 0.5 + (strokeWidth || 0)) + 1;
                            nextPoint = ((_a = pointsData[i + 1]) === null || _a === void 0 ? void 0 : _a.yDatum) === undefined ? undefined : pointsData[i + 1];
                            xInRange = xAxis.inRangeEx(x, 0, tolerance);
                            nextXInRange = nextPoint && xAxis.inRangeEx(xScale.convert(nextPoint.xDatum) + xOffset, 0, tolerance);
                            if (xInRange === -1 && nextXInRange === -1) {
                                moveTo = true;
                                continue;
                            }
                            if (xInRange === 1 && prevXInRange === 1) {
                                moveTo = true;
                                continue;
                            }
                            prevXInRange = xInRange;
                            y = yScale.convert(yDatum) + yOffset;
                            labelText = void 0;
                            if (label.formatter) {
                                labelText = label.formatter({ value: yDatum, seriesId: seriesId });
                            }
                            else {
                                labelText =
                                    typeof yDatum === 'number' && isFinite(yDatum)
                                        ? yDatum.toFixed(2)
                                        : yDatum
                                            ? String(yDatum)
                                            : '';
                            }
                            nodeData[actualLength++] = {
                                series: this,
                                datum: datum,
                                point: { x: x, y: y, moveTo: moveTo, size: size },
                                label: labelText
                                    ? {
                                        text: labelText,
                                        fontStyle: label.fontStyle,
                                        fontWeight: label.fontWeight,
                                        fontSize: label.fontSize,
                                        fontFamily: label.fontFamily,
                                        textAlign: 'center',
                                        textBaseline: 'bottom',
                                        fill: label.color,
                                    }
                                    : undefined,
                            };
                            moveTo = false;
                        }
                    }
                    nodeData.length = actualLength;
                    return [2 /*return*/, [{ itemId: yKey, nodeData: nodeData, labelData: nodeData }]];
                });
            });
        };
        LineSeries.prototype.isPathOrSelectionDirty = function () {
            return this.marker.isDirty();
        };
        LineSeries.prototype.updatePaths = function (opts) {
            return __awaiter$4(this, void 0, void 0, function () {
                var nodeData, _a, lineNode, linePath, nodeData_1, nodeData_1_1, data;
                var e_2, _b;
                return __generator$4(this, function (_c) {
                    nodeData = opts.contextData.nodeData, _a = __read$8(opts.paths, 1), lineNode = _a[0];
                    linePath = lineNode.path;
                    lineNode.fill = undefined;
                    lineNode.lineJoin = 'round';
                    lineNode.pointerEvents = PointerEvents.None;
                    linePath.clear({ trackChanges: true });
                    try {
                        for (nodeData_1 = __values$3(nodeData), nodeData_1_1 = nodeData_1.next(); !nodeData_1_1.done; nodeData_1_1 = nodeData_1.next()) {
                            data = nodeData_1_1.value;
                            if (data.point.moveTo) {
                                linePath.moveTo(data.point.x, data.point.y);
                            }
                            else {
                                linePath.lineTo(data.point.x, data.point.y);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (nodeData_1_1 && !nodeData_1_1.done && (_b = nodeData_1.return)) _b.call(nodeData_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    lineNode.checkPathDirty();
                    return [2 /*return*/];
                });
            });
        };
        LineSeries.prototype.updatePathNodes = function (opts) {
            return __awaiter$4(this, void 0, void 0, function () {
                var _a, lineNode;
                return __generator$4(this, function (_b) {
                    _a = __read$8(opts.paths, 1), lineNode = _a[0];
                    lineNode.stroke = this.stroke;
                    lineNode.strokeWidth = this.getStrokeWidth(this.strokeWidth);
                    lineNode.strokeOpacity = this.strokeOpacity;
                    lineNode.lineDash = this.lineDash;
                    lineNode.lineDashOffset = this.lineDashOffset;
                    return [2 /*return*/];
                });
            });
        };
        LineSeries.prototype.updateMarkerSelection = function (opts) {
            return __awaiter$4(this, void 0, void 0, function () {
                var nodeData, markerSelection, _a, shape, enabled, MarkerShape, updateMarkerSelection, enterDatumSelection;
                return __generator$4(this, function (_b) {
                    nodeData = opts.nodeData, markerSelection = opts.markerSelection;
                    _a = this.marker, shape = _a.shape, enabled = _a.enabled;
                    nodeData = shape && enabled ? nodeData : [];
                    MarkerShape = getMarker(shape);
                    if (this.marker.isDirty()) {
                        markerSelection = markerSelection.setData([]);
                        markerSelection.exit.remove();
                    }
                    updateMarkerSelection = markerSelection.setData(nodeData);
                    updateMarkerSelection.exit.remove();
                    enterDatumSelection = updateMarkerSelection.enter.append(MarkerShape);
                    return [2 /*return*/, updateMarkerSelection.merge(enterDatumSelection)];
                });
            });
        };
        LineSeries.prototype.updateMarkerNodes = function (opts) {
            return __awaiter$4(this, void 0, void 0, function () {
                var markerSelection, isDatumHighlighted, _a, marker, markerFillOpacity, xKey, yKey, lineStroke, strokeOpacity, _b, highlightedFill, _c, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, seriesId, size, formatter, markerStrokeWidth, customMarker;
                return __generator$4(this, function (_d) {
                    markerSelection = opts.markerSelection, isDatumHighlighted = opts.isHighlight;
                    _a = this, marker = _a.marker, markerFillOpacity = _a.marker.fillOpacity, xKey = _a.xKey, yKey = _a.yKey, lineStroke = _a.stroke, strokeOpacity = _a.strokeOpacity, _b = _a.highlightStyle.item, highlightedFill = _b.fill, _c = _b.fillOpacity, highlightFillOpacity = _c === void 0 ? markerFillOpacity : _c, highlightedStroke = _b.stroke, highlightedDatumStrokeWidth = _b.strokeWidth, seriesId = _a.id;
                    size = marker.size, formatter = marker.formatter;
                    markerStrokeWidth = marker.strokeWidth !== undefined ? marker.strokeWidth : this.strokeWidth;
                    customMarker = typeof marker.shape === 'function';
                    markerSelection.each(function (node, datum) {
                        var _a, _b;
                        var fill = isDatumHighlighted && highlightedFill !== undefined ? highlightedFill : marker.fill;
                        var fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;
                        var stroke = isDatumHighlighted && highlightedStroke !== undefined ? highlightedStroke : marker.stroke || lineStroke;
                        var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined
                            ? highlightedDatumStrokeWidth
                            : markerStrokeWidth;
                        var format = undefined;
                        if (formatter) {
                            format = formatter({
                                datum: datum.datum,
                                xKey: xKey,
                                yKey: yKey,
                                fill: fill,
                                stroke: stroke,
                                strokeWidth: strokeWidth,
                                size: size,
                                highlighted: isDatumHighlighted,
                                seriesId: seriesId,
                            });
                        }
                        node.fill = (format && format.fill) || fill;
                        node.stroke = (format && format.stroke) || stroke;
                        node.strokeWidth = format && format.strokeWidth !== undefined ? format.strokeWidth : strokeWidth;
                        node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
                        node.strokeOpacity = (_b = (_a = marker.strokeOpacity) !== null && _a !== void 0 ? _a : strokeOpacity) !== null && _b !== void 0 ? _b : 1;
                        node.size = format && format.size !== undefined ? format.size : size;
                        node.translationX = datum.point.x;
                        node.translationY = datum.point.y;
                        node.visible = node.size > 0 && !isNaN(datum.point.x) && !isNaN(datum.point.y);
                        if (!customMarker || node.dirtyPath) {
                            return;
                        }
                        // Only for cutom marker shapes
                        node.path.clear({ trackChanges: true });
                        node.updatePath();
                        node.checkPathDirty();
                    });
                    if (!isDatumHighlighted) {
                        this.marker.markClean();
                    }
                    return [2 /*return*/];
                });
            });
        };
        LineSeries.prototype.updateLabelSelection = function (opts) {
            return __awaiter$4(this, void 0, void 0, function () {
                var labelData, labelSelection, _a, shape, enabled, updateTextSelection, enterTextSelection;
                return __generator$4(this, function (_b) {
                    labelData = opts.labelData, labelSelection = opts.labelSelection;
                    _a = this.marker, shape = _a.shape, enabled = _a.enabled;
                    labelData = shape && enabled ? labelData : [];
                    updateTextSelection = labelSelection.setData(labelData);
                    updateTextSelection.exit.remove();
                    enterTextSelection = updateTextSelection.enter.append(Text);
                    return [2 /*return*/, updateTextSelection.merge(enterTextSelection)];
                });
            });
        };
        LineSeries.prototype.updateLabelNodes = function (opts) {
            return __awaiter$4(this, void 0, void 0, function () {
                var labelSelection, _a, labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color;
                return __generator$4(this, function (_b) {
                    labelSelection = opts.labelSelection;
                    _a = this.label, labelEnabled = _a.enabled, fontStyle = _a.fontStyle, fontWeight = _a.fontWeight, fontSize = _a.fontSize, fontFamily = _a.fontFamily, color = _a.color;
                    labelSelection.each(function (text, datum) {
                        var point = datum.point, label = datum.label;
                        if (datum && label && labelEnabled) {
                            text.fontStyle = fontStyle;
                            text.fontWeight = fontWeight;
                            text.fontSize = fontSize;
                            text.fontFamily = fontFamily;
                            text.textAlign = label.textAlign;
                            text.textBaseline = label.textBaseline;
                            text.text = label.text;
                            text.x = point.x;
                            text.y = point.y - 10;
                            text.fill = color;
                            text.visible = true;
                        }
                        else {
                            text.visible = false;
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        LineSeries.prototype.getNodeClickEvent = function (event, datum) {
            return new CartesianSeriesNodeClickEvent(this.xKey, this.yKey, event, datum, this);
        };
        LineSeries.prototype.getTooltipHtml = function (nodeDatum) {
            var _a = this, xKey = _a.xKey, yKey = _a.yKey, xAxis = _a.xAxis, yAxis = _a.yAxis;
            if (!xKey || !yKey || !xAxis || !yAxis) {
                return '';
            }
            var _b = this, xName = _b.xName, yName = _b.yName, tooltip = _b.tooltip, marker = _b.marker, seriesId = _b.id;
            var tooltipRenderer = tooltip.renderer, tooltipFormat = tooltip.format;
            var datum = nodeDatum.datum;
            var xValue = datum[xKey];
            var yValue = datum[yKey];
            var xString = xAxis.formatDatum(xValue);
            var yString = yAxis.formatDatum(yValue);
            var title = sanitizeHtml(this.title || yName);
            var content = sanitizeHtml(xString + ': ' + yString);
            var markerFormatter = marker.formatter, fill = marker.fill, stroke = marker.stroke, markerStrokeWidth = marker.strokeWidth, size = marker.size;
            var strokeWidth = markerStrokeWidth !== undefined ? markerStrokeWidth : this.strokeWidth;
            var format = undefined;
            if (markerFormatter) {
                format = markerFormatter({
                    datum: datum,
                    xKey: xKey,
                    yKey: yKey,
                    fill: fill,
                    stroke: stroke,
                    strokeWidth: strokeWidth,
                    size: size,
                    highlighted: false,
                    seriesId: seriesId,
                });
            }
            var color = (format && format.fill) || fill;
            var defaults = {
                title: title,
                backgroundColor: color,
                content: content,
            };
            if (tooltipFormat || tooltipRenderer) {
                var params = {
                    datum: datum,
                    xKey: xKey,
                    xValue: xValue,
                    xName: xName,
                    yKey: yKey,
                    yValue: yValue,
                    yName: yName,
                    title: title,
                    color: color,
                    seriesId: seriesId,
                };
                if (tooltipFormat) {
                    return toTooltipHtml({
                        content: interpolate(tooltipFormat, params),
                    }, defaults);
                }
                if (tooltipRenderer) {
                    return toTooltipHtml(tooltipRenderer(params), defaults);
                }
            }
            return toTooltipHtml(defaults);
        };
        LineSeries.prototype.getLegendData = function () {
            var _a, _b, _c;
            var _d = this, id = _d.id, data = _d.data, xKey = _d.xKey, yKey = _d.yKey, yName = _d.yName, visible = _d.visible, title = _d.title, marker = _d.marker, stroke = _d.stroke, strokeOpacity = _d.strokeOpacity;
            if (!(data && data.length && xKey && yKey)) {
                return [];
            }
            return [
                {
                    id: id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: title || yName || yKey,
                    },
                    marker: {
                        shape: marker.shape,
                        fill: marker.fill || 'rgba(0, 0, 0, 0)',
                        stroke: marker.stroke || stroke || 'rgba(0, 0, 0, 0)',
                        fillOpacity: (_a = marker.fillOpacity) !== null && _a !== void 0 ? _a : 1,
                        strokeOpacity: (_c = (_b = marker.strokeOpacity) !== null && _b !== void 0 ? _b : strokeOpacity) !== null && _c !== void 0 ? _c : 1,
                    },
                },
            ];
        };
        LineSeries.prototype.isLabelEnabled = function () {
            return this.label.enabled;
        };
        LineSeries.className = 'LineSeries';
        LineSeries.type = 'line';
        __decorate$9([
            Validate(OPT_STRING)
        ], LineSeries.prototype, "title", void 0);
        __decorate$9([
            Validate(OPT_COLOR_STRING)
        ], LineSeries.prototype, "stroke", void 0);
        __decorate$9([
            Validate(OPT_LINE_DASH)
        ], LineSeries.prototype, "lineDash", void 0);
        __decorate$9([
            Validate(NUMBER(0))
        ], LineSeries.prototype, "lineDashOffset", void 0);
        __decorate$9([
            Validate(NUMBER(0))
        ], LineSeries.prototype, "strokeWidth", void 0);
        __decorate$9([
            Validate(NUMBER(0, 1))
        ], LineSeries.prototype, "strokeOpacity", void 0);
        __decorate$9([
            Validate(STRING)
        ], LineSeries.prototype, "_xKey", void 0);
        __decorate$9([
            Validate(STRING)
        ], LineSeries.prototype, "xName", void 0);
        __decorate$9([
            Validate(STRING)
        ], LineSeries.prototype, "_yKey", void 0);
        __decorate$9([
            Validate(STRING)
        ], LineSeries.prototype, "yName", void 0);
        return LineSeries;
    }(CartesianSeries));

    var __extends$i = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$a = (undefined && undefined.__assign) || function () {
        __assign$a = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$a.apply(this, arguments);
    };
    var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$3 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$3 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var ScatterSeriesNodeClickEvent = /** @class */ (function (_super) {
        __extends$i(ScatterSeriesNodeClickEvent, _super);
        function ScatterSeriesNodeClickEvent(sizeKey, xKey, yKey, nativeEvent, datum, series) {
            var _this = _super.call(this, xKey, yKey, nativeEvent, datum, series) || this;
            _this.sizeKey = sizeKey;
            return _this;
        }
        return ScatterSeriesNodeClickEvent;
    }(CartesianSeriesNodeClickEvent));
    var ScatterSeriesTooltip = /** @class */ (function (_super) {
        __extends$i(ScatterSeriesTooltip, _super);
        function ScatterSeriesTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderer = undefined;
            return _this;
        }
        __decorate$8([
            Validate(OPT_FUNCTION)
        ], ScatterSeriesTooltip.prototype, "renderer", void 0);
        return ScatterSeriesTooltip;
    }(SeriesTooltip));
    var ScatterSeries = /** @class */ (function (_super) {
        __extends$i(ScatterSeries, _super);
        function ScatterSeries() {
            var _this = _super.call(this, {
                pickModes: [
                    SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,
                    SeriesNodePickMode.NEAREST_NODE,
                    SeriesNodePickMode.EXACT_SHAPE_MATCH,
                ],
                pathsPerSeries: 0,
                hasMarkers: true,
            }) || this;
            _this.xDomain = [];
            _this.yDomain = [];
            _this.xData = [];
            _this.yData = [];
            _this.validData = [];
            _this.sizeData = [];
            _this.sizeScale = new LinearScale();
            _this.marker = new CartesianSeriesMarker();
            _this.label = new Label();
            _this.title = undefined;
            _this.labelKey = undefined;
            _this.xName = '';
            _this.yName = '';
            _this.sizeName = 'Size';
            _this.labelName = 'Label';
            _this._xKey = '';
            _this._yKey = '';
            _this._sizeKey = undefined;
            _this.tooltip = new ScatterSeriesTooltip();
            var label = _this.label;
            label.enabled = false;
            return _this;
        }
        Object.defineProperty(ScatterSeries.prototype, "xKey", {
            get: function () {
                return this._xKey;
            },
            set: function (value) {
                this._xKey = value;
                this.xData = [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScatterSeries.prototype, "yKey", {
            get: function () {
                return this._yKey;
            },
            set: function (value) {
                this._yKey = value;
                this.yData = [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScatterSeries.prototype, "sizeKey", {
            get: function () {
                return this._sizeKey;
            },
            set: function (value) {
                this._sizeKey = value;
                this.sizeData = [];
            },
            enumerable: false,
            configurable: true
        });
        ScatterSeries.prototype.processData = function () {
            return __awaiter$3(this, void 0, void 0, function () {
                var _a, xKey, yKey, sizeKey, xAxis, yAxis, marker, data, xScale, yScale, isContinuousX, isContinuousY;
                return __generator$3(this, function (_b) {
                    _a = this, xKey = _a.xKey, yKey = _a.yKey, sizeKey = _a.sizeKey, xAxis = _a.xAxis, yAxis = _a.yAxis, marker = _a.marker;
                    if (!xAxis || !yAxis) {
                        return [2 /*return*/];
                    }
                    data = xKey && yKey && this.data ? this.data : [];
                    xScale = xAxis.scale;
                    yScale = yAxis.scale;
                    isContinuousX = xScale instanceof ContinuousScale;
                    isContinuousY = yScale instanceof ContinuousScale;
                    this.validData = data.filter(function (d) { return checkDatum(d[xKey], isContinuousX) !== undefined && checkDatum(d[yKey], isContinuousY) !== undefined; });
                    this.xData = this.validData.map(function (d) { return d[xKey]; });
                    this.yData = this.validData.map(function (d) { return d[yKey]; });
                    this.sizeData = sizeKey ? this.validData.map(function (d) { return d[sizeKey]; }) : [];
                    this.sizeScale.domain = marker.domain ? marker.domain : extent(this.sizeData, isContinuous) || [1, 1];
                    if (xAxis.scale instanceof ContinuousScale) {
                        this.xDomain = this.fixNumericExtent(extent(this.xData, isContinuous), xAxis);
                    }
                    else {
                        this.xDomain = this.xData;
                    }
                    if (yAxis.scale instanceof ContinuousScale) {
                        this.yDomain = this.fixNumericExtent(extent(this.yData, isContinuous), yAxis);
                    }
                    else {
                        this.yDomain = this.yData;
                    }
                    return [2 /*return*/];
                });
            });
        };
        ScatterSeries.prototype.getDomain = function (direction) {
            if (direction === ChartAxisDirection.X) {
                return this.xDomain;
            }
            else {
                return this.yDomain;
            }
        };
        ScatterSeries.prototype.getNodeClickEvent = function (event, datum) {
            return new ScatterSeriesNodeClickEvent(this.sizeKey, this.xKey, this.yKey, event, datum, this);
        };
        ScatterSeries.prototype.createNodeData = function () {
            return __awaiter$3(this, void 0, void 0, function () {
                var _a, chart, data, visible, xAxis, yAxis, yKey, label, labelKey, xScale, yScale, isContinuousX, isContinuousY, xOffset, yOffset, _b, xData, yData, validData, sizeData, sizeScale, marker, nodeData, font, actualLength, i, xy, x, y, text, size, markerSize;
                return __generator$3(this, function (_c) {
                    _a = this, chart = _a.chart, data = _a.data, visible = _a.visible, xAxis = _a.xAxis, yAxis = _a.yAxis, yKey = _a.yKey, label = _a.label, labelKey = _a.labelKey;
                    if (!(chart && data && visible && xAxis && yAxis)) {
                        return [2 /*return*/, []];
                    }
                    xScale = xAxis.scale;
                    yScale = yAxis.scale;
                    isContinuousX = xScale instanceof ContinuousScale;
                    isContinuousY = yScale instanceof ContinuousScale;
                    xOffset = (xScale.bandwidth || 0) / 2;
                    yOffset = (yScale.bandwidth || 0) / 2;
                    _b = this, xData = _b.xData, yData = _b.yData, validData = _b.validData, sizeData = _b.sizeData, sizeScale = _b.sizeScale, marker = _b.marker;
                    nodeData = new Array(xData.length);
                    sizeScale.range = [marker.size, marker.maxSize];
                    font = label.getFont();
                    actualLength = 0;
                    for (i = 0; i < xData.length; i++) {
                        xy = this.checkDomainXY(xData[i], yData[i], isContinuousX, isContinuousY);
                        if (!xy) {
                            continue;
                        }
                        x = xScale.convert(xy[0]) + xOffset;
                        y = yScale.convert(xy[1]) + yOffset;
                        if (!this.checkRangeXY(x, y, xAxis, yAxis)) {
                            continue;
                        }
                        text = labelKey ? String(validData[i][labelKey]) : '';
                        size = HdpiCanvas.getTextSize(text, font);
                        markerSize = sizeData.length ? sizeScale.convert(sizeData[i]) : marker.size;
                        nodeData[actualLength++] = {
                            series: this,
                            itemId: yKey,
                            datum: validData[i],
                            point: { x: x, y: y, size: markerSize },
                            label: __assign$a({ text: text }, size),
                        };
                    }
                    nodeData.length = actualLength;
                    return [2 /*return*/, [{ itemId: this.yKey, nodeData: nodeData, labelData: nodeData }]];
                });
            });
        };
        ScatterSeries.prototype.isPathOrSelectionDirty = function () {
            return this.marker.isDirty();
        };
        ScatterSeries.prototype.getLabelData = function () {
            var _a;
            return (_a = this.contextNodeData) === null || _a === void 0 ? void 0 : _a.reduce(function (r, n) { return r.concat(n.labelData); }, []);
        };
        ScatterSeries.prototype.updateMarkerSelection = function (opts) {
            return __awaiter$3(this, void 0, void 0, function () {
                var nodeData, markerSelection, _a, enabled, shape, MarkerShape, data, updateMarkers, enterMarkers;
                return __generator$3(this, function (_b) {
                    nodeData = opts.nodeData, markerSelection = opts.markerSelection;
                    _a = this.marker, enabled = _a.enabled, shape = _a.shape;
                    MarkerShape = getMarker(shape);
                    if (this.marker.isDirty()) {
                        markerSelection = markerSelection.setData([]);
                        markerSelection.exit.remove();
                    }
                    data = enabled ? nodeData : [];
                    updateMarkers = markerSelection.setData(data);
                    updateMarkers.exit.remove();
                    enterMarkers = updateMarkers.enter.append(MarkerShape);
                    return [2 /*return*/, updateMarkers.merge(enterMarkers)];
                });
            });
        };
        ScatterSeries.prototype.updateMarkerNodes = function (opts) {
            return __awaiter$3(this, void 0, void 0, function () {
                var markerSelection, isDatumHighlighted, _a, marker, xKey, yKey, sizeScale, _b, markerFillOpacity, markerStrokeOpacity, markerStrokeWidth, _c, highlightedFill, _d, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, seriesId, formatter, customMarker;
                return __generator$3(this, function (_e) {
                    markerSelection = opts.markerSelection, isDatumHighlighted = opts.isHighlight;
                    _a = this, marker = _a.marker, xKey = _a.xKey, yKey = _a.yKey, sizeScale = _a.sizeScale, _b = _a.marker, markerFillOpacity = _b.fillOpacity, markerStrokeOpacity = _b.strokeOpacity, markerStrokeWidth = _b.strokeWidth, _c = _a.highlightStyle.item, highlightedFill = _c.fill, _d = _c.fillOpacity, highlightFillOpacity = _d === void 0 ? markerFillOpacity : _d, highlightedStroke = _c.stroke, highlightedDatumStrokeWidth = _c.strokeWidth, seriesId = _a.id;
                    formatter = marker.formatter;
                    sizeScale.range = [marker.size, marker.maxSize];
                    customMarker = typeof marker.shape === 'function';
                    markerSelection.each(function (node, datum) {
                        var _a, _b, _c, _d, _e, _f, _g;
                        var fill = isDatumHighlighted && highlightedFill !== undefined ? highlightedFill : marker.fill;
                        var fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;
                        var stroke = isDatumHighlighted && highlightedStroke !== undefined ? highlightedStroke : marker.stroke;
                        var strokeOpacity = markerStrokeOpacity;
                        var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined
                            ? highlightedDatumStrokeWidth
                            : markerStrokeWidth !== null && markerStrokeWidth !== void 0 ? markerStrokeWidth : 1;
                        var size = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;
                        var format = undefined;
                        if (formatter) {
                            format = formatter({
                                datum: datum.datum,
                                xKey: xKey,
                                yKey: yKey,
                                fill: fill,
                                stroke: stroke,
                                strokeWidth: strokeWidth,
                                size: size,
                                highlighted: isDatumHighlighted,
                                seriesId: seriesId,
                            });
                        }
                        node.fill = (format && format.fill) || fill;
                        node.stroke = (format && format.stroke) || stroke;
                        node.strokeWidth = (_c = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _c !== void 0 ? _c : strokeWidth;
                        node.size = format && format.size !== undefined ? format.size : size;
                        node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
                        node.strokeOpacity = strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1;
                        node.translationX = (_e = (_d = datum.point) === null || _d === void 0 ? void 0 : _d.x) !== null && _e !== void 0 ? _e : 0;
                        node.translationY = (_g = (_f = datum.point) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0;
                        node.visible = node.size > 0;
                        if (!customMarker || node.dirtyPath) {
                            return;
                        }
                        // Only for cutom marker shapes
                        node.path.clear({ trackChanges: true });
                        node.updatePath();
                        node.checkPathDirty();
                    });
                    if (!isDatumHighlighted) {
                        this.marker.markClean();
                    }
                    return [2 /*return*/];
                });
            });
        };
        ScatterSeries.prototype.updateLabelSelection = function (opts) {
            var _a, _b;
            return __awaiter$3(this, void 0, void 0, function () {
                var labelSelection, enabled, placedLabels, placedNodeDatum, updateLabels, enterLabels;
                return __generator$3(this, function (_c) {
                    labelSelection = opts.labelSelection;
                    enabled = this.label.enabled;
                    placedLabels = enabled ? (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.placeLabels().get(this)) !== null && _b !== void 0 ? _b : [] : [];
                    placedNodeDatum = placedLabels.map(function (v) { return (__assign$a(__assign$a({}, v.datum), { point: {
                            x: v.x,
                            y: v.y,
                            size: v.datum.point.size,
                        } })); });
                    updateLabels = labelSelection.setData(placedNodeDatum);
                    updateLabels.exit.remove();
                    enterLabels = updateLabels.enter.append(Text);
                    return [2 /*return*/, updateLabels.merge(enterLabels)];
                });
            });
        };
        ScatterSeries.prototype.updateLabelNodes = function (opts) {
            return __awaiter$3(this, void 0, void 0, function () {
                var labelSelection, label;
                return __generator$3(this, function (_a) {
                    labelSelection = opts.labelSelection;
                    label = this.label;
                    labelSelection.each(function (text, datum) {
                        var _a, _b, _c, _d;
                        text.text = datum.label.text;
                        text.fill = label.color;
                        text.x = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : 0;
                        text.y = (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : 0;
                        text.fontStyle = label.fontStyle;
                        text.fontWeight = label.fontWeight;
                        text.fontSize = label.fontSize;
                        text.fontFamily = label.fontFamily;
                        text.textAlign = 'left';
                        text.textBaseline = 'top';
                    });
                    return [2 /*return*/];
                });
            });
        };
        ScatterSeries.prototype.getTooltipHtml = function (nodeDatum) {
            var _a, _b, _c;
            var _d = this, xKey = _d.xKey, yKey = _d.yKey, xAxis = _d.xAxis, yAxis = _d.yAxis;
            if (!xKey || !yKey || !xAxis || !yAxis) {
                return '';
            }
            var _e = this, marker = _e.marker, tooltip = _e.tooltip, xName = _e.xName, yName = _e.yName, sizeKey = _e.sizeKey, sizeName = _e.sizeName, labelKey = _e.labelKey, labelName = _e.labelName, seriesId = _e.id;
            var fill = marker.fill, stroke = marker.stroke;
            var strokeWidth = this.getStrokeWidth((_a = marker.strokeWidth) !== null && _a !== void 0 ? _a : 1);
            var formatter = this.marker.formatter;
            var format = undefined;
            if (formatter) {
                format = formatter({
                    datum: nodeDatum,
                    xKey: xKey,
                    yKey: yKey,
                    fill: fill,
                    stroke: stroke,
                    strokeWidth: strokeWidth,
                    size: (_c = (_b = nodeDatum.point) === null || _b === void 0 ? void 0 : _b.size) !== null && _c !== void 0 ? _c : 0,
                    highlighted: false,
                    seriesId: seriesId,
                });
            }
            var color = (format && format.fill) || fill || 'gray';
            var title = this.title || yName;
            var datum = nodeDatum.datum;
            var xValue = datum[xKey];
            var yValue = datum[yKey];
            var xString = sanitizeHtml(xAxis.formatDatum(xValue));
            var yString = sanitizeHtml(yAxis.formatDatum(yValue));
            var content = "<b>" + sanitizeHtml(xName || xKey) + "</b>: " + xString + "<br>" +
                ("<b>" + sanitizeHtml(yName || yKey) + "</b>: " + yString);
            if (sizeKey) {
                content += "<br><b>" + sanitizeHtml(sizeName || sizeKey) + "</b>: " + sanitizeHtml(datum[sizeKey]);
            }
            if (labelKey) {
                content = "<b>" + sanitizeHtml(labelName || labelKey) + "</b>: " + sanitizeHtml(datum[labelKey]) + "<br>" + content;
            }
            var defaults = {
                title: title,
                backgroundColor: color,
                content: content,
            };
            var tooltipRenderer = tooltip.renderer;
            if (tooltipRenderer) {
                return toTooltipHtml(tooltipRenderer({
                    datum: datum,
                    xKey: xKey,
                    xValue: xValue,
                    xName: xName,
                    yKey: yKey,
                    yValue: yValue,
                    yName: yName,
                    sizeKey: sizeKey,
                    sizeName: sizeName,
                    labelKey: labelKey,
                    labelName: labelName,
                    title: title,
                    color: color,
                    seriesId: seriesId,
                }), defaults);
            }
            return toTooltipHtml(defaults);
        };
        ScatterSeries.prototype.getLegendData = function () {
            var _a = this, id = _a.id, data = _a.data, xKey = _a.xKey, yKey = _a.yKey, yName = _a.yName, title = _a.title, visible = _a.visible, marker = _a.marker;
            var fill = marker.fill, stroke = marker.stroke, fillOpacity = marker.fillOpacity, strokeOpacity = marker.strokeOpacity;
            if (!(data && data.length && xKey && yKey)) {
                return [];
            }
            return [
                {
                    id: id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: title || yName || yKey,
                    },
                    marker: {
                        shape: marker.shape,
                        fill: marker.fill || fill || 'rgba(0, 0, 0, 0)',
                        stroke: marker.stroke || stroke || 'rgba(0, 0, 0, 0)',
                        fillOpacity: fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1,
                        strokeOpacity: strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1,
                    },
                },
            ];
        };
        ScatterSeries.prototype.isLabelEnabled = function () {
            return this.label.enabled;
        };
        ScatterSeries.className = 'ScatterSeries';
        ScatterSeries.type = 'scatter';
        __decorate$8([
            Validate(OPT_STRING)
        ], ScatterSeries.prototype, "title", void 0);
        __decorate$8([
            Validate(OPT_STRING)
        ], ScatterSeries.prototype, "labelKey", void 0);
        __decorate$8([
            Validate(STRING)
        ], ScatterSeries.prototype, "xName", void 0);
        __decorate$8([
            Validate(STRING)
        ], ScatterSeries.prototype, "yName", void 0);
        __decorate$8([
            Validate(OPT_STRING)
        ], ScatterSeries.prototype, "sizeName", void 0);
        __decorate$8([
            Validate(OPT_STRING)
        ], ScatterSeries.prototype, "labelName", void 0);
        __decorate$8([
            Validate(STRING)
        ], ScatterSeries.prototype, "_xKey", void 0);
        __decorate$8([
            Validate(STRING)
        ], ScatterSeries.prototype, "_yKey", void 0);
        __decorate$8([
            Validate(OPT_STRING)
        ], ScatterSeries.prototype, "_sizeKey", void 0);
        return ScatterSeries;
    }(CartesianSeries));

    var __extends$h = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Sector = /** @class */ (function (_super) {
        __extends$h(Sector, _super);
        function Sector() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.centerX = 0;
            _this.centerY = 0;
            _this.innerRadius = 10;
            _this.outerRadius = 20;
            _this.startAngle = 0;
            _this.endAngle = Math.PI * 2;
            _this.angleOffset = 0;
            return _this;
        }
        Sector.prototype.computeBBox = function () {
            var radius = this.outerRadius;
            return new BBox(this.centerX - radius, this.centerY - radius, radius * 2, radius * 2);
        };
        Sector.prototype.isFullPie = function () {
            return isEqual$1(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));
        };
        Sector.prototype.updatePath = function () {
            var path = this.path;
            var angleOffset = this.angleOffset;
            var startAngle = Math.min(this.startAngle, this.endAngle) + angleOffset;
            var endAngle = Math.max(this.startAngle, this.endAngle) + angleOffset;
            var innerRadius = Math.min(this.innerRadius, this.outerRadius);
            var outerRadius = Math.max(this.innerRadius, this.outerRadius);
            var fullPie = this.isFullPie();
            var centerX = this.centerX;
            var centerY = this.centerY;
            path.clear();
            if (!fullPie) {
                path.moveTo(centerX + innerRadius * Math.cos(startAngle), centerY + innerRadius * Math.sin(startAngle));
                path.lineTo(centerX + outerRadius * Math.cos(startAngle), centerY + outerRadius * Math.sin(startAngle));
            }
            path.cubicArc(centerX, centerY, outerRadius, outerRadius, 0, startAngle, endAngle, 0);
            if (fullPie) {
                path.moveTo(centerX + innerRadius * Math.cos(endAngle), centerY + innerRadius * Math.sin(endAngle));
            }
            else {
                // Temp workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=993330
                // Revert this commit when fixed ^^.
                var x = centerX + innerRadius * Math.cos(endAngle);
                path.lineTo(Math.abs(x) < 1e-8 ? 0 : x, centerY + innerRadius * Math.sin(endAngle));
            }
            path.cubicArc(centerX, centerY, innerRadius, innerRadius, 0, endAngle, startAngle, 1);
            path.closePath();
            this.dirtyPath = false;
        };
        Sector.className = 'Sector';
        __decorate$7([
            ScenePathChangeDetection()
        ], Sector.prototype, "centerX", void 0);
        __decorate$7([
            ScenePathChangeDetection()
        ], Sector.prototype, "centerY", void 0);
        __decorate$7([
            ScenePathChangeDetection()
        ], Sector.prototype, "innerRadius", void 0);
        __decorate$7([
            ScenePathChangeDetection()
        ], Sector.prototype, "outerRadius", void 0);
        __decorate$7([
            ScenePathChangeDetection()
        ], Sector.prototype, "startAngle", void 0);
        __decorate$7([
            ScenePathChangeDetection()
        ], Sector.prototype, "endAngle", void 0);
        __decorate$7([
            ScenePathChangeDetection()
        ], Sector.prototype, "angleOffset", void 0);
        return Sector;
    }(Path));

    var __extends$g = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$9 = (undefined && undefined.__assign) || function () {
        __assign$9 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$9.apply(this, arguments);
    };
    var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$2 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read$7 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$4 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$7(arguments[i]));
        return ar;
    };
    var PieSeriesNodeClickEvent = /** @class */ (function (_super) {
        __extends$g(PieSeriesNodeClickEvent, _super);
        function PieSeriesNodeClickEvent(angleKey, calloutLabelKey, sectorLabelKey, radiusKey, nativeEvent, datum, series) {
            var _this = _super.call(this, nativeEvent, datum, series) || this;
            _this.angleKey = angleKey;
            _this.calloutLabelKey = calloutLabelKey;
            _this.sectorLabelKey = sectorLabelKey;
            _this.radiusKey = radiusKey;
            return _this;
        }
        __decorate$6([
            DeprecatedAndRenamedTo('calloutLabelKey')
        ], PieSeriesNodeClickEvent.prototype, "labelKey", void 0);
        return PieSeriesNodeClickEvent;
    }(SeriesNodeClickEvent));
    var PieNodeTag;
    (function (PieNodeTag) {
        PieNodeTag[PieNodeTag["Sector"] = 0] = "Sector";
        PieNodeTag[PieNodeTag["Callout"] = 1] = "Callout";
        PieNodeTag[PieNodeTag["Label"] = 2] = "Label";
    })(PieNodeTag || (PieNodeTag = {}));
    var PieSeriesCalloutLabel = /** @class */ (function (_super) {
        __extends$g(PieSeriesCalloutLabel, _super);
        function PieSeriesCalloutLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.offset = 3; // from the callout line
            _this.minAngle = 20; // in degrees
            _this.formatter = undefined;
            return _this;
        }
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeriesCalloutLabel.prototype, "offset", void 0);
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeriesCalloutLabel.prototype, "minAngle", void 0);
        __decorate$6([
            Validate(OPT_FUNCTION)
        ], PieSeriesCalloutLabel.prototype, "formatter", void 0);
        return PieSeriesCalloutLabel;
    }(Label));
    var PieSeriesSectorLabel = /** @class */ (function (_super) {
        __extends$g(PieSeriesSectorLabel, _super);
        function PieSeriesSectorLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.positionOffset = 0;
            _this.positionRatio = 0.5;
            _this.formatter = undefined;
            return _this;
        }
        __decorate$6([
            Validate(NUMBER())
        ], PieSeriesSectorLabel.prototype, "positionOffset", void 0);
        __decorate$6([
            Validate(NUMBER(0, 1))
        ], PieSeriesSectorLabel.prototype, "positionRatio", void 0);
        __decorate$6([
            Validate(OPT_FUNCTION)
        ], PieSeriesSectorLabel.prototype, "formatter", void 0);
        return PieSeriesSectorLabel;
    }(Label));
    var PieSeriesCalloutLine = /** @class */ (function () {
        function PieSeriesCalloutLine() {
            this.colors = undefined;
            this.length = 10;
            this.strokeWidth = 1;
        }
        __decorate$6([
            Validate(OPT_COLOR_STRING_ARRAY)
        ], PieSeriesCalloutLine.prototype, "colors", void 0);
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeriesCalloutLine.prototype, "length", void 0);
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeriesCalloutLine.prototype, "strokeWidth", void 0);
        return PieSeriesCalloutLine;
    }());
    var PieSeriesTooltip = /** @class */ (function (_super) {
        __extends$g(PieSeriesTooltip, _super);
        function PieSeriesTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderer = undefined;
            return _this;
        }
        __decorate$6([
            Validate(OPT_FUNCTION)
        ], PieSeriesTooltip.prototype, "renderer", void 0);
        return PieSeriesTooltip;
    }(SeriesTooltip));
    var PieTitle = /** @class */ (function (_super) {
        __extends$g(PieTitle, _super);
        function PieTitle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.showInLegend = false;
            return _this;
        }
        __decorate$6([
            Validate(BOOLEAN)
        ], PieTitle.prototype, "showInLegend", void 0);
        return PieTitle;
    }(Caption));
    var DoughnutInnerLabel = /** @class */ (function (_super) {
        __extends$g(DoughnutInnerLabel, _super);
        function DoughnutInnerLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.text = '';
            _this.margin = 2;
            return _this;
        }
        __decorate$6([
            Validate(STRING)
        ], DoughnutInnerLabel.prototype, "text", void 0);
        __decorate$6([
            Validate(NUMBER())
        ], DoughnutInnerLabel.prototype, "margin", void 0);
        return DoughnutInnerLabel;
    }(Label));
    var DoughnutInnerCircle = /** @class */ (function () {
        function DoughnutInnerCircle() {
            this.fill = 'transparent';
            this.fillOpacity = 1;
        }
        __decorate$6([
            Validate(COLOR_STRING)
        ], DoughnutInnerCircle.prototype, "fill", void 0);
        __decorate$6([
            Validate(OPT_NUMBER(0, 1))
        ], DoughnutInnerCircle.prototype, "fillOpacity", void 0);
        return DoughnutInnerCircle;
    }());
    function isPointInArc(x, y, sector) {
        var radius = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
        var innerRadius = sector.innerRadius, outerRadius = sector.outerRadius;
        if (radius < Math.min(innerRadius, outerRadius) || radius > Math.max(innerRadius, outerRadius)) {
            return false;
        }
        // Start and End angles are expected to be [-90, 270]
        // while Math.atan2 returns [-180, 180]
        var angle = Math.atan2(y, x);
        if (angle < -Math.PI / 2) {
            angle += 2 * Math.PI;
        }
        // Start is actually bigger than End clock-wise
        var startAngle = sector.startAngle, endAngle = sector.endAngle;
        if (endAngle === -Math.PI / 2) {
            return angle < startAngle;
        }
        if (startAngle === (3 * Math.PI) / 2) {
            return angle > endAngle;
        }
        return angle >= endAngle && angle <= startAngle;
    }
    var PieSeries = /** @class */ (function (_super) {
        __extends$g(PieSeries, _super);
        function PieSeries() {
            var _this = _super.call(this, { useLabelLayer: true }) || this;
            _this.radiusScale = new LinearScale();
            _this.groupSelection = Selection.select(_this.contentGroup).selectAll();
            _this.highlightSelection = Selection.select(_this.highlightGroup).selectAll();
            /**
             * The processed data that gets visualized.
             */
            _this.groupSelectionData = [];
            _this.sectorFormatData = [];
            _this.angleScale = (function () {
                var scale = new LinearScale();
                // Each sector is a ratio of the whole, where all ratios add up to 1.
                scale.domain = [0, 1];
                // Add 90 deg to start the first pie at 12 o'clock.
                scale.range = [-Math.PI, Math.PI].map(function (angle) { return angle + Math.PI / 2; });
                return scale;
            })();
            // When a user toggles a series item (e.g. from the legend), its boolean state is recorded here.
            _this.seriesItemEnabled = [];
            _this.calloutLabel = new PieSeriesCalloutLabel();
            _this.label = _this.calloutLabel;
            _this.sectorLabel = new PieSeriesSectorLabel();
            _this.calloutLine = new PieSeriesCalloutLine();
            _this.callout = _this.calloutLine;
            _this.tooltip = new PieSeriesTooltip();
            /**
             * The key of the numeric field to use to determine the angle (for example,
             * a pie sector angle).
             */
            _this.angleKey = '';
            _this.angleName = '';
            _this.innerLabels = [];
            /**
             * The key of the numeric field to use to determine the radii of pie sectors.
             * The largest value will correspond to the full radius and smaller values to
             * proportionally smaller radii.
             */
            _this.radiusKey = undefined;
            _this.radiusName = undefined;
            _this.radiusMin = undefined;
            _this.radiusMax = undefined;
            _this.calloutLabelKey = undefined;
            _this.calloutLabelName = undefined;
            _this.labelKey = undefined;
            _this.labelName = undefined;
            _this.sectorLabelKey = undefined;
            _this.sectorLabelName = undefined;
            _this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];
            _this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];
            _this.fillOpacity = 1;
            _this.strokeOpacity = 1;
            _this.lineDash = [0];
            _this.lineDashOffset = 0;
            _this.formatter = undefined;
            /**
             * The series rotation in degrees.
             */
            _this.rotation = 0;
            _this.outerRadiusOffset = 0;
            _this.outerRadiusRatio = 1;
            _this.innerRadiusOffset = 0;
            _this.innerRadiusRatio = 1;
            _this.strokeWidth = 1;
            _this.shadow = undefined;
            _this.highlightStyle = new HighlightStyle();
            _this.datumSectorRefs = new WeakMap();
            _this.backgroundGroup = _this.rootGroup.appendChild(new Group({
                name: _this.id + "-background",
                layer: true,
                zIndex: Layers.SERIES_BACKGROUND_ZINDEX,
            }));
            var pieCalloutLabels = new Group({ name: 'pieCalloutLabels' });
            var pieSectorLabels = new Group({ name: 'pieSectorLabels' });
            var innerLabels = new Group({ name: 'innerLabels' });
            _this.labelGroup.append(pieCalloutLabels);
            _this.labelGroup.append(pieSectorLabels);
            _this.labelGroup.append(innerLabels);
            _this.calloutLabelSelection = Selection.select(pieCalloutLabels).selectAll();
            _this.sectorLabelSelection = Selection.select(pieSectorLabels).selectAll();
            _this.innerLabelsSelection = Selection.select(innerLabels).selectAll();
            return _this;
        }
        Object.defineProperty(PieSeries.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (value) {
                var _a, _b;
                var oldTitle = this._title;
                if (oldTitle !== value) {
                    if (oldTitle) {
                        (_a = this.labelGroup) === null || _a === void 0 ? void 0 : _a.removeChild(oldTitle.node);
                    }
                    if (value) {
                        value.node.textBaseline = 'bottom';
                        (_b = this.labelGroup) === null || _b === void 0 ? void 0 : _b.appendChild(value.node);
                    }
                    this._title = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PieSeries.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (input) {
                this._data = input;
                this.processSeriesItemEnabled();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PieSeries.prototype, "innerCircle", {
            get: function () {
                return this._innerCircleConfig;
            },
            set: function (value) {
                var _a;
                var oldCircleCfg = this._innerCircleConfig;
                if (oldCircleCfg !== value) {
                    var oldNode = this._innerCircleNode;
                    var circle = void 0;
                    if (oldNode) {
                        this.backgroundGroup.removeChild(oldNode);
                    }
                    if (value) {
                        circle = new Circle();
                        circle.fill = value.fill;
                        circle.fillOpacity = (_a = value.fillOpacity) !== null && _a !== void 0 ? _a : 1;
                        this.backgroundGroup.appendChild(circle);
                    }
                    this._innerCircleConfig = value;
                    this._innerCircleNode = circle;
                }
            },
            enumerable: false,
            configurable: true
        });
        PieSeries.prototype.visibleChanged = function () {
            this.processSeriesItemEnabled();
        };
        PieSeries.prototype.processSeriesItemEnabled = function () {
            var _a = this, data = _a.data, visible = _a.visible;
            this.seriesItemEnabled = (data === null || data === void 0 ? void 0 : data.map(function () { return visible; })) || [];
        };
        PieSeries.prototype.getDomain = function (direction) {
            if (direction === ChartAxisDirection.X) {
                return this.angleScale.domain;
            }
            else {
                return this.radiusScale.domain;
            }
        };
        PieSeries.prototype.processData = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var _a, angleKey, radiusKey, seriesItemEnabled, angleScale, groupSelectionData, sectorFormatData, calloutLabel, sectorLabel, seriesId, data, angleData, angleDataTotal, angleDataRatios, labelFormatter, labelKey, sectorLabelKey, labelData, sectorLabelData, radiusData, getLabelFormatterParams, showValueDeprecationWarning_1, sectorLabelFormatter, _b, radiusMin, radiusMax, radii, min_1, max, delta_1, rotation, halfPi, datumIndex, quadrantTextOpts, end;
                var _this = this;
                return __generator$2(this, function (_c) {
                    _a = this, angleKey = _a.angleKey, radiusKey = _a.radiusKey, seriesItemEnabled = _a.seriesItemEnabled, angleScale = _a.angleScale, groupSelectionData = _a.groupSelectionData, sectorFormatData = _a.sectorFormatData, calloutLabel = _a.calloutLabel, sectorLabel = _a.sectorLabel, seriesId = _a.id;
                    data = angleKey && this.data ? this.data : [];
                    angleData = data.map(function (datum, index) { return (seriesItemEnabled[index] && Math.abs(+datum[angleKey])) || 0; });
                    angleDataTotal = angleData.reduce(function (a, b) { return a + b; }, 0);
                    angleDataRatios = (function () {
                        var sum = 0;
                        return angleData.map(function (datum) { return (sum += datum / angleDataTotal); });
                    })();
                    labelFormatter = calloutLabel.formatter;
                    labelKey = calloutLabel.enabled ? this.calloutLabelKey : undefined;
                    sectorLabelKey = sectorLabel.enabled ? this.sectorLabelKey : undefined;
                    labelData = [];
                    sectorLabelData = [];
                    radiusData = [];
                    getLabelFormatterParams = function (datum) {
                        return {
                            datum: datum,
                            angleKey: angleKey,
                            angleValue: datum[angleKey],
                            angleName: _this.angleName,
                            radiusKey: radiusKey,
                            radiusValue: radiusKey ? datum[radiusKey] : undefined,
                            radiusName: _this.radiusName,
                            labelKey: labelKey,
                            labelValue: labelKey ? datum[labelKey] : undefined,
                            labelName: _this.calloutLabelName,
                            calloutLabelKey: labelKey,
                            calloutLabelValue: labelKey ? datum[labelKey] : undefined,
                            calloutLabelName: _this.calloutLabelName,
                            sectorLabelKey: sectorLabelKey,
                            sectorLabelValue: sectorLabelKey ? datum[sectorLabelKey] : undefined,
                            sectorLabelName: _this.sectorLabelName,
                            seriesId: seriesId,
                        };
                    };
                    if (labelKey) {
                        if (labelFormatter) {
                            showValueDeprecationWarning_1 = function () {
                                return doOnce(function () {
                                    return console.warn('AG Charts - the use of { value } in the pie chart label formatter function is deprecated. Please use { datum, labelKey, ... } instead.');
                                }, 'deprecated use of "value" property in pie chart label formatter');
                            };
                            labelData = data.map(function (datum) {
                                var deprecatedValue = datum[labelKey];
                                var formatterParams = __assign$9(__assign$9({}, getLabelFormatterParams(datum)), { get value() {
                                        showValueDeprecationWarning_1();
                                        return deprecatedValue;
                                    },
                                    set value(v) {
                                        showValueDeprecationWarning_1();
                                        deprecatedValue = v;
                                    } });
                                return labelFormatter(formatterParams);
                            });
                        }
                        else {
                            labelData = data.map(function (datum) { return String(datum[labelKey]); });
                        }
                    }
                    sectorLabelFormatter = sectorLabel.formatter;
                    if (sectorLabelKey) {
                        if (sectorLabelFormatter) {
                            sectorLabelData = data.map(function (datum) {
                                var formatterParams = getLabelFormatterParams(datum);
                                return sectorLabelFormatter(formatterParams);
                            });
                        }
                        else {
                            sectorLabelData = data.map(function (datum) { return String(datum[sectorLabelKey]); });
                        }
                    }
                    if (radiusKey) {
                        _b = this, radiusMin = _b.radiusMin, radiusMax = _b.radiusMax;
                        radii = data.map(function (datum) { return Math.abs(datum[radiusKey]); });
                        min_1 = radiusMin !== null && radiusMin !== void 0 ? radiusMin : 0;
                        max = radiusMax ? radiusMax : Math.max.apply(Math, __spread$4(radii));
                        delta_1 = max - min_1;
                        radiusData = radii.map(function (value) { return (delta_1 ? (value - min_1) / delta_1 : 1); });
                    }
                    groupSelectionData.length = 0;
                    sectorFormatData.length = 0;
                    sectorFormatData.push.apply(sectorFormatData, __spread$4(data.map(function (datum, datumIdx) { return _this.getSectorFormat(datum, datumIdx, datumIdx, false); })));
                    rotation = toRadians(this.rotation);
                    halfPi = Math.PI / 2;
                    datumIndex = 0;
                    quadrantTextOpts = [
                        { textAlign: 'center', textBaseline: 'bottom' },
                        { textAlign: 'left', textBaseline: 'middle' },
                        { textAlign: 'center', textBaseline: 'hanging' },
                        { textAlign: 'right', textBaseline: 'middle' },
                    ];
                    end = 0;
                    angleDataRatios.forEach(function (start) {
                        if (isNaN(start)) {
                            return;
                        } // No sectors displayed - nothing to do.
                        var radius = radiusKey ? radiusData[datumIndex] : 1;
                        var startAngle = angleScale.convert(start) + rotation;
                        var endAngle = angleScale.convert(end) + rotation;
                        var midAngle = (startAngle + endAngle) / 2;
                        var span = Math.abs(endAngle - startAngle);
                        var midCos = Math.cos(midAngle);
                        var midSin = Math.sin(midAngle);
                        var labelMinAngle = toRadians(calloutLabel.minAngle);
                        var labelVisible = labelKey && span > labelMinAngle;
                        var midAngle180 = normalizeAngle180(midAngle);
                        // Split the circle into quadrants like so: ⊗
                        var quadrantStart = (-3 * Math.PI) / 4; // same as `normalizeAngle180(toRadians(-135))`
                        var quadrantOffset = midAngle180 - quadrantStart;
                        var quadrant = Math.floor(quadrantOffset / halfPi);
                        var quadrantIndex = mod(quadrant, quadrantTextOpts.length);
                        var _a = quadrantTextOpts[quadrantIndex], textAlign = _a.textAlign, textBaseline = _a.textBaseline;
                        var datum = data[datumIndex];
                        var itemId = datumIndex;
                        groupSelectionData.push({
                            series: _this,
                            datum: datum,
                            itemId: itemId,
                            index: datumIndex,
                            radius: radius,
                            startAngle: startAngle,
                            endAngle: endAngle,
                            midAngle: midAngle,
                            midCos: midCos,
                            midSin: midSin,
                            calloutLabel: labelVisible
                                ? {
                                    text: labelData[datumIndex],
                                    textAlign: textAlign,
                                    textBaseline: textBaseline,
                                    hidden: false,
                                }
                                : undefined,
                            sectorLabel: sectorLabelKey
                                ? {
                                    text: sectorLabelData[datumIndex],
                                }
                                : undefined,
                            sectorFormat: sectorFormatData[datumIndex],
                        });
                        datumIndex++;
                        end = start; // Update for next iteration.
                    });
                    return [2 /*return*/];
                });
            });
        };
        PieSeries.prototype.getSectorFormat = function (datum, itemId, index, highlight) {
            var _a, _b, _c, _d, _e;
            var _f = this, angleKey = _f.angleKey, radiusKey = _f.radiusKey, fills = _f.fills, strokes = _f.strokes, seriesFillOpacity = _f.fillOpacity, formatter = _f.formatter, seriesId = _f.id;
            var highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();
            var isDatumHighlighted = highlight && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && itemId === highlightedDatum.itemId;
            var highlightedStyle = isDatumHighlighted ? this.highlightStyle.item : null;
            var fill = (highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.fill) || fills[index % fills.length];
            var fillOpacity = (_b = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.fillOpacity) !== null && _b !== void 0 ? _b : seriesFillOpacity;
            var stroke = (highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.stroke) || strokes[index % strokes.length];
            var strokeWidth = (_c = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.strokeWidth) !== null && _c !== void 0 ? _c : this.getStrokeWidth(this.strokeWidth);
            var format;
            if (formatter) {
                format = formatter({
                    datum: datum,
                    angleKey: angleKey,
                    radiusKey: radiusKey,
                    fill: fill,
                    stroke: stroke,
                    strokeWidth: strokeWidth,
                    highlighted: isDatumHighlighted,
                    seriesId: seriesId,
                });
            }
            return {
                fill: (format === null || format === void 0 ? void 0 : format.fill) || fill,
                fillOpacity: (_d = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _d !== void 0 ? _d : fillOpacity,
                stroke: (format === null || format === void 0 ? void 0 : format.stroke) || stroke,
                strokeWidth: (_e = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _e !== void 0 ? _e : strokeWidth,
            };
        };
        PieSeries.prototype.createNodeData = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$2(this, function (_a) {
                    return [2 /*return*/, []];
                });
            });
        };
        PieSeries.prototype.getInnerRadius = function () {
            var _a = this, radius = _a.radius, innerRadiusRatio = _a.innerRadiusRatio, innerRadiusOffset = _a.innerRadiusOffset;
            var innerRadius = radius * (innerRadiusRatio !== null && innerRadiusRatio !== void 0 ? innerRadiusRatio : 1) + (innerRadiusOffset ? innerRadiusOffset : 0);
            if (innerRadius === radius || innerRadius < 0) {
                return 0;
            }
            return innerRadius;
        };
        PieSeries.prototype.getOuterRadius = function () {
            var _a = this, radius = _a.radius, outerRadiusRatio = _a.outerRadiusRatio, outerRadiusOffset = _a.outerRadiusOffset;
            var outerRadius = radius * (outerRadiusRatio !== null && outerRadiusRatio !== void 0 ? outerRadiusRatio : 1) + (outerRadiusOffset ? outerRadiusOffset : 0);
            if (outerRadius < 0) {
                return 0;
            }
            return outerRadius;
        };
        PieSeries.prototype.updateRadiusScale = function () {
            var innerRadius = this.getInnerRadius();
            var outerRadius = this.getOuterRadius();
            this.radiusScale.range = [innerRadius, outerRadius];
        };
        PieSeries.prototype.getTitleTranslationY = function () {
            var outerRadius = Math.max(0, this.radiusScale.range[1]);
            if (outerRadius === 0) {
                return NaN;
            }
            var titleOffset = 2;
            return -outerRadius - titleOffset;
        };
        PieSeries.prototype.update = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var title, dy;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            title = this.title;
                            this.updateRadiusScale();
                            this.rootGroup.translationX = this.centerX;
                            this.rootGroup.translationY = this.centerY;
                            if (title) {
                                dy = this.getTitleTranslationY();
                                if (isFinite(dy)) {
                                    title.node.visible = title.enabled;
                                    title.node.translationY = dy;
                                }
                                else {
                                    title.node.visible = false;
                                }
                            }
                            return [4 /*yield*/, this.updateSelections()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.updateNodes()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        PieSeries.prototype.updateSelections = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.updateGroupSelection()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        PieSeries.prototype.updateGroupSelection = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var _a, groupSelection, highlightSelection, calloutLabelSelection, sectorLabelSelection, innerLabelsSelection, update, updateCalloutLabels, enterCalloutLabels, updateSectorLabels, enterSectorLabels, updateInnerLabels, enterInnerLabels;
                var _this = this;
                return __generator$2(this, function (_b) {
                    _a = this, groupSelection = _a.groupSelection, highlightSelection = _a.highlightSelection, calloutLabelSelection = _a.calloutLabelSelection, sectorLabelSelection = _a.sectorLabelSelection, innerLabelsSelection = _a.innerLabelsSelection;
                    update = function (selection) {
                        var updateGroups = selection.setData(_this.groupSelectionData);
                        updateGroups.exit.remove();
                        var enterGroups = updateGroups.enter.append(Group);
                        enterGroups.append(Sector).each(function (node) { return (node.tag = PieNodeTag.Sector); });
                        return updateGroups.merge(enterGroups);
                    };
                    this.groupSelection = update(groupSelection);
                    this.highlightSelection = update(highlightSelection);
                    updateCalloutLabels = calloutLabelSelection.setData(this.groupSelectionData);
                    updateCalloutLabels.exit.remove();
                    enterCalloutLabels = updateCalloutLabels.enter.append(Group);
                    enterCalloutLabels.append(Line).each(function (node) {
                        node.tag = PieNodeTag.Callout;
                        node.pointerEvents = PointerEvents.None;
                    });
                    enterCalloutLabels.append(Text).each(function (node) {
                        node.tag = PieNodeTag.Label;
                        node.pointerEvents = PointerEvents.None;
                    });
                    this.calloutLabelSelection = updateCalloutLabels.merge(enterCalloutLabels);
                    updateSectorLabels = sectorLabelSelection.setData(this.groupSelectionData);
                    updateSectorLabels.exit.remove();
                    enterSectorLabels = updateSectorLabels.enter.append(Text);
                    enterSectorLabels.each(function (node) {
                        node.pointerEvents = PointerEvents.None;
                    });
                    this.sectorLabelSelection = updateSectorLabels.merge(enterSectorLabels);
                    updateInnerLabels = innerLabelsSelection.setData(this.innerLabels);
                    updateInnerLabels.exit.remove();
                    enterInnerLabels = updateInnerLabels.enter.append(Text);
                    enterInnerLabels.each(function (node) {
                        node.pointerEvents = PointerEvents.None;
                    });
                    this.innerLabelsSelection = updateInnerLabels.merge(enterInnerLabels);
                    return [2 /*return*/];
                });
            });
        };
        PieSeries.prototype.updateNodes = function () {
            var _a;
            return __awaiter$2(this, void 0, void 0, function () {
                var highlightedDatum, isVisible, radiusScale, innerRadius, updateSectorFn;
                var _this = this;
                return __generator$2(this, function (_b) {
                    highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();
                    isVisible = this.seriesItemEnabled.indexOf(true) >= 0;
                    this.rootGroup.visible = isVisible;
                    this.backgroundGroup.visible = isVisible;
                    this.contentGroup.visible = isVisible;
                    this.highlightGroup.visible = isVisible && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this;
                    this.labelGroup.visible = isVisible;
                    this.contentGroup.opacity = this.getOpacity();
                    this.updateInnerCircle();
                    radiusScale = this.radiusScale;
                    innerRadius = radiusScale.convert(0);
                    updateSectorFn = function (sector, datum, index, isDatumHighlighted) {
                        var radius = radiusScale.convert(datum.radius);
                        // Bring highlighted sector's parent group to front.
                        var sectorParent = sector.parent;
                        var sectorGrandParent = sectorParent === null || sectorParent === void 0 ? void 0 : sectorParent.parent;
                        if (isDatumHighlighted && sectorParent && sectorGrandParent) {
                            sectorGrandParent.removeChild(sectorParent);
                            sectorGrandParent.appendChild(sectorParent);
                        }
                        sector.innerRadius = Math.max(0, innerRadius);
                        sector.outerRadius = Math.max(0, radius);
                        sector.startAngle = datum.startAngle;
                        sector.endAngle = datum.endAngle;
                        var format = _this.getSectorFormat(datum.datum, datum.itemId, index, isDatumHighlighted);
                        sector.fill = format.fill;
                        sector.stroke = format.stroke;
                        sector.strokeWidth = format.strokeWidth;
                        sector.fillOpacity = format.fillOpacity;
                        sector.strokeOpacity = _this.strokeOpacity;
                        sector.lineDash = _this.lineDash;
                        sector.lineDashOffset = _this.lineDashOffset;
                        sector.fillShadow = _this.shadow;
                        sector.lineJoin = 'round';
                        _this.datumSectorRefs.set(datum, sector);
                    };
                    this.groupSelection
                        .selectByTag(PieNodeTag.Sector)
                        .each(function (node, datum, index) { return updateSectorFn(node, datum, index, false); });
                    this.highlightSelection.selectByTag(PieNodeTag.Sector).each(function (node, datum, index) {
                        var isDatumHighlighted = (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === _this && datum.itemId === highlightedDatum.itemId;
                        node.visible = isDatumHighlighted;
                        if (node.visible) {
                            updateSectorFn(node, datum, index, isDatumHighlighted);
                        }
                    });
                    this.updateCalloutLineNodes();
                    this.updateCalloutLabelNodes();
                    this.updateSectorLabelNodes();
                    this.updateInnerLabelNodes();
                    return [2 /*return*/];
                });
            });
        };
        PieSeries.prototype.updateCalloutLineNodes = function () {
            var _a = this, radiusScale = _a.radiusScale, calloutLine = _a.calloutLine;
            var calloutLength = calloutLine.length;
            var calloutStrokeWidth = calloutLine.strokeWidth;
            var calloutColors = calloutLine.colors || this.strokes;
            this.calloutLabelSelection.selectByTag(PieNodeTag.Callout).each(function (line, datum, index) {
                var radius = radiusScale.convert(datum.radius);
                var outerRadius = Math.max(0, radius);
                if (datum.calloutLabel && outerRadius !== 0 && !datum.calloutLabel.hidden) {
                    line.strokeWidth = calloutStrokeWidth;
                    line.stroke = calloutColors[index % calloutColors.length];
                    line.x1 = datum.midCos * outerRadius;
                    line.y1 = datum.midSin * outerRadius;
                    line.x2 = datum.midCos * (outerRadius + calloutLength);
                    line.y2 = datum.midSin * (outerRadius + calloutLength);
                    line.visible = true;
                }
                else {
                    line.visible = false;
                }
            });
        };
        PieSeries.prototype.getLabelOverflow = function (text, box) {
            var seriesBox = this.chart.getSeriesRect();
            var seriesLeft = seriesBox.x - this.centerX;
            var seriesRight = seriesBox.x + seriesBox.width - this.centerX;
            var seriesTop = seriesBox.y - this.centerY;
            var seriesBottom = seriesBox.y + seriesBox.height - this.centerY;
            var errPx = 1; // Prevents errors related to floating point calculations
            var visibleTextPart = 1;
            if (box.x + errPx < seriesLeft) {
                visibleTextPart = (box.x + box.width - seriesLeft) / box.width;
            }
            else if (box.x + box.width - errPx > seriesRight) {
                visibleTextPart = (seriesRight - box.x) / box.width;
            }
            var hasVerticalOverflow = box.y + errPx < seriesTop || box.y + box.height - errPx > seriesBottom;
            var textLength = Math.floor(text.length * visibleTextPart) - 1;
            return { visibleTextPart: visibleTextPart, textLength: textLength, hasVerticalOverflow: hasVerticalOverflow };
        };
        PieSeries.prototype.updateCalloutLabelNodes = function () {
            var _this = this;
            var _a = this, radiusScale = _a.radiusScale, calloutLabel = _a.calloutLabel, calloutLine = _a.calloutLine;
            var calloutLength = calloutLine.length;
            var offset = calloutLabel.offset, color = calloutLabel.color;
            var tempTextNode = new Text();
            this.calloutLabelSelection.selectByTag(PieNodeTag.Label).each(function (text, datum) {
                var label = datum.calloutLabel;
                var radius = radiusScale.convert(datum.radius);
                var outerRadius = Math.max(0, radius);
                if (!label || outerRadius === 0 || label.hidden) {
                    text.visible = false;
                    return;
                }
                var labelRadius = outerRadius + calloutLength + offset;
                var x = datum.midCos * labelRadius;
                var y = datum.midSin * labelRadius;
                // Detect text overflow
                _this.setTextDimensionalProps(tempTextNode, x, y, _this.calloutLabel, label);
                var box = tempTextNode.computeBBox();
                var _a = _this.getLabelOverflow(label.text, box), visibleTextPart = _a.visibleTextPart, textLength = _a.textLength, hasVerticalOverflow = _a.hasVerticalOverflow;
                var displayText = visibleTextPart === 1 ? label.text : label.text.substring(0, textLength) + "\u2026";
                _this.setTextDimensionalProps(text, x, y, _this.calloutLabel, __assign$9(__assign$9({}, label), { text: displayText }));
                text.fill = color;
                text.visible = !hasVerticalOverflow;
            });
        };
        PieSeries.prototype.computeLabelsBBox = function (options) {
            var _this = this;
            var _a = this, radiusScale = _a.radiusScale, calloutLabel = _a.calloutLabel, calloutLine = _a.calloutLine;
            var calloutLength = calloutLine.length;
            var offset = calloutLabel.offset;
            this.updateRadiusScale();
            var text = new Text();
            var textBoxes = this.groupSelectionData
                .map(function (datum) {
                var label = datum.calloutLabel;
                var radius = radiusScale.convert(datum.radius);
                var outerRadius = Math.max(0, radius);
                if (!label || outerRadius === 0) {
                    return null;
                }
                var labelRadius = outerRadius + calloutLength + offset;
                var x = datum.midCos * labelRadius;
                var y = datum.midSin * labelRadius;
                _this.setTextDimensionalProps(text, x, y, _this.calloutLabel, label);
                var box = text.computeBBox();
                if (options.hideWhenNecessary) {
                    var _a = _this.getLabelOverflow(label.text, box), textLength = _a.textLength, hasVerticalOverflow = _a.hasVerticalOverflow;
                    var isTooShort = textLength < 2;
                    if (hasVerticalOverflow || isTooShort) {
                        label.hidden = true;
                        return null;
                    }
                }
                label.hidden = false;
                return box;
            })
                .filter(function (box) { return box != null; });
            if (this.title && this.title.text) {
                var dy = this.getTitleTranslationY();
                if (isFinite(dy)) {
                    this.setTextDimensionalProps(text, 0, dy, this.title, {
                        text: this.title.text,
                        textBaseline: 'bottom',
                        textAlign: 'center',
                        hidden: false,
                    });
                    var box = text.computeBBox();
                    textBoxes.push(box);
                }
            }
            if (textBoxes.length === 0) {
                return null;
            }
            return BBox.merge(textBoxes);
        };
        PieSeries.prototype.setTextDimensionalProps = function (textNode, x, y, style, label) {
            var fontStyle = style.fontStyle, fontWeight = style.fontWeight, fontSize = style.fontSize, fontFamily = style.fontFamily;
            textNode.fontStyle = fontStyle;
            textNode.fontWeight = fontWeight;
            textNode.fontSize = fontSize;
            textNode.fontFamily = fontFamily;
            textNode.text = label.text;
            textNode.x = x;
            textNode.y = y;
            textNode.textAlign = label.textAlign;
            textNode.textBaseline = label.textBaseline;
        };
        PieSeries.prototype.updateSectorLabelNodes = function () {
            var _this = this;
            var radiusScale = this.radiusScale;
            var innerRadius = radiusScale.convert(0);
            var _a = this.sectorLabel, fontSize = _a.fontSize, fontStyle = _a.fontStyle, fontWeight = _a.fontWeight, fontFamily = _a.fontFamily, positionOffset = _a.positionOffset, positionRatio = _a.positionRatio, color = _a.color;
            var isDoughnut = innerRadius > 0;
            var singleVisibleSector = this.seriesItemEnabled.filter(Boolean).length === 1;
            this.sectorLabelSelection.each(function (text, datum) {
                var sectorLabel = datum.sectorLabel;
                var radius = radiusScale.convert(datum.radius);
                var outerRadius = Math.max(0, radius);
                var isTextVisible = false;
                if (sectorLabel && outerRadius !== 0) {
                    var labelRadius = innerRadius * (1 - positionRatio) + radius * positionRatio + positionOffset;
                    text.fill = color;
                    text.fontStyle = fontStyle;
                    text.fontWeight = fontWeight;
                    text.fontSize = fontSize;
                    text.fontFamily = fontFamily;
                    text.text = sectorLabel.text;
                    var shouldPutTextInCenter = !isDoughnut && singleVisibleSector;
                    if (shouldPutTextInCenter) {
                        text.x = 0;
                        text.y = 0;
                    }
                    else {
                        text.x = datum.midCos * labelRadius;
                        text.y = datum.midSin * labelRadius;
                    }
                    text.textAlign = 'center';
                    text.textBaseline = 'middle';
                    var sector = _this.datumSectorRefs.get(datum);
                    if (sector) {
                        var bbox = text.computeBBox();
                        var corners = [
                            [bbox.x, bbox.y],
                            [bbox.x + bbox.width, bbox.y],
                            [bbox.x + bbox.width, bbox.y + bbox.height],
                            [bbox.x, bbox.y + bbox.height],
                        ];
                        var startAngle = datum.startAngle, endAngle = datum.endAngle;
                        var sectorBounds_1 = { startAngle: startAngle, endAngle: endAngle, innerRadius: innerRadius, outerRadius: outerRadius };
                        if (corners.every(function (_a) {
                            var _b = __read$7(_a, 2), x = _b[0], y = _b[1];
                            return isPointInArc(x, y, sectorBounds_1);
                        })) {
                            isTextVisible = true;
                        }
                    }
                }
                text.visible = isTextVisible;
            });
        };
        PieSeries.prototype.updateInnerCircle = function () {
            var circle = this._innerCircleNode;
            if (!circle) {
                return;
            }
            var innerRadius = this.getInnerRadius();
            if (innerRadius === 0) {
                circle.size = 0;
            }
            else {
                var circleRadius = Math.min(innerRadius, this.getOuterRadius());
                var antiAliasingPadding = 1;
                circle.size = Math.ceil(circleRadius * 2 + antiAliasingPadding);
            }
        };
        PieSeries.prototype.updateInnerLabelNodes = function () {
            var textBBoxes = [];
            var margins = [];
            this.innerLabelsSelection.each(function (text, datum) {
                var fontStyle = datum.fontStyle, fontWeight = datum.fontWeight, fontSize = datum.fontSize, fontFamily = datum.fontFamily, color = datum.color;
                text.fontStyle = fontStyle;
                text.fontWeight = fontWeight;
                text.fontSize = fontSize;
                text.fontFamily = fontFamily;
                text.text = datum.text;
                text.x = 0;
                text.y = 0;
                text.fill = color;
                text.textAlign = 'center';
                text.textBaseline = 'alphabetic';
                textBBoxes.push(text.computeBBox());
                margins.push(datum.margin);
            });
            var getMarginTop = function (index) { return (index === 0 ? 0 : margins[index]); };
            var getMarginBottom = function (index) { return (index === margins.length - 1 ? 0 : margins[index]); };
            var totalHeight = textBBoxes.reduce(function (sum, bbox, i) {
                return sum + bbox.height + getMarginTop(i) + getMarginBottom(i);
            }, 0);
            var totalWidth = Math.max.apply(Math, __spread$4(textBBoxes.map(function (bbox) { return bbox.width; })));
            var innerRadius = this.getInnerRadius();
            var labelRadius = Math.sqrt(Math.pow(totalWidth / 2, 2) + Math.pow(totalHeight / 2, 2));
            var labelsVisible = labelRadius <= (innerRadius > 0 ? innerRadius : this.getOuterRadius());
            var textBottoms = [];
            for (var i = 0, prev = -totalHeight / 2; i < textBBoxes.length; i++) {
                var bbox = textBBoxes[i];
                var bottom = bbox.height + prev + getMarginTop(i);
                textBottoms.push(bottom);
                prev = bottom + getMarginBottom(i);
            }
            this.innerLabelsSelection.each(function (text, _datum, index) {
                text.y = textBottoms[index];
                text.visible = labelsVisible;
            });
        };
        PieSeries.prototype.getNodeClickEvent = function (event, datum) {
            return new PieSeriesNodeClickEvent(this.angleKey, this.calloutLabelKey, this.sectorLabelKey, this.radiusKey, event, datum, this);
        };
        PieSeries.prototype.getTooltipHtml = function (nodeDatum) {
            var angleKey = this.angleKey;
            if (!angleKey) {
                return '';
            }
            var _a = this, tooltip = _a.tooltip, angleName = _a.angleName, radiusKey = _a.radiusKey, radiusName = _a.radiusName, calloutLabelKey = _a.calloutLabelKey, sectorLabelKey = _a.sectorLabelKey, calloutLabelName = _a.calloutLabelName, sectorLabelName = _a.sectorLabelName, seriesId = _a.id;
            var tooltipRenderer = tooltip.renderer;
            var color = nodeDatum.sectorFormat.fill;
            var datum = nodeDatum.datum;
            var label = calloutLabelKey ? datum[calloutLabelKey] + ": " : '';
            var angleValue = datum[angleKey];
            var formattedAngleValue = typeof angleValue === 'number' ? toFixed(angleValue) : angleValue.toString();
            var title = this.title ? this.title.text : undefined;
            var content = label + formattedAngleValue;
            var defaults = {
                title: title,
                backgroundColor: color,
                content: content,
            };
            if (tooltipRenderer) {
                return toTooltipHtml(tooltipRenderer({
                    datum: datum,
                    angleKey: angleKey,
                    angleValue: angleValue,
                    angleName: angleName,
                    radiusKey: radiusKey,
                    radiusValue: radiusKey ? datum[radiusKey] : undefined,
                    radiusName: radiusName,
                    labelKey: calloutLabelKey,
                    labelName: calloutLabelName,
                    calloutLabelKey: calloutLabelKey,
                    calloutLabelName: calloutLabelName,
                    sectorLabelKey: sectorLabelKey,
                    sectorLabelName: sectorLabelName,
                    title: title,
                    color: color,
                    seriesId: seriesId,
                }), defaults);
            }
            return toTooltipHtml(defaults);
        };
        PieSeries.prototype.getLegendData = function () {
            var _this = this;
            var _a = this, calloutLabelKey = _a.calloutLabelKey, data = _a.data, sectorFormatData = _a.sectorFormatData;
            if (data && data.length && calloutLabelKey) {
                var id_1 = this.id;
                var legendData_1 = [];
                var titleText_1 = this.title && this.title.showInLegend && this.title.text;
                data.forEach(function (datum, index) {
                    var labelParts = [];
                    titleText_1 && labelParts.push(titleText_1);
                    labelParts.push(String(datum[calloutLabelKey]));
                    legendData_1.push({
                        id: id_1,
                        itemId: index,
                        seriesId: id_1,
                        enabled: _this.seriesItemEnabled[index],
                        label: {
                            text: labelParts.join(' - '),
                        },
                        marker: {
                            fill: sectorFormatData[index].fill,
                            stroke: sectorFormatData[index].stroke,
                            fillOpacity: _this.fillOpacity,
                            strokeOpacity: _this.strokeOpacity,
                        },
                    });
                });
                return legendData_1;
            }
            return [];
        };
        PieSeries.prototype.toggleSeriesItem = function (itemId, enabled) {
            this.seriesItemEnabled[itemId] = enabled;
            this.nodeDataRefresh = true;
        };
        PieSeries.className = 'PieSeries';
        PieSeries.type = 'pie';
        __decorate$6([
            DeprecatedAndRenamedTo('calloutLabel')
        ], PieSeries.prototype, "label", void 0);
        __decorate$6([
            DeprecatedAndRenamedTo('calloutLine')
        ], PieSeries.prototype, "callout", void 0);
        __decorate$6([
            Validate(STRING)
        ], PieSeries.prototype, "angleKey", void 0);
        __decorate$6([
            Validate(STRING)
        ], PieSeries.prototype, "angleName", void 0);
        __decorate$6([
            Validate(OPT_STRING)
        ], PieSeries.prototype, "radiusKey", void 0);
        __decorate$6([
            Validate(OPT_STRING)
        ], PieSeries.prototype, "radiusName", void 0);
        __decorate$6([
            Validate(OPT_NUMBER(0))
        ], PieSeries.prototype, "radiusMin", void 0);
        __decorate$6([
            Validate(OPT_NUMBER(0))
        ], PieSeries.prototype, "radiusMax", void 0);
        __decorate$6([
            Validate(OPT_STRING)
        ], PieSeries.prototype, "calloutLabelKey", void 0);
        __decorate$6([
            Validate(OPT_STRING)
        ], PieSeries.prototype, "calloutLabelName", void 0);
        __decorate$6([
            DeprecatedAndRenamedTo('calloutLabelKey')
        ], PieSeries.prototype, "labelKey", void 0);
        __decorate$6([
            DeprecatedAndRenamedTo('calloutLabelName')
        ], PieSeries.prototype, "labelName", void 0);
        __decorate$6([
            Validate(OPT_STRING)
        ], PieSeries.prototype, "sectorLabelKey", void 0);
        __decorate$6([
            Validate(OPT_STRING)
        ], PieSeries.prototype, "sectorLabelName", void 0);
        __decorate$6([
            Validate(COLOR_STRING_ARRAY)
        ], PieSeries.prototype, "fills", void 0);
        __decorate$6([
            Validate(COLOR_STRING_ARRAY)
        ], PieSeries.prototype, "strokes", void 0);
        __decorate$6([
            Validate(NUMBER(0, 1))
        ], PieSeries.prototype, "fillOpacity", void 0);
        __decorate$6([
            Validate(NUMBER(0, 1))
        ], PieSeries.prototype, "strokeOpacity", void 0);
        __decorate$6([
            Validate(OPT_LINE_DASH)
        ], PieSeries.prototype, "lineDash", void 0);
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeries.prototype, "lineDashOffset", void 0);
        __decorate$6([
            Validate(OPT_FUNCTION)
        ], PieSeries.prototype, "formatter", void 0);
        __decorate$6([
            Validate(NUMBER(-360, 360))
        ], PieSeries.prototype, "rotation", void 0);
        __decorate$6([
            Validate(NUMBER())
        ], PieSeries.prototype, "outerRadiusOffset", void 0);
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeries.prototype, "outerRadiusRatio", void 0);
        __decorate$6([
            Validate(NUMBER())
        ], PieSeries.prototype, "innerRadiusOffset", void 0);
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeries.prototype, "innerRadiusRatio", void 0);
        __decorate$6([
            Validate(NUMBER(0))
        ], PieSeries.prototype, "strokeWidth", void 0);
        return PieSeries;
    }(PolarSeries));

    var __extends$f = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var HierarchySeries = /** @class */ (function (_super) {
        __extends$f(HierarchySeries, _super);
        function HierarchySeries() {
            return _super.call(this, { pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH] }) || this;
        }
        HierarchySeries.prototype.getLabelData = function () {
            return [];
        };
        return HierarchySeries;
    }(Series));

    var __extends$e = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DropShadow = /** @class */ (function (_super) {
        __extends$e(DropShadow, _super);
        function DropShadow() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.enabled = true;
            _this.color = 'rgba(0, 0, 0, 0.5)';
            _this.xOffset = 0;
            _this.yOffset = 0;
            _this.blur = 5;
            return _this;
        }
        __decorate$5([
            ValidateAndChangeDetection({
                validatePredicate: BOOLEAN,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], DropShadow.prototype, "enabled", void 0);
        __decorate$5([
            ValidateAndChangeDetection({
                validatePredicate: COLOR_STRING,
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], DropShadow.prototype, "color", void 0);
        __decorate$5([
            ValidateAndChangeDetection({
                validatePredicate: NUMBER(),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], DropShadow.prototype, "xOffset", void 0);
        __decorate$5([
            ValidateAndChangeDetection({
                validatePredicate: NUMBER(),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], DropShadow.prototype, "yOffset", void 0);
        __decorate$5([
            ValidateAndChangeDetection({
                validatePredicate: NUMBER(0),
                sceneChangeDetectionOpts: { redraw: RedrawType.MAJOR },
            })
        ], DropShadow.prototype, "blur", void 0);
        return DropShadow;
    }(ChangeDetectable));

    function number (a, b) {
        a = +a;
        b = +b;
        return function (t) { return a * (1 - t) + b * t; };
    }

    function interpolateColor (a, b) {
        if (typeof a === 'string') {
            try {
                a = Color.fromString(a);
            }
            catch (e) {
                a = Color.fromArray([0, 0, 0]);
            }
        }
        if (typeof b === 'string') {
            try {
                b = Color.fromString(b);
            }
            catch (e) {
                b = Color.fromArray([0, 0, 0]);
            }
        }
        var red = number(a.r, b.r);
        var green = number(a.g, b.g);
        var blue = number(a.b, b.b);
        var alpha = number(a.a, b.a);
        return function (t) {
            return Color.fromArray([red(t), green(t), blue(t), alpha(t)]).toRgbaString();
        };
    }

    var ColorScale = /** @class */ (function () {
        function ColorScale() {
            this.domain = [0, 1];
            this._range = ['red', 'green'];
            this.parsedRange = this._range.map(function (v) { return Color.fromString(v); });
        }
        Object.defineProperty(ColorScale.prototype, "range", {
            get: function () {
                return this._range;
            },
            set: function (values) {
                this._range = values;
                this.parsedRange = values.map(function (v) { return Color.fromString(v); });
            },
            enumerable: false,
            configurable: true
        });
        ColorScale.prototype.convert = function (x) {
            var _a = this, domain = _a.domain, range = _a.range, parsedRange = _a.parsedRange;
            var d0 = domain[0];
            var d1 = domain[domain.length - 1];
            var r0 = range[0];
            var r1 = range[range.length - 1];
            if (x <= d0) {
                return r0;
            }
            if (x >= d1) {
                return r1;
            }
            var index;
            var q;
            if (domain.length === 2) {
                var t = (x - d0) / (d1 - d0);
                var step = 1 / (range.length - 1);
                index = range.length <= 2 ? 0 : Math.min(Math.floor(t * (range.length - 1)), range.length - 2);
                q = (t - index * step) / step;
            }
            else {
                for (index = 0; index < domain.length - 2; index++) {
                    if (x < domain[index + 1]) {
                        break;
                    }
                }
                var a = domain[index];
                var b = domain[index + 1];
                q = (x - a) / (b - a);
            }
            var c0 = parsedRange[index];
            var c1 = parsedRange[index + 1];
            return interpolateColor(c0, c1)(q);
        };
        return ColorScale;
    }());

    var __extends$d = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$8 = (undefined && undefined.__assign) || function () {
        __assign$8 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$8.apply(this, arguments);
    };
    var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$1 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var TreemapSeriesTooltip = /** @class */ (function (_super) {
        __extends$d(TreemapSeriesTooltip, _super);
        function TreemapSeriesTooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.renderer = undefined;
            return _this;
        }
        __decorate$4([
            Validate(OPT_FUNCTION)
        ], TreemapSeriesTooltip.prototype, "renderer", void 0);
        return TreemapSeriesTooltip;
    }(SeriesTooltip));
    var TreemapSeriesNodeClickEvent = /** @class */ (function (_super) {
        __extends$d(TreemapSeriesNodeClickEvent, _super);
        function TreemapSeriesNodeClickEvent(labelKey, sizeKey, colorKey, nativeEvent, datum, series) {
            var _this = _super.call(this, nativeEvent, datum, series) || this;
            _this.labelKey = labelKey;
            _this.sizeKey = sizeKey;
            _this.colorKey = colorKey;
            return _this;
        }
        return TreemapSeriesNodeClickEvent;
    }(SeriesNodeClickEvent));
    var TreemapSeriesLabel = /** @class */ (function (_super) {
        __extends$d(TreemapSeriesLabel, _super);
        function TreemapSeriesLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.padding = 10;
            return _this;
        }
        __decorate$4([
            Validate(NUMBER(0))
        ], TreemapSeriesLabel.prototype, "padding", void 0);
        return TreemapSeriesLabel;
    }(Label));
    var TreemapValueLabel = /** @class */ (function () {
        function TreemapValueLabel() {
            this.style = (function () {
                var label = new Label();
                label.color = 'white';
                return label;
            })();
        }
        __decorate$4([
            Validate(OPT_STRING)
        ], TreemapValueLabel.prototype, "key", void 0);
        __decorate$4([
            Validate(OPT_STRING)
        ], TreemapValueLabel.prototype, "name", void 0);
        __decorate$4([
            Validate(OPT_FUNCTION)
        ], TreemapValueLabel.prototype, "formatter", void 0);
        return TreemapValueLabel;
    }());
    var TextNodeTag;
    (function (TextNodeTag) {
        TextNodeTag[TextNodeTag["Name"] = 0] = "Name";
        TextNodeTag[TextNodeTag["Value"] = 1] = "Value";
    })(TextNodeTag || (TextNodeTag = {}));
    function getTextSize(text, style) {
        return HdpiCanvas.getTextSize(text, [style.fontWeight, style.fontSize + "px", style.fontFamily].join(' '));
    }
    function validateColor(color) {
        if (typeof color === 'string' && !Color.validColorString(color)) {
            var fallbackColor_1 = 'black';
            doOnce(function () {
                return console.warn("AG Charts - Invalid Treemap tile colour string \"" + color + "\". Affected treemap tiles will be coloured " + fallbackColor_1 + ".");
            }, 'treemap node color invalid');
            return 'black';
        }
        return color;
    }
    var TreemapTextHighlightStyle = /** @class */ (function () {
        function TreemapTextHighlightStyle() {
            this.color = 'black';
        }
        __decorate$4([
            Validate(OPT_COLOR_STRING)
        ], TreemapTextHighlightStyle.prototype, "color", void 0);
        return TreemapTextHighlightStyle;
    }());
    var TreemapHighlightStyle = /** @class */ (function (_super) {
        __extends$d(TreemapHighlightStyle, _super);
        function TreemapHighlightStyle() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.text = new TreemapTextHighlightStyle();
            return _this;
        }
        return TreemapHighlightStyle;
    }(HighlightStyle));
    var TreemapSeries = /** @class */ (function (_super) {
        __extends$d(TreemapSeries, _super);
        function TreemapSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.groupSelection = Selection.select(_this.contentGroup).selectAll();
            _this.highlightSelection = Selection.select(_this.highlightGroup).selectAll();
            _this.title = (function () {
                var label = new TreemapSeriesLabel();
                label.color = 'white';
                label.fontWeight = 'bold';
                label.fontSize = 12;
                label.fontFamily = 'Verdana, sans-serif';
                label.padding = 15;
                return label;
            })();
            _this.subtitle = (function () {
                var label = new TreemapSeriesLabel();
                label.color = 'white';
                label.fontSize = 9;
                label.fontFamily = 'Verdana, sans-serif';
                label.padding = 13;
                return label;
            })();
            _this.labels = {
                large: (function () {
                    var label = new Label();
                    label.color = 'white';
                    label.fontWeight = 'bold';
                    label.fontSize = 18;
                    return label;
                })(),
                medium: (function () {
                    var label = new Label();
                    label.color = 'white';
                    label.fontWeight = 'bold';
                    label.fontSize = 14;
                    return label;
                })(),
                small: (function () {
                    var label = new Label();
                    label.color = 'white';
                    label.fontWeight = 'bold';
                    label.fontSize = 10;
                    return label;
                })(),
                value: new TreemapValueLabel(),
            };
            _this.nodePadding = 2;
            _this.labelKey = 'label';
            _this.sizeKey = 'size';
            _this.colorKey = 'color';
            _this.colorDomain = [-5, 5];
            _this.colorRange = ['#cb4b3f', '#6acb64'];
            _this.groupFill = '#272931';
            _this.groupStroke = 'black';
            _this.groupStrokeWidth = 1;
            _this.tileStroke = 'black';
            _this.tileStrokeWidth = 1;
            _this.gradient = true;
            _this.formatter = undefined;
            _this.colorName = 'Change';
            _this.rootName = 'Root';
            _this.highlightGroups = true;
            _this.tileShadow = new DropShadow();
            _this.labelShadow = new DropShadow();
            _this.tooltip = new TreemapSeriesTooltip();
            _this.highlightStyle = new TreemapHighlightStyle();
            return _this;
        }
        TreemapSeries.prototype.getNodePaddingTop = function (nodeDatum, bbox) {
            var _a = this, title = _a.title, subtitle = _a.subtitle, nodePadding = _a.nodePadding;
            var label = nodeDatum.label;
            if (nodeDatum.isLeaf || !label || nodeDatum.depth === 0) {
                return nodePadding;
            }
            var font = nodeDatum.depth > 1 ? subtitle : title;
            var textSize = getTextSize(label, font);
            var heightRatioThreshold = 3;
            if (font.fontSize > bbox.width / heightRatioThreshold || font.fontSize > bbox.height / heightRatioThreshold) {
                return nodePadding;
            }
            if (textSize.height >= bbox.height) {
                return nodePadding;
            }
            return textSize.height + nodePadding * 2;
        };
        TreemapSeries.prototype.getNodePadding = function (nodeDatum, bbox) {
            var nodePadding = this.nodePadding;
            var top = this.getNodePaddingTop(nodeDatum, bbox);
            return {
                top: top,
                right: nodePadding,
                bottom: nodePadding,
                left: nodePadding,
            };
        };
        /**
         * Squarified Treemap algorithm
         * https://www.win.tue.nl/~vanwijk/stm.pdf
         */
        TreemapSeries.prototype.squarify = function (nodeDatum, bbox, outputNodesBoxes) {
            if (outputNodesBoxes === void 0) { outputNodesBoxes = new Map(); }
            var targetTileAspectRatio = 1; // The width and height will tend to this ratio
            var padding = this.getNodePadding(nodeDatum, bbox);
            outputNodesBoxes.set(nodeDatum, bbox);
            var width = bbox.width - padding.left - padding.right;
            var height = bbox.height - padding.top - padding.bottom;
            if (width <= 0 || height <= 0 || nodeDatum.value <= 0) {
                return outputNodesBoxes;
            }
            var stackSum = 0;
            var startIndex = 0;
            var minRatioDiff = Infinity;
            var partitionSum = nodeDatum.value;
            var children = nodeDatum.children;
            var partition = new BBox(bbox.x + padding.left, bbox.y + padding.top, width, height);
            for (var i = 0; i < children.length; i++) {
                var value = children[i].value;
                var firstValue = children[startIndex].value;
                var isVertical_1 = partition.width < partition.height;
                stackSum += value;
                var partThickness = isVertical_1 ? partition.height : partition.width;
                var partLength = isVertical_1 ? partition.width : partition.height;
                var firstTileLength = (partLength * firstValue) / stackSum;
                var stackThickness = (partThickness * stackSum) / partitionSum;
                var ratio = Math.max(firstTileLength, stackThickness) / Math.min(firstTileLength, stackThickness);
                var diff = Math.abs(targetTileAspectRatio - ratio);
                if (diff < minRatioDiff) {
                    minRatioDiff = diff;
                    continue;
                }
                // Go one step back and process the best match
                stackSum -= value;
                stackThickness = (partThickness * stackSum) / partitionSum;
                var start_1 = isVertical_1 ? partition.x : partition.y;
                for (var j = startIndex; j < i; j++) {
                    var child = children[j];
                    var x = isVertical_1 ? start_1 : partition.x;
                    var y = isVertical_1 ? partition.y : start_1;
                    var length_1 = (partLength * child.value) / stackSum;
                    var width_1 = isVertical_1 ? length_1 : stackThickness;
                    var height_1 = isVertical_1 ? stackThickness : length_1;
                    var childBox = new BBox(x, y, width_1, height_1);
                    this.squarify(child, childBox, outputNodesBoxes);
                    partitionSum -= child.value;
                    start_1 += length_1;
                }
                if (isVertical_1) {
                    partition.y += stackThickness;
                    partition.height -= stackThickness;
                }
                else {
                    partition.x += stackThickness;
                    partition.width -= stackThickness;
                }
                startIndex = i;
                stackSum = 0;
                minRatioDiff = Infinity;
                i--;
            }
            // Process remaining space
            var isVertical = partition.width < partition.height;
            var start = isVertical ? partition.x : partition.y;
            for (var i = startIndex; i < children.length; i++) {
                var x = isVertical ? start : partition.x;
                var y = isVertical ? partition.y : start;
                var part = children[i].value / partitionSum;
                var width_2 = partition.width * (isVertical ? part : 1);
                var height_2 = partition.height * (isVertical ? 1 : part);
                var childBox = new BBox(x, y, width_2, height_2);
                this.squarify(children[i], childBox, outputNodesBoxes);
                start += isVertical ? width_2 : height_2;
            }
            return outputNodesBoxes;
        };
        TreemapSeries.prototype.processData = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a, data, sizeKey, labelKey, colorKey, colorDomain, colorRange, groupFill, colorScale, createTreeNodeDatum;
                var _this = this;
                return __generator$1(this, function (_b) {
                    if (!this.data) {
                        return [2 /*return*/];
                    }
                    _a = this, data = _a.data, sizeKey = _a.sizeKey, labelKey = _a.labelKey, colorKey = _a.colorKey, colorDomain = _a.colorDomain, colorRange = _a.colorRange, groupFill = _a.groupFill;
                    colorScale = new ColorScale();
                    colorScale.domain = colorDomain;
                    colorScale.range = colorRange;
                    createTreeNodeDatum = function (datum, depth, parent) {
                        var _a;
                        if (depth === void 0) { depth = 0; }
                        var label = (labelKey && datum[labelKey]) || '';
                        var colorScaleValue = colorKey ? (_a = datum[colorKey]) !== null && _a !== void 0 ? _a : depth : depth;
                        colorScaleValue = validateColor(colorScaleValue);
                        var isLeaf = !datum.children;
                        var fill = typeof colorScaleValue === 'string'
                            ? colorScaleValue
                            : isLeaf || !groupFill
                                ? colorScale.convert(colorScaleValue)
                                : groupFill;
                        var nodeDatum = {
                            datum: datum,
                            depth: depth,
                            parent: parent,
                            value: 0,
                            label: label,
                            fill: fill,
                            series: _this,
                            isLeaf: isLeaf,
                            children: [],
                        };
                        if (isLeaf) {
                            nodeDatum.value = sizeKey ? datum[sizeKey] : 1;
                        }
                        else {
                            datum.children.forEach(function (child) {
                                var childNodeDatum = createTreeNodeDatum(child, depth + 1, nodeDatum);
                                var value = childNodeDatum.value;
                                if (isNaN(value) || !isFinite(value) || value === 0) {
                                    return;
                                }
                                nodeDatum.value += value;
                                nodeDatum.children.push(childNodeDatum);
                            });
                            nodeDatum.children.sort(function (a, b) {
                                return b.value - a.value;
                            });
                        }
                        return nodeDatum;
                    };
                    this.dataRoot = createTreeNodeDatum(data);
                    return [2 /*return*/];
                });
            });
        };
        TreemapSeries.prototype.createNodeData = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, []];
                });
            });
        };
        TreemapSeries.prototype.update = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.updateSelections()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.updateNodes()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        TreemapSeries.prototype.updateSelections = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a, chart, dataRoot, seriesRect, descendants, traverse, _b, groupSelection, highlightSelection, update;
                return __generator$1(this, function (_c) {
                    if (!this.nodeDataRefresh) {
                        return [2 /*return*/];
                    }
                    this.nodeDataRefresh = false;
                    _a = this, chart = _a.chart, dataRoot = _a.dataRoot;
                    if (!chart || !dataRoot) {
                        return [2 /*return*/];
                    }
                    seriesRect = chart.getSeriesRect();
                    if (!seriesRect) {
                        return [2 /*return*/];
                    }
                    descendants = [];
                    traverse = function (datum) {
                        var _a;
                        descendants.push(datum);
                        (_a = datum.children) === null || _a === void 0 ? void 0 : _a.forEach(traverse);
                    };
                    traverse(this.dataRoot);
                    _b = this, groupSelection = _b.groupSelection, highlightSelection = _b.highlightSelection;
                    update = function (selection) {
                        var updateGroups = selection.setData(descendants);
                        updateGroups.exit.remove();
                        var enterGroups = updateGroups.enter.append(Group);
                        enterGroups.append(Rect);
                        enterGroups.append(Text).each(function (node) { return (node.tag = TextNodeTag.Name); });
                        enterGroups.append(Text).each(function (node) { return (node.tag = TextNodeTag.Value); });
                        return updateGroups.merge(enterGroups);
                    };
                    this.groupSelection = update(groupSelection);
                    this.highlightSelection = update(highlightSelection);
                    return [2 /*return*/];
                });
            });
        };
        TreemapSeries.prototype.isDatumHighlighted = function (datum) {
            var _a;
            var highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();
            return datum === highlightedDatum && (datum.isLeaf || this.highlightGroups);
        };
        TreemapSeries.prototype.getTileFormat = function (datum, isHighlighted) {
            var _a;
            var formatter = this.formatter;
            if (!formatter) {
                return {};
            }
            var _b = this, gradient = _b.gradient, colorKey = _b.colorKey, labelKey = _b.labelKey, sizeKey = _b.sizeKey, tileStroke = _b.tileStroke, tileStrokeWidth = _b.tileStrokeWidth, groupStroke = _b.groupStroke, groupStrokeWidth = _b.groupStrokeWidth;
            var stroke = datum.isLeaf ? tileStroke : groupStroke;
            var strokeWidth = datum.isLeaf ? tileStrokeWidth : groupStrokeWidth;
            return formatter({
                seriesId: this.id,
                datum: datum.datum,
                depth: datum.depth,
                parent: (_a = datum.parent) === null || _a === void 0 ? void 0 : _a.datum,
                colorKey: colorKey,
                sizeKey: sizeKey,
                labelKey: labelKey,
                fill: datum.fill,
                stroke: stroke,
                strokeWidth: strokeWidth,
                gradient: gradient,
                highlighted: isHighlighted,
            });
        };
        TreemapSeries.prototype.updateNodes = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a, gradient, _b, _c, highlightedFill, highlightedFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, highlightedTextColor, tileStroke, tileStrokeWidth, groupStroke, groupStrokeWidth, tileShadow, labelShadow, seriesRect, boxes, labelMeta, updateRectFn, updateLabelFn, updateValueFn;
                var _this = this;
                return __generator$1(this, function (_d) {
                    if (!this.chart) {
                        return [2 /*return*/];
                    }
                    _a = this, gradient = _a.gradient, _b = _a.highlightStyle, _c = _b.item, highlightedFill = _c.fill, highlightedFillOpacity = _c.fillOpacity, highlightedStroke = _c.stroke, highlightedDatumStrokeWidth = _c.strokeWidth, highlightedTextColor = _b.text.color, tileStroke = _a.tileStroke, tileStrokeWidth = _a.tileStrokeWidth, groupStroke = _a.groupStroke, groupStrokeWidth = _a.groupStrokeWidth, tileShadow = _a.tileShadow, labelShadow = _a.labelShadow;
                    seriesRect = this.chart.getSeriesRect();
                    boxes = this.squarify(this.dataRoot, new BBox(0, 0, seriesRect.width, seriesRect.height));
                    labelMeta = this.buildLabelMeta(boxes);
                    updateRectFn = function (rect, datum, isDatumHighlighted) {
                        var _a, _b, _c, _d, _e, _f;
                        var box = boxes.get(datum);
                        if (!box) {
                            rect.visible = false;
                            return;
                        }
                        var fill = isDatumHighlighted && highlightedFill !== undefined ? highlightedFill : datum.fill;
                        var fillOpacity = (_a = (isDatumHighlighted ? highlightedFillOpacity : 1)) !== null && _a !== void 0 ? _a : 1;
                        var stroke = isDatumHighlighted && highlightedStroke !== undefined
                            ? highlightedStroke
                            : datum.isLeaf
                                ? tileStroke
                                : groupStroke;
                        var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined
                            ? highlightedDatumStrokeWidth
                            : datum.isLeaf
                                ? tileStrokeWidth
                                : groupStrokeWidth;
                        var format = _this.getTileFormat(datum, isDatumHighlighted);
                        rect.fill = validateColor((_b = format === null || format === void 0 ? void 0 : format.fill) !== null && _b !== void 0 ? _b : fill);
                        rect.fillOpacity = (_c = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _c !== void 0 ? _c : fillOpacity;
                        rect.stroke = validateColor((_d = format === null || format === void 0 ? void 0 : format.stroke) !== null && _d !== void 0 ? _d : stroke);
                        rect.strokeWidth = (_e = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _e !== void 0 ? _e : strokeWidth;
                        rect.gradient = (_f = format === null || format === void 0 ? void 0 : format.gradient) !== null && _f !== void 0 ? _f : gradient;
                        rect.fillShadow = tileShadow;
                        rect.crisp = true;
                        rect.x = box.x;
                        rect.y = box.y;
                        rect.width = box.width;
                        rect.height = box.height;
                        rect.visible = true;
                        if (isDatumHighlighted && !datum.isLeaf) {
                            var padding = _this.getNodePadding(datum, box);
                            var x0 = box.x + padding.left;
                            var x1 = box.x + box.width - padding.right;
                            var y0 = box.y + padding.top;
                            var y1 = box.y + box.height - padding.bottom;
                            if (rect.clipPath) {
                                rect.clipPath.clear();
                            }
                            else {
                                rect.clipPath = new Path2D();
                            }
                            rect.clipMode = 'punch-out';
                            rect.clipPath.moveTo(x0, y0);
                            rect.clipPath.lineTo(x1, y0);
                            rect.clipPath.lineTo(x1, y1);
                            rect.clipPath.lineTo(x0, y1);
                            rect.clipPath.lineTo(x0, y0);
                            rect.clipPath.closePath();
                        }
                    };
                    this.groupSelection.selectByClass(Rect).each(function (rect, datum) { return updateRectFn(rect, datum, false); });
                    this.highlightSelection.selectByClass(Rect).each(function (rect, datum) {
                        var isDatumHighlighted = _this.isDatumHighlighted(datum);
                        rect.visible = isDatumHighlighted;
                        if (rect.visible) {
                            updateRectFn(rect, datum, isDatumHighlighted);
                        }
                    });
                    updateLabelFn = function (text, datum, highlighted) {
                        var meta = labelMeta.get(datum);
                        var label = meta === null || meta === void 0 ? void 0 : meta.label;
                        if (!label) {
                            text.visible = false;
                            return;
                        }
                        text.text = label.text;
                        text.fontFamily = label.style.fontFamily;
                        text.fontSize = label.style.fontSize;
                        text.fontWeight = label.style.fontWeight;
                        text.fill = highlighted ? highlightedTextColor !== null && highlightedTextColor !== void 0 ? highlightedTextColor : label.style.color : label.style.color;
                        text.fillShadow = highlighted ? undefined : labelShadow;
                        text.textAlign = label.hAlign;
                        text.textBaseline = label.vAlign;
                        text.x = label.x;
                        text.y = label.y;
                        text.visible = true;
                    };
                    this.groupSelection
                        .selectByTag(TextNodeTag.Name)
                        .each(function (text, datum) { return updateLabelFn(text, datum, false); });
                    this.highlightSelection.selectByTag(TextNodeTag.Name).each(function (text, datum) {
                        var isDatumHighlighted = _this.isDatumHighlighted(datum);
                        text.visible = isDatumHighlighted;
                        if (text.visible) {
                            updateLabelFn(text, datum, isDatumHighlighted);
                        }
                    });
                    updateValueFn = function (text, datum, highlighted) {
                        var meta = labelMeta.get(datum);
                        var label = meta === null || meta === void 0 ? void 0 : meta.value;
                        if (!label) {
                            text.visible = false;
                            return;
                        }
                        text.text = label.text;
                        text.fontFamily = label.style.fontFamily;
                        text.fontSize = label.style.fontSize;
                        text.fontWeight = label.style.fontWeight;
                        text.fill = highlighted ? highlightedTextColor !== null && highlightedTextColor !== void 0 ? highlightedTextColor : label.style.color : label.style.color;
                        text.fillShadow = highlighted ? undefined : labelShadow;
                        text.textAlign = label.hAlign;
                        text.textBaseline = label.vAlign;
                        text.x = label.x;
                        text.y = label.y;
                        text.visible = true;
                    };
                    this.groupSelection
                        .selectByTag(TextNodeTag.Value)
                        .each(function (text, datum) { return updateValueFn(text, datum, false); });
                    this.highlightSelection.selectByTag(TextNodeTag.Value).each(function (text, datum) {
                        var isDatumHighlighted = _this.isDatumHighlighted(datum);
                        text.visible = isDatumHighlighted;
                        if (text.visible) {
                            updateValueFn(text, datum, isDatumHighlighted);
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        TreemapSeries.prototype.buildLabelMeta = function (boxes) {
            var _a = this, labels = _a.labels, title = _a.title, subtitle = _a.subtitle, nodePadding = _a.nodePadding, labelKey = _a.labelKey;
            var labelMeta = new Map();
            boxes.forEach(function (box, datum) {
                if (!labelKey || datum.depth === 0) {
                    return;
                }
                var labelText = datum.isLeaf ? datum.label : datum.label.toUpperCase();
                var labelStyle;
                if (datum.isLeaf) {
                    // Choose the font size that fits
                    labelStyle =
                        [labels.large, labels.medium, labels.small].find(function (s) {
                            var _a = getTextSize(labelText, s), width = _a.width, height = _a.height;
                            return width < box.width && height < box.height;
                        }) || labels.small;
                }
                else if (datum.depth === 1) {
                    labelStyle = title;
                }
                else {
                    labelStyle = subtitle;
                }
                var labelSize = getTextSize(labelText, labelStyle);
                var availTextWidth = box.width - 2 * nodePadding;
                var availTextHeight = box.height - 2 * nodePadding;
                var minSizeRatio = 3;
                if (labelStyle.fontSize > box.width / minSizeRatio || labelStyle.fontSize > box.height / minSizeRatio) {
                    // Avoid labels on too small tiles
                    return;
                }
                // Crop text if not enough space
                if (labelSize.width > availTextWidth) {
                    var textLength = Math.floor((labelText.length * availTextWidth) / labelSize.width) - 1;
                    labelText = labelText.substring(0, textLength) + "\u2026";
                }
                var valueConfig = labels.value;
                var valueStyle = valueConfig.style;
                var valueMargin = (labelStyle.fontSize + valueStyle.fontSize) / 8;
                var valueText = String(datum.isLeaf
                    ? valueConfig.formatter
                        ? valueConfig.formatter({ datum: datum.datum })
                        : valueConfig.key
                            ? datum.datum[valueConfig.key]
                            : ''
                    : '');
                var valueSize = getTextSize(valueText, valueStyle);
                var hasValueText = valueText &&
                    valueSize.width < availTextWidth &&
                    valueSize.height + labelSize.height + valueMargin < availTextHeight;
                labelMeta.set(datum, {
                    label: __assign$8({ text: labelText, style: labelStyle }, (datum.isLeaf
                        ? {
                            hAlign: 'center',
                            vAlign: 'middle',
                            x: box.x + box.width / 2,
                            y: box.y + box.height / 2 - (hasValueText ? valueSize.height / 2 + valueMargin / 2 : 0),
                        }
                        : {
                            hAlign: 'left',
                            vAlign: 'top',
                            x: box.x + nodePadding,
                            y: box.y + nodePadding,
                        })),
                    value: hasValueText
                        ? {
                            text: valueText,
                            style: valueStyle,
                            hAlign: 'center',
                            vAlign: 'middle',
                            x: box.x + box.width / 2,
                            y: box.y + box.height / 2 + labelSize.height / 2 + valueMargin / 2,
                        }
                        : undefined,
                });
            });
            return labelMeta;
        };
        TreemapSeries.prototype.getDomain = function (_direction) {
            return [0, 1];
        };
        TreemapSeries.prototype.getNodeClickEvent = function (event, datum) {
            return new TreemapSeriesNodeClickEvent(this.labelKey, this.sizeKey, this.colorKey, event, datum, this);
        };
        TreemapSeries.prototype.getTooltipHtml = function (nodeDatum) {
            var _a;
            if (!this.highlightGroups && !nodeDatum.isLeaf) {
                return '';
            }
            var _b = this, tooltip = _b.tooltip, sizeKey = _b.sizeKey, labelKey = _b.labelKey, colorKey = _b.colorKey, rootName = _b.rootName, seriesId = _b.id, labels = _b.labels;
            var datum = nodeDatum.datum;
            var tooltipRenderer = tooltip.renderer;
            var title = nodeDatum.depth ? datum[labelKey] : rootName || datum[labelKey];
            var content = '';
            var format = this.getTileFormat(nodeDatum, false);
            var color = (format === null || format === void 0 ? void 0 : format.fill) || nodeDatum.fill || 'gray';
            var valueKey = labels.value.key;
            var valueFormatter = labels.value.formatter;
            if (valueKey || valueFormatter) {
                var valueText = '';
                if (valueFormatter) {
                    valueText = valueFormatter({ datum: datum });
                }
                else {
                    var value = datum[valueKey];
                    if (typeof value === 'number' && isFinite(value)) {
                        valueText = toFixed(value);
                    }
                }
                if (valueText) {
                    if (labels.value.name) {
                        content += "<b>" + labels.value.name + ":</b> ";
                    }
                    content += valueText;
                }
            }
            var defaults = {
                title: title,
                backgroundColor: color,
                content: content,
            };
            if (tooltipRenderer) {
                return toTooltipHtml(tooltipRenderer({
                    datum: nodeDatum.datum,
                    parent: (_a = nodeDatum.parent) === null || _a === void 0 ? void 0 : _a.datum,
                    depth: nodeDatum.depth,
                    sizeKey: sizeKey,
                    labelKey: labelKey,
                    colorKey: colorKey,
                    title: title,
                    color: color,
                    seriesId: seriesId,
                }), defaults);
            }
            return toTooltipHtml(defaults);
        };
        TreemapSeries.prototype.getLegendData = function () {
            // Override point for subclasses.
            return [];
        };
        TreemapSeries.className = 'TreemapSeries';
        TreemapSeries.type = 'treemap';
        __decorate$4([
            Validate(NUMBER(0))
        ], TreemapSeries.prototype, "nodePadding", void 0);
        __decorate$4([
            Validate(STRING)
        ], TreemapSeries.prototype, "labelKey", void 0);
        __decorate$4([
            Validate(OPT_STRING)
        ], TreemapSeries.prototype, "sizeKey", void 0);
        __decorate$4([
            Validate(OPT_STRING)
        ], TreemapSeries.prototype, "colorKey", void 0);
        __decorate$4([
            Validate(NUMBER_ARRAY)
        ], TreemapSeries.prototype, "colorDomain", void 0);
        __decorate$4([
            Validate(COLOR_STRING_ARRAY)
        ], TreemapSeries.prototype, "colorRange", void 0);
        __decorate$4([
            Validate(OPT_STRING)
        ], TreemapSeries.prototype, "groupFill", void 0);
        __decorate$4([
            Validate(OPT_COLOR_STRING)
        ], TreemapSeries.prototype, "groupStroke", void 0);
        __decorate$4([
            Validate(OPT_NUMBER(0))
        ], TreemapSeries.prototype, "groupStrokeWidth", void 0);
        __decorate$4([
            Validate(OPT_COLOR_STRING)
        ], TreemapSeries.prototype, "tileStroke", void 0);
        __decorate$4([
            Validate(OPT_NUMBER(0))
        ], TreemapSeries.prototype, "tileStrokeWidth", void 0);
        __decorate$4([
            Validate(BOOLEAN)
        ], TreemapSeries.prototype, "gradient", void 0);
        __decorate$4([
            Validate(OPT_FUNCTION)
        ], TreemapSeries.prototype, "formatter", void 0);
        __decorate$4([
            Validate(STRING)
        ], TreemapSeries.prototype, "colorName", void 0);
        __decorate$4([
            Validate(STRING)
        ], TreemapSeries.prototype, "rootName", void 0);
        __decorate$4([
            Validate(OPT_BOOLEAN)
        ], TreemapSeries.prototype, "highlightGroups", void 0);
        return TreemapSeries;
    }(HierarchySeries));

    var __extends$c = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$6 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var identity = function (x) { return x; };
    var LogScale = /** @class */ (function (_super) {
        __extends$c(LogScale, _super);
        function LogScale() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = 'log';
            _this.domain = [1, 10];
            _this.base = 10;
            _this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'base'];
            _this.baseLog = identity;
            _this.basePow = identity;
            _this.log = function (x) {
                return _this.domain[0] >= 0 ? _this.baseLog(x) : -_this.baseLog(-x);
            };
            _this.pow = function (x) {
                return _this.domain[0] >= 0 ? _this.basePow(x) : -_this.basePow(-x);
            };
            return _this;
        }
        LogScale.prototype.transform = function (x) {
            return this.domain[0] >= 0 ? Math.log(x) : -Math.log(-x);
        };
        LogScale.prototype.transformInvert = function (x) {
            return this.domain[0] >= 0 ? Math.exp(x) : -Math.exp(-x);
        };
        LogScale.prototype.update = function () {
            if (!this.domain || this.domain.length < 2) {
                return;
            }
            this.updateLogFn();
            this.updatePowFn();
            if (this.nice) {
                this.updateNiceDomain();
            }
        };
        LogScale.prototype.updateLogFn = function () {
            var base = this.base;
            var log;
            if (base === 10) {
                log = Math.log10;
            }
            else if (base === Math.E) {
                log = Math.log;
            }
            else if (base === 2) {
                log = Math.log2;
            }
            else {
                var logBase_1 = Math.log(base);
                log = function (x) { return Math.log(x) / logBase_1; };
            }
            this.baseLog = log;
        };
        LogScale.prototype.updatePowFn = function () {
            var base = this.base;
            var pow;
            if (base === 10) {
                pow = LogScale.pow10;
            }
            else if (base === Math.E) {
                pow = Math.exp;
            }
            else {
                pow = function (x) { return Math.pow(base, x); };
            }
            this.basePow = pow;
        };
        LogScale.prototype.updateNiceDomain = function () {
            var _a = __read$6(this.domain, 2), d0 = _a[0], d1 = _a[1];
            var n0 = this.pow(Math.floor(this.log(d0)));
            var n1 = this.pow(Math.ceil(this.log(d1)));
            this.niceDomain = [n0, n1];
        };
        LogScale.pow10 = function (x) {
            return x >= 0 ? Math.pow(10, x) : 1 / Math.pow(10, -x);
        };
        LogScale.prototype.ticks = function () {
            var _this = this;
            var _a;
            var count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : 10;
            if (!this.domain || this.domain.length < 2 || count < 1) {
                return [];
            }
            this.refresh();
            var base = this.base;
            var _b = __read$6(this.getDomain(), 2), d0 = _b[0], d1 = _b[1];
            var p0 = this.log(d0);
            var p1 = this.log(d1);
            var isBaseInteger = base % 1 === 0;
            var isDiffLarge = p1 - p0 >= count;
            if (!isBaseInteger || isDiffLarge) {
                // Returns [10^1, 10^2, 10^3, 10^4, ...]
                return generateTicks(p0, p1, Math.min(p1 - p0, count)).map(function (x) { return _this.pow(x); });
            }
            var ticks = [];
            var isPositive = d0 > 0;
            p0 = Math.floor(p0) - 1;
            p1 = Math.round(p1) + 1;
            for (var p = p0; p <= p1; p++) {
                for (var k = 1; k < base; k++) {
                    var q = isPositive ? k : base - k + 1;
                    var t = this.pow(p) * q;
                    if (t >= d0 && t <= d1) {
                        ticks.push(t);
                    }
                }
            }
            return ticks;
        };
        LogScale.prototype.tickFormat = function (_a) {
            var _this = this;
            var count = _a.count, specifier = _a.specifier;
            var base = this.base;
            if (specifier == null) {
                specifier = (base === 10 ? '.0e' : ',');
            }
            if (typeof specifier !== 'function') {
                specifier = format(specifier);
            }
            if (count === Infinity) {
                return specifier;
            }
            if (count == null) {
                count = 10;
            }
            var k = Math.max(1, (base * count) / this.ticks().length);
            return function (d) {
                var i = d / _this.pow(Math.round(_this.log(d)));
                if (i * base < base - 0.5) {
                    i *= base;
                }
                return i <= k ? specifier(d) : '';
            };
        };
        __decorate$3([
            Validate(NUMBER(0))
        ], LogScale.prototype, "base", void 0);
        return LogScale;
    }(ContinuousScale));

    function calculateNiceSecondaryAxis(domain, primaryTickCount) {
        // Make secondary axis domain nice using strict tick count, matching the tick count from the primary axis.
        // This is to make the secondary axis grid lines/ tick positions align with the ones from the primary axis.
        var start = Math.floor(domain[0]);
        var stop = domain[1];
        start = calculateNiceStart(start, stop, primaryTickCount);
        var step = getTickStep(start, stop, primaryTickCount);
        var segments = primaryTickCount - 1;
        stop = start + segments * step;
        var d = [start, stop];
        var ticks = getTicks(start, step, primaryTickCount);
        return [d, ticks];
    }
    function calculateNiceStart(a, b, count) {
        var rawStep = Math.abs(b - a) / (count - 1);
        var order = Math.floor(Math.log10(rawStep));
        var magnitude = Math.pow(10, order);
        return Math.floor(a / magnitude) * magnitude;
    }
    function getTicks(start, step, count) {
        // power of the step will be negative if the step is a fraction (between 0 and 1)
        var stepPower = Math.floor(Math.log10(step));
        var fractionDigits = step > 0 && step < 1 ? Math.abs(stepPower) : 0;
        var f = Math.pow(10, fractionDigits);
        var ticks = new NumericTicks(fractionDigits);
        for (var i = 0; i < count; i++) {
            var tick = start + step * i;
            ticks[i] = Math.round(tick * f) / f;
        }
        return ticks;
    }
    function getTickStep(start, stop, count) {
        var segments = count - 1;
        var rawStep = (stop - start) / segments;
        return calculateNextNiceStep(rawStep);
    }
    function calculateNextNiceStep(rawStep) {
        var order = Math.floor(Math.log10(rawStep));
        var magnitude = Math.pow(10, order);
        // Make order 1
        var step = (rawStep / magnitude) * 10;
        if (step > 0 && step <= 1) {
            return magnitude / 10;
        }
        if (step > 1 && step <= 2) {
            return (2 * magnitude) / 10;
        }
        if (step > 1 && step <= 5) {
            return (5 * magnitude) / 10;
        }
        if (step > 5 && step <= 10) {
            return (10 * magnitude) / 10;
        }
        if (step > 10 && step <= 20) {
            return (20 * magnitude) / 10;
        }
        if (step > 20 && step <= 40) {
            return (40 * magnitude) / 10;
        }
        if (step > 40 && step <= 50) {
            return (50 * magnitude) / 10;
        }
        if (step > 50 && step <= 100) {
            return (100 * magnitude) / 10;
        }
        return step;
    }

    var __extends$b = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$5 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    function NUMBER_OR_NAN(min, max) {
        // Can be NaN or finite number
        var message = "expecting a finite Number" + ((min !== undefined ? ', more than or equal to ' + min : '') +
            (max !== undefined ? ', less than or equal to ' + max : ''));
        return predicateWithMessage(function (v) {
            return typeof v === 'number' &&
                (isNaN(v) || Number.isFinite(v)) &&
                (min !== undefined ? v >= min : true) &&
                (max !== undefined ? v <= max : true);
        }, message);
    }
    var NumberAxis = /** @class */ (function (_super) {
        __extends$b(NumberAxis, _super);
        function NumberAxis(scale) {
            if (scale === void 0) { scale = new LinearScale(); }
            var _this = _super.call(this, scale) || this;
            _this.min = NaN;
            _this.max = NaN;
            scale.strictClampByDefault = true;
            return _this;
        }
        NumberAxis.prototype.normaliseDataDomain = function (d) {
            var _a = this, min = _a.min, max = _a.max;
            if (d.length > 2) {
                d = extent(d, isContinuous, Number) || [NaN, NaN];
            }
            if (!isNaN(min)) {
                d = [min, d[1]];
            }
            if (!isNaN(max)) {
                d = [d[0], max];
            }
            if (d[0] > d[1]) {
                d = [];
            }
            return d;
        };
        NumberAxis.prototype.formatDatum = function (datum) {
            if (typeof datum === 'number') {
                return datum.toFixed(2);
            }
            else {
                doOnce(function () {
                    return console.warn('AG Charts - Data contains Date objects which are being plotted against a number axis, please only use a number axis for numbers.');
                }, "number axis config used with Date objects");
                return String(datum);
            }
        };
        NumberAxis.prototype.updateSecondaryAxisTicks = function (primaryTickCount) {
            if (this.dataDomain == null) {
                throw new Error('AG Charts - dataDomain not calculated, cannot perform tick calculation.');
            }
            var _a = __read$5(calculateNiceSecondaryAxis(this.dataDomain, primaryTickCount !== null && primaryTickCount !== void 0 ? primaryTickCount : 0), 2), d = _a[0], ticks = _a[1];
            this.scale.nice = false;
            this.scale.domain = d;
            this.scale.update();
            return ticks;
        };
        NumberAxis.className = 'NumberAxis';
        NumberAxis.type = 'number';
        __decorate$2([
            Validate(AND(NUMBER_OR_NAN(), LESS_THAN('max')))
        ], NumberAxis.prototype, "min", void 0);
        __decorate$2([
            Validate(AND(NUMBER_OR_NAN(), GREATER_THAN('min')))
        ], NumberAxis.prototype, "max", void 0);
        return NumberAxis;
    }(ChartAxis));

    var __extends$a = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var LogAxis = /** @class */ (function (_super) {
        __extends$a(LogAxis, _super);
        function LogAxis() {
            var _this = _super.call(this, new LogScale()) || this;
            _this.scale.strictClampByDefault = true;
            return _this;
        }
        Object.defineProperty(LogAxis.prototype, "base", {
            get: function () {
                return this.scale.base;
            },
            set: function (value) {
                this.scale.base = value;
            },
            enumerable: false,
            configurable: true
        });
        LogAxis.className = 'LogAxis';
        LogAxis.type = 'log';
        return LogAxis;
    }(NumberAxis));

    var DEFAULT_CARTESIAN_CHART_OVERRIDES = {
        type: 'cartesian',
        axes: [
            {
                type: NumberAxis.type,
                position: 'left',
            },
            {
                type: CategoryAxis.type,
                position: 'bottom',
            },
        ],
    };
    var DEFAULT_BAR_CHART_OVERRIDES = {
        axes: [
            {
                type: 'number',
                position: 'bottom',
            },
            {
                type: 'category',
                position: 'left',
            },
        ],
    };
    var DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES = {
        axes: [
            {
                type: 'number',
                position: 'bottom',
            },
            {
                type: 'number',
                position: 'left',
            },
        ],
    };

    var __assign$7 = (undefined && undefined.__assign) || function () {
        __assign$7 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$7.apply(this, arguments);
    };
    function transform(input, transforms) {
        var result = {};
        for (var p in input) {
            var t = transforms[p] || (function (x) { return x; });
            result[p] = t(input[p], input);
        }
        return result;
    }
    function is2dArray(input) {
        return input != null && input instanceof Array && input[0] instanceof Array;
    }
    function yNamesMapping(p, src) {
        if (p == null) {
            return {};
        }
        if (!(p instanceof Array)) {
            return p;
        }
        var yKeys = src.yKeys;
        if (yKeys == null || is2dArray(yKeys)) {
            throw new Error('AG Charts - yNames and yKeys mismatching configuration.');
        }
        var result = {};
        yKeys.forEach(function (k, i) {
            result[k] = p[i];
        });
        return result;
    }
    function yKeysMapping(p, src) {
        if (p == null) {
            return [[]];
        }
        if (is2dArray(p)) {
            return p;
        }
        return src.grouped ? p.map(function (v) { return [v]; }) : [p];
    }
    function barSeriesTransform(options) {
        var result = __assign$7({}, options);
        delete result['yKey'];
        delete result['yName'];
        return transform(result, {
            yNames: yNamesMapping,
            yKeys: yKeysMapping,
        });
    }
    function identityTransform(input) {
        return input;
    }
    var SERIES_TRANSFORMS = {
        area: identityTransform,
        bar: barSeriesTransform,
        column: barSeriesTransform,
        histogram: identityTransform,
        line: identityTransform,
        pie: identityTransform,
        scatter: identityTransform,
        treemap: identityTransform,
    };
    function applySeriesTransform(options) {
        var type = options.type;
        var transform = SERIES_TRANSFORMS[type || 'line'];
        return transform(options);
    }

    var __assign$6 = (undefined && undefined.__assign) || function () {
        __assign$6 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$6.apply(this, arguments);
    };
    var __read$4 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var palette$8 = {
        fills: ['#f3622d', '#fba71b', '#57b757', '#41a9c9', '#4258c9', '#9a42c8', '#c84164', '#888888'],
        strokes: ['#aa4520', '#b07513', '#3d803d', '#2d768d', '#2e3e8d', '#6c2e8c', '#8c2d46', '#5f5f5f'],
    };
    function arrayMerge(_target, source, _options) {
        return source;
    }
    function isMergeableObject(value) {
        return defaultIsMergeableObject(value) && !(value instanceof TimeInterval);
    }
    var mergeOptions = { arrayMerge: arrayMerge, isMergeableObject: isMergeableObject };
    var BOLD = 'bold';
    var INSIDE = 'inside';
    var RIGHT = 'right';
    var ChartTheme = /** @class */ (function () {
        function ChartTheme(options) {
            options = deepMerge({}, options || {}, mergeOptions);
            var _a = options.overrides, overrides = _a === void 0 ? null : _a, _b = options.palette, palette = _b === void 0 ? null : _b;
            var defaults = this.createChartConfigPerChartType(this.getDefaults());
            if (overrides) {
                var common = overrides.common, cartesian = overrides.cartesian, polar = overrides.polar, hierarchy = overrides.hierarchy;
                var applyOverrides = function (type, seriesTypes, overrideOpts) {
                    if (overrideOpts) {
                        defaults[type] = deepMerge(defaults[type], overrideOpts, mergeOptions);
                        seriesTypes.forEach(function (seriesType) {
                            defaults[seriesType] = deepMerge(defaults[seriesType], overrideOpts, mergeOptions);
                        });
                    }
                };
                applyOverrides('common', Object.keys(defaults), common);
                applyOverrides('cartesian', ChartTheme.cartesianSeriesTypes, cartesian);
                applyOverrides('polar', ChartTheme.polarSeriesTypes, polar);
                applyOverrides('hierarchy', ChartTheme.hierarchySeriesTypes, hierarchy);
                ChartTheme.seriesTypes.forEach(function (seriesType) {
                    var _a;
                    var chartConfig = overrides[seriesType];
                    if (chartConfig) {
                        if (chartConfig.series) {
                            chartConfig.series = (_a = {}, _a[seriesType] = chartConfig.series, _a);
                        }
                        defaults[seriesType] = deepMerge(defaults[seriesType], chartConfig, mergeOptions);
                    }
                });
            }
            this.palette = palette !== null && palette !== void 0 ? palette : this.getPalette();
            this.config = Object.freeze(defaults);
        }
        ChartTheme.prototype.getPalette = function () {
            return palette$8;
        };
        ChartTheme.getAxisDefaults = function () {
            return {
                top: {},
                right: {},
                bottom: {},
                left: {},
                thickness: 0,
                title: {
                    enabled: false,
                    text: 'Axis Title',
                    fontStyle: undefined,
                    fontWeight: BOLD,
                    fontSize: 12,
                    fontFamily: this.fontFamily,
                    color: 'rgb(70, 70, 70)',
                },
                label: {
                    fontStyle: undefined,
                    fontWeight: undefined,
                    fontSize: 12,
                    fontFamily: this.fontFamily,
                    padding: 5,
                    rotation: undefined,
                    color: 'rgb(87, 87, 87)',
                    formatter: undefined,
                    autoRotate: false,
                    avoidCollisions: true,
                },
                line: {
                    width: 1,
                    color: 'rgb(195, 195, 195)',
                },
                tick: {
                    width: 1,
                    size: 6,
                    color: 'rgb(195, 195, 195)',
                },
                gridStyle: [
                    {
                        stroke: 'rgb(219, 219, 219)',
                        lineDash: [4, 2],
                    },
                ],
                crossLines: {
                    enabled: false,
                    fill: 'rgb(187,221,232)',
                    stroke: 'rgb(70,162,192)',
                    strokeWidth: 1,
                    label: {
                        enabled: false,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: this.fontFamily,
                        padding: 5,
                        color: 'rgb(87, 87, 87)',
                        rotation: undefined,
                    },
                },
            };
        };
        ChartTheme.getSeriesDefaults = function () {
            return {
                tooltip: {
                    enabled: true,
                    renderer: undefined,
                },
                visible: true,
                showInLegend: true,
                cursor: 'default',
                highlightStyle: {
                    item: {
                        fill: 'yellow',
                        fillOpacity: 1,
                    },
                    series: {
                        dimOpacity: 1,
                    },
                    text: {
                        color: 'black',
                    },
                },
            };
        };
        ChartTheme.getBarSeriesDefaults = function () {
            return __assign$6(__assign$6({}, this.getSeriesDefaults()), { flipXY: false, fillOpacity: 1, strokeOpacity: 1, xKey: '', xName: '', normalizedTo: undefined, strokeWidth: 1, lineDash: [0], lineDashOffset: 0, label: {
                    enabled: false,
                    fontStyle: undefined,
                    fontWeight: undefined,
                    fontSize: 12,
                    fontFamily: this.fontFamily,
                    color: 'rgb(70, 70, 70)',
                    formatter: undefined,
                    placement: INSIDE,
                }, shadow: {
                    enabled: false,
                    color: 'rgba(0, 0, 0, 0.5)',
                    xOffset: 3,
                    yOffset: 3,
                    blur: 5,
                } });
        };
        ChartTheme.getLineSeriesDefaults = function () {
            var seriesDefaults = this.getSeriesDefaults();
            return __assign$6(__assign$6({}, seriesDefaults), { tooltip: __assign$6(__assign$6({}, seriesDefaults.tooltip), { format: undefined }) });
        };
        ChartTheme.getCartesianSeriesMarkerDefaults = function () {
            return {
                enabled: true,
                shape: 'circle',
                size: 6,
                maxSize: 30,
                strokeWidth: 1,
                formatter: undefined,
            };
        };
        ChartTheme.getChartDefaults = function () {
            return {
                background: {
                    visible: true,
                    fill: 'white',
                },
                padding: {
                    top: 20,
                    right: 20,
                    bottom: 20,
                    left: 20,
                },
                title: {
                    enabled: false,
                    text: 'Title',
                    fontStyle: undefined,
                    fontWeight: BOLD,
                    fontSize: 16,
                    fontFamily: this.fontFamily,
                    color: 'rgb(70, 70, 70)',
                },
                subtitle: {
                    enabled: false,
                    text: 'Subtitle',
                    fontStyle: undefined,
                    fontWeight: undefined,
                    fontSize: 12,
                    fontFamily: this.fontFamily,
                    color: 'rgb(140, 140, 140)',
                },
                legend: {
                    enabled: true,
                    position: RIGHT,
                    spacing: 20,
                    item: {
                        paddingX: 16,
                        paddingY: 8,
                        marker: {
                            shape: undefined,
                            size: 15,
                            strokeWidth: 1,
                            padding: 8,
                        },
                        label: {
                            color: 'black',
                            fontStyle: undefined,
                            fontWeight: undefined,
                            fontSize: 12,
                            fontFamily: this.fontFamily,
                            formatter: undefined,
                        },
                    },
                    reverseOrder: false,
                    pagination: {
                        marker: {
                            size: 12,
                        },
                        activeStyle: {
                            fill: 'rgb(70, 70, 70)',
                        },
                        inactiveStyle: {
                            fill: 'rgb(219, 219, 219)',
                        },
                        highlightStyle: {
                            fill: 'rgb(70, 70, 70)',
                        },
                        label: {
                            color: 'rgb(70, 70, 70)',
                        },
                    },
                },
                tooltip: {
                    enabled: true,
                    tracking: true,
                    delay: 0,
                    class: DEFAULT_TOOLTIP_CLASS,
                },
            };
        };
        ChartTheme.prototype.createChartConfigPerChartType = function (config) {
            var typeToAliases = {
                cartesian: ChartTheme.cartesianSeriesTypes,
                polar: ChartTheme.polarSeriesTypes,
                hierarchy: ChartTheme.hierarchySeriesTypes,
                groupedCategory: [],
            };
            Object.entries(typeToAliases).forEach(function (_a) {
                var _b = __read$4(_a, 2), type = _b[0], aliases = _b[1];
                aliases.forEach(function (alias) {
                    if (!config[alias]) {
                        config[alias] = deepMerge({}, config[type], mergeOptions);
                    }
                });
            });
            return config;
        };
        ChartTheme.prototype.getConfig = function (path, defaultValue) {
            var value = getValue(this.config, path, defaultValue);
            if (Array.isArray(value)) {
                return deepMerge([], value, mergeOptions);
            }
            if (isObject(value)) {
                return deepMerge({}, value, mergeOptions);
            }
            return value;
        };
        /**
         * Meant to be overridden in subclasses. For example:
         * ```
         *     getDefaults() {
         *         const subclassDefaults = { ... };
         *         return this.mergeWithParentDefaults(subclassDefaults);
         *     }
         * ```
         */
        ChartTheme.prototype.getDefaults = function () {
            return deepMerge({}, ChartTheme.defaults, mergeOptions);
        };
        ChartTheme.prototype.mergeWithParentDefaults = function (parentDefaults, defaults) {
            return deepMerge(parentDefaults, defaults, mergeOptions);
        };
        ChartTheme.fontFamily = 'Verdana, sans-serif';
        ChartTheme.cartesianDefaults = __assign$6(__assign$6({}, ChartTheme.getChartDefaults()), { axes: {
                number: __assign$6({}, ChartTheme.getAxisDefaults()),
                log: __assign$6(__assign$6({}, ChartTheme.getAxisDefaults()), { base: 10 }),
                category: __assign$6(__assign$6({}, ChartTheme.getAxisDefaults()), { groupPaddingInner: 0.1, label: __assign$6(__assign$6({}, ChartTheme.getAxisDefaults().label), { autoRotate: true }) }),
                groupedCategory: __assign$6({}, ChartTheme.getAxisDefaults()),
                time: __assign$6({}, ChartTheme.getAxisDefaults()),
            }, series: {
                column: __assign$6(__assign$6({}, ChartTheme.getBarSeriesDefaults()), { flipXY: false }),
                bar: __assign$6(__assign$6({}, ChartTheme.getBarSeriesDefaults()), { flipXY: true }),
                line: __assign$6(__assign$6({}, ChartTheme.getLineSeriesDefaults()), { title: undefined, xKey: '', xName: '', yKey: '', yName: '', strokeWidth: 2, strokeOpacity: 1, lineDash: [0], lineDashOffset: 0, marker: __assign$6(__assign$6({}, ChartTheme.getCartesianSeriesMarkerDefaults()), { fillOpacity: 1, strokeOpacity: 1 }), label: {
                        enabled: false,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                        formatter: undefined,
                    } }),
                scatter: __assign$6(__assign$6({}, ChartTheme.getSeriesDefaults()), { title: undefined, xKey: '', yKey: '', sizeKey: undefined, labelKey: undefined, xName: '', yName: '', sizeName: 'Size', labelName: 'Label', marker: __assign$6({}, ChartTheme.getCartesianSeriesMarkerDefaults()), label: {
                        enabled: false,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                    } }),
                area: __assign$6(__assign$6({}, ChartTheme.getSeriesDefaults()), { xKey: '', xName: '', normalizedTo: undefined, fillOpacity: 0.8, strokeOpacity: 1, strokeWidth: 2, lineDash: [0], lineDashOffset: 0, shadow: {
                        enabled: false,
                        color: 'rgba(0, 0, 0, 0.5)',
                        xOffset: 3,
                        yOffset: 3,
                        blur: 5,
                    }, marker: __assign$6(__assign$6({}, ChartTheme.getCartesianSeriesMarkerDefaults()), { fillOpacity: 1, strokeOpacity: 1, enabled: false }), label: {
                        enabled: false,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                        formatter: undefined,
                    } }),
                histogram: __assign$6(__assign$6({}, ChartTheme.getSeriesDefaults()), { xKey: '', yKey: '', xName: '', yName: '', strokeWidth: 1, fillOpacity: 1, strokeOpacity: 1, lineDash: [0], lineDashOffset: 0, areaPlot: false, bins: undefined, aggregation: 'sum', label: {
                        enabled: false,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                        formatter: undefined,
                    }, shadow: {
                        enabled: true,
                        color: 'rgba(0, 0, 0, 0.5)',
                        xOffset: 0,
                        yOffset: 0,
                        blur: 5,
                    } }),
            }, navigator: {
                enabled: false,
                height: 30,
                mask: {
                    fill: '#999999',
                    stroke: '#999999',
                    strokeWidth: 1,
                    fillOpacity: 0.2,
                },
                minHandle: {
                    fill: '#f2f2f2',
                    stroke: '#999999',
                    strokeWidth: 1,
                    width: 8,
                    height: 16,
                    gripLineGap: 2,
                    gripLineLength: 8,
                },
                maxHandle: {
                    fill: '#f2f2f2',
                    stroke: '#999999',
                    strokeWidth: 1,
                    width: 8,
                    height: 16,
                    gripLineGap: 2,
                    gripLineLength: 8,
                },
            } });
        ChartTheme.polarDefaults = __assign$6(__assign$6({}, ChartTheme.getChartDefaults()), { series: {
                pie: __assign$6(__assign$6({}, ChartTheme.getSeriesDefaults()), { title: {
                        enabled: true,
                        text: '',
                        fontStyle: undefined,
                        fontWeight: 'bold',
                        fontSize: 14,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                    }, angleKey: '', angleName: '', radiusKey: undefined, radiusName: undefined, calloutLabelKey: undefined, calloutLabelName: undefined, sectorLabelKey: undefined, sectorLabelName: undefined, calloutLabel: {
                        enabled: true,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                        offset: 3,
                        minAngle: 20,
                    }, sectorLabel: {
                        enabled: true,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                        positionOffset: 0,
                        positionRatio: 0.5,
                    }, calloutLine: {
                        length: 10,
                        strokeWidth: 2,
                    }, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, lineDash: [0], lineDashOffset: 0, rotation: 0, outerRadiusOffset: 0, innerRadiusOffset: 0, shadow: {
                        enabled: false,
                        color: 'rgba(0, 0, 0, 0.5)',
                        xOffset: 3,
                        yOffset: 3,
                        blur: 5,
                    }, innerLabels: {
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 12,
                        fontFamily: ChartTheme.fontFamily,
                        color: 'rgb(70, 70, 70)',
                        margin: 2,
                    } }),
            } });
        ChartTheme.hierarchyDefaults = __assign$6(__assign$6({}, ChartTheme.getChartDefaults()), { series: {
                treemap: __assign$6(__assign$6({}, ChartTheme.getSeriesDefaults()), { showInLegend: false, labelKey: 'label', sizeKey: 'size', colorKey: 'color', colorDomain: [-5, 5], colorRange: ['#cb4b3f', '#6acb64'], groupFill: '#272931', groupStroke: 'black', groupStrokeWidth: 1, tileStroke: 'black', tileStrokeWidth: 1, gradient: true, tileShadow: {
                        enabled: false,
                        color: 'rgba(0, 0, 0, 0.5)',
                        xOffset: 3,
                        yOffset: 3,
                        blur: 5,
                    }, labelShadow: {
                        enabled: true,
                        color: 'rgba(0, 0, 0, 0.4)',
                        xOffset: 1.5,
                        yOffset: 1.5,
                        blur: 5,
                    }, highlightGroups: true, nodePadding: 2, title: {
                        enabled: true,
                        color: 'white',
                        fontStyle: undefined,
                        fontWeight: 'bold',
                        fontSize: 12,
                        fontFamily: 'Verdana, sans-serif',
                        padding: 15,
                    }, subtitle: {
                        enabled: true,
                        color: 'white',
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: 9,
                        fontFamily: 'Verdana, sans-serif',
                        padding: 13,
                    }, labels: {
                        large: {
                            enabled: true,
                            fontStyle: undefined,
                            fontWeight: 'bold',
                            fontSize: 18,
                            fontFamily: 'Verdana, sans-serif',
                            color: 'white',
                        },
                        medium: {
                            enabled: true,
                            fontStyle: undefined,
                            fontWeight: 'bold',
                            fontSize: 14,
                            fontFamily: 'Verdana, sans-serif',
                            color: 'white',
                        },
                        small: {
                            enabled: true,
                            fontStyle: undefined,
                            fontWeight: 'bold',
                            fontSize: 10,
                            fontFamily: 'Verdana, sans-serif',
                            color: 'white',
                        },
                        value: {
                            style: {
                                enabled: true,
                                fontStyle: undefined,
                                fontWeight: undefined,
                                fontSize: 12,
                                fontFamily: 'Verdana, sans-serif',
                                color: 'white',
                            },
                        },
                    } }),
            } });
        ChartTheme.defaults = {
            cartesian: ChartTheme.cartesianDefaults,
            groupedCategory: ChartTheme.cartesianDefaults,
            polar: ChartTheme.polarDefaults,
            hierarchy: ChartTheme.hierarchyDefaults,
        };
        ChartTheme.cartesianSeriesTypes = [
            'line',
            'area',
            'bar',
            'column',
            'scatter',
            'histogram',
        ];
        ChartTheme.polarSeriesTypes = ['pie'];
        ChartTheme.hierarchySeriesTypes = ['treemap'];
        ChartTheme.seriesTypes = ChartTheme.cartesianSeriesTypes
            .concat(ChartTheme.polarSeriesTypes)
            .concat(ChartTheme.hierarchySeriesTypes);
        return ChartTheme;
    }());

    var __extends$9 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$5 = (undefined && undefined.__assign) || function () {
        __assign$5 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$5.apply(this, arguments);
    };
    var DarkTheme = /** @class */ (function (_super) {
        __extends$9(DarkTheme, _super);
        function DarkTheme(options) {
            return _super.call(this, options) || this;
        }
        DarkTheme.prototype.getDefaults = function () {
            var fontColor = 'rgb(200, 200, 200)';
            var mutedFontColor = 'rgb(150, 150, 150)';
            var axisDefaults = {
                title: {
                    color: fontColor,
                },
                label: {
                    color: fontColor,
                },
                gridStyle: [
                    {
                        stroke: 'rgb(88, 88, 88)',
                        lineDash: [4, 2],
                    },
                ],
            };
            var seriesLabelDefaults = {
                label: {
                    color: fontColor,
                },
            };
            var chartAxesDefaults = {
                axes: {
                    number: __assign$5({}, axisDefaults),
                    category: __assign$5({}, axisDefaults),
                    time: __assign$5({}, axisDefaults),
                },
            };
            var chartDefaults = {
                background: {
                    fill: 'rgb(34, 38, 41)',
                },
                title: {
                    color: fontColor,
                },
                subtitle: {
                    color: mutedFontColor,
                },
                legend: {
                    item: {
                        label: {
                            color: fontColor,
                        },
                    },
                    pagination: {
                        activeStyle: {
                            fill: fontColor,
                        },
                        inactiveStyle: {
                            fill: mutedFontColor,
                        },
                        highlightStyle: {
                            fill: fontColor,
                        },
                        label: {
                            color: fontColor,
                        },
                    },
                },
            };
            return this.mergeWithParentDefaults(_super.prototype.getDefaults.call(this), {
                cartesian: __assign$5(__assign$5(__assign$5({}, chartDefaults), chartAxesDefaults), { series: {
                        bar: __assign$5({}, seriesLabelDefaults),
                        column: __assign$5({}, seriesLabelDefaults),
                        histogram: __assign$5({}, seriesLabelDefaults),
                    } }),
                groupedCategory: __assign$5(__assign$5(__assign$5({}, chartDefaults), chartAxesDefaults), { series: {
                        bar: __assign$5({}, seriesLabelDefaults),
                        column: __assign$5({}, seriesLabelDefaults),
                        histogram: __assign$5({}, seriesLabelDefaults),
                    } }),
                polar: __assign$5(__assign$5({}, chartDefaults), { series: {
                        pie: {
                            calloutLabel: {
                                color: fontColor,
                            },
                            sectorLabel: {
                                color: fontColor,
                            },
                            title: {
                                color: fontColor,
                            },
                            innerLabels: {
                                color: fontColor,
                            },
                        },
                    } }),
                hierarchy: __assign$5(__assign$5({}, chartDefaults), { series: {
                        treemap: {
                            tileStroke: 'white',
                            groupStroke: 'white',
                            title: {
                                color: fontColor,
                            },
                            subtitle: {
                                color: mutedFontColor,
                            },
                            labels: {
                                large: {
                                    color: fontColor,
                                },
                                medium: {
                                    color: fontColor,
                                },
                                small: {
                                    color: fontColor,
                                },
                                value: {
                                    style: {
                                        color: fontColor,
                                    },
                                },
                            },
                        },
                    } }),
            });
        };
        return DarkTheme;
    }(ChartTheme));

    var __extends$8 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette$7 = {
        fills: [
            '#f44336',
            '#e91e63',
            '#9c27b0',
            '#673ab7',
            '#3f51b5',
            '#2196f3',
            '#03a9f4',
            '#00bcd4',
            '#009688',
            '#4caf50',
            '#8bc34a',
            '#cddc39',
            '#ffeb3b',
            '#ffc107',
            '#ff9800',
            '#ff5722',
        ],
        strokes: [
            '#ab2f26',
            '#a31545',
            '#6d1b7b',
            '#482980',
            '#2c397f',
            '#1769aa',
            '#0276ab',
            '#008494',
            '#00695f',
            '#357a38',
            '#618834',
            '#909a28',
            '#b3a429',
            '#b38705',
            '#b36a00',
            '#b33d18',
        ],
    };
    var MaterialLight = /** @class */ (function (_super) {
        __extends$8(MaterialLight, _super);
        function MaterialLight() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialLight.prototype.getPalette = function () {
            return palette$7;
        };
        return MaterialLight;
    }(ChartTheme));

    var __extends$7 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette$6 = {
        fills: [
            '#f44336',
            '#e91e63',
            '#9c27b0',
            '#673ab7',
            '#3f51b5',
            '#2196f3',
            '#03a9f4',
            '#00bcd4',
            '#009688',
            '#4caf50',
            '#8bc34a',
            '#cddc39',
            '#ffeb3b',
            '#ffc107',
            '#ff9800',
            '#ff5722',
        ],
        strokes: [
            '#ab2f26',
            '#a31545',
            '#6d1b7b',
            '#482980',
            '#2c397f',
            '#1769aa',
            '#0276ab',
            '#008494',
            '#00695f',
            '#357a38',
            '#618834',
            '#909a28',
            '#b3a429',
            '#b38705',
            '#b36a00',
            '#b33d18',
        ],
    };
    var MaterialDark = /** @class */ (function (_super) {
        __extends$7(MaterialDark, _super);
        function MaterialDark() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MaterialDark.prototype.getPalette = function () {
            return palette$6;
        };
        return MaterialDark;
    }(DarkTheme));

    var __extends$6 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette$5 = {
        fills: ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'],
        strokes: ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'],
    };
    var PastelLight = /** @class */ (function (_super) {
        __extends$6(PastelLight, _super);
        function PastelLight() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PastelLight.prototype.getPalette = function () {
            return palette$5;
        };
        return PastelLight;
    }(ChartTheme));

    var __extends$5 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette$4 = {
        fills: ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'],
        strokes: ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'],
    };
    var PastelDark = /** @class */ (function (_super) {
        __extends$5(PastelDark, _super);
        function PastelDark() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PastelDark.prototype.getPalette = function () {
            return palette$4;
        };
        return PastelDark;
    }(DarkTheme));

    var __extends$4 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette$3 = {
        fills: [
            '#febe76',
            '#ff7979',
            '#badc58',
            '#f9ca23',
            '#f0932b',
            '#eb4c4b',
            '#6ab04c',
            '#7ed6df',
            '#e056fd',
            '#686de0',
        ],
        strokes: [
            '#b28553',
            '#b35555',
            '#829a3e',
            '#ae8d19',
            '#a8671e',
            '#a43535',
            '#4a7b35',
            '#58969c',
            '#9d3cb1',
            '#494c9d',
        ],
    };
    var SolarLight = /** @class */ (function (_super) {
        __extends$4(SolarLight, _super);
        function SolarLight() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SolarLight.prototype.getPalette = function () {
            return palette$3;
        };
        return SolarLight;
    }(ChartTheme));

    var __extends$3 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette$2 = {
        fills: [
            '#febe76',
            '#ff7979',
            '#badc58',
            '#f9ca23',
            '#f0932b',
            '#eb4c4b',
            '#6ab04c',
            '#7ed6df',
            '#e056fd',
            '#686de0',
        ],
        strokes: [
            '#b28553',
            '#b35555',
            '#829a3e',
            '#ae8d19',
            '#a8671e',
            '#a43535',
            '#4a7b35',
            '#58969c',
            '#9d3cb1',
            '#494c9d',
        ],
    };
    var SolarDark = /** @class */ (function (_super) {
        __extends$3(SolarDark, _super);
        function SolarDark() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SolarDark.prototype.getPalette = function () {
            return palette$2;
        };
        return SolarDark;
    }(DarkTheme));

    var __extends$2 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette$1 = {
        fills: ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921', '#fa3081'],
        strokes: ['#4086a4', '#b1a235', '#6c8a2b', '#a03e24', '#af5517', '#af225a'],
    };
    var VividLight = /** @class */ (function (_super) {
        __extends$2(VividLight, _super);
        function VividLight() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VividLight.prototype.getPalette = function () {
            return palette$1;
        };
        return VividLight;
    }(ChartTheme));

    var __extends$1 = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var palette = {
        fills: ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921', '#fa3081'],
        strokes: ['#4086a4', '#b1a235', '#6c8a2b', '#a03e24', '#af5517', '#af225a'],
    };
    var VividDark = /** @class */ (function (_super) {
        __extends$1(VividDark, _super);
        function VividDark() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VividDark.prototype.getPalette = function () {
            return palette;
        };
        return VividDark;
    }(DarkTheme));

    var __assign$4 = (undefined && undefined.__assign) || function () {
        __assign$4 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$4.apply(this, arguments);
    };
    var lightTheme = new ChartTheme();
    var darkTheme = new DarkTheme();
    var lightThemes = {
        undefined: lightTheme,
        null: lightTheme,
        'ag-default': lightTheme,
        'ag-material': new MaterialLight(),
        'ag-pastel': new PastelLight(),
        'ag-solar': new SolarLight(),
        'ag-vivid': new VividLight(),
    };
    var darkThemes = {
        undefined: darkTheme,
        null: darkTheme,
        'ag-default-dark': darkTheme,
        'ag-material-dark': new MaterialDark(),
        'ag-pastel-dark': new PastelDark(),
        'ag-solar-dark': new SolarDark(),
        'ag-vivid-dark': new VividDark(),
    };
    var themes = __assign$4(__assign$4({}, darkThemes), lightThemes);
    function getChartTheme(value) {
        var _a;
        if (value instanceof ChartTheme) {
            return value;
        }
        var stockTheme = themes[value];
        if (stockTheme) {
            return stockTheme;
        }
        value = value;
        // Flatten recursive themes.
        var overrides = [];
        var palette;
        while (typeof value === 'object') {
            overrides.push((_a = value.overrides) !== null && _a !== void 0 ? _a : {});
            // Use first palette found, they can't be merged.
            if (value.palette && palette == null) {
                palette = value.palette;
            }
            value = value.baseTheme;
        }
        overrides.reverse();
        var flattenedTheme = __assign$4({ baseTheme: value, overrides: jsonMerge(overrides) }, (palette ? { palette: palette } : {}));
        if (flattenedTheme.baseTheme || flattenedTheme.overrides) {
            var baseTheme = getChartTheme(flattenedTheme.baseTheme);
            return new baseTheme.constructor(flattenedTheme);
        }
        return lightTheme;
    }

    var __assign$3 = (undefined && undefined.__assign) || function () {
        __assign$3 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$3.apply(this, arguments);
    };
    var __values$2 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$3 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$3 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$3(arguments[i]));
        return ar;
    };
    /**
     * Groups the series options objects if they are of type `column` or `bar` and places them in an array at the index where the first instance of this series type was found.
     * Returns an array of arrays containing the ordered and grouped series options objects.
     */
    function groupSeriesByType(seriesOptions) {
        var e_1, _a;
        var indexMap = {};
        var result = [];
        try {
            for (var seriesOptions_1 = __values$2(seriesOptions), seriesOptions_1_1 = seriesOptions_1.next(); !seriesOptions_1_1.done; seriesOptions_1_1 = seriesOptions_1.next()) {
                var s = seriesOptions_1_1.value;
                if (s.type !== 'column' && s.type !== 'bar' && (s.type !== 'area' || s.stacked !== true)) {
                    // No need to use index for these cases.
                    result.push([s]);
                    continue;
                }
                var seriesType = s.type || 'line';
                var groupingKey = s.stacked ? 'stacked' : 'grouped';
                var indexKey = seriesType + "-" + s.xKey + "-" + groupingKey;
                if (indexMap[indexKey] == null) {
                    // Add indexed array to result on first addition.
                    indexMap[indexKey] = [];
                    result.push(indexMap[indexKey]);
                }
                indexMap[indexKey].push(s);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (seriesOptions_1_1 && !seriesOptions_1_1.done && (_a = seriesOptions_1.return)) _a.call(seriesOptions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    }
    var FAIL = Symbol();
    var SKIP = Symbol();
    var ARRAY_REDUCER = function (prop) { return function (result, next) {
        var _a;
        return result.concat.apply(result, __spread$3(((_a = next[prop]) !== null && _a !== void 0 ? _a : [])));
    }; };
    var BOOLEAN_OR_REDUCER = function (prop, defaultValue) { return function (result, next) {
        if (typeof next[prop] === 'boolean') {
            return (result !== null && result !== void 0 ? result : false) || next[prop];
        }
        return result !== null && result !== void 0 ? result : defaultValue;
    }; };
    var DEFAULTING_ARRAY_REDUCER = function (prop, defaultValue) { return function (result, next, idx, length) {
        var _a;
        var sparse = defaultValue === SKIP || defaultValue === FAIL;
        var nextValue = (_a = next[prop]) !== null && _a !== void 0 ? _a : defaultValue;
        if (nextValue === FAIL) {
            throw new Error("AG Charts - missing value for property [" + prop + "] on series config.");
        }
        else if (nextValue === SKIP) {
            return result;
        }
        if (result.length === 0 && !sparse) {
            // Pre-populate values on first invocation as we will only be invoked for series with a
            // value specified.
            while (result.length < length) {
                result = result.concat(defaultValue);
            }
        }
        if (!sparse) {
            result[idx] = nextValue;
            return result;
        }
        return result.concat(nextValue);
    }; };
    var YKEYS_REDUCER = function (prop, activationValue) { return function (result, next) {
        if (next[prop] === activationValue) {
            return result.concat.apply(result, __spread$3((next.yKey ? [next.yKey] : next.yKeys)));
        }
        return result;
    }; };
    var REDUCE_CONFIG = {
        hideInChart: { outputProp: 'hideInChart', reducer: ARRAY_REDUCER('hideInChart'), start: [] },
        hideInLegend: { outputProp: 'hideInLegend', reducer: ARRAY_REDUCER('hideInLegend'), start: [] },
        yKey: { outputProp: 'yKeys', reducer: DEFAULTING_ARRAY_REDUCER('yKey', SKIP), start: [] },
        fill: { outputProp: 'fills', reducer: DEFAULTING_ARRAY_REDUCER('fill', SKIP), start: [] },
        stroke: { outputProp: 'strokes', reducer: DEFAULTING_ARRAY_REDUCER('stroke', SKIP), start: [] },
        yName: { outputProp: 'yNames', reducer: DEFAULTING_ARRAY_REDUCER('yName', SKIP), start: [] },
        visible: { outputProp: 'visibles', reducer: DEFAULTING_ARRAY_REDUCER('visible', true), start: [] },
        grouped: {
            outputProp: 'grouped',
            reducer: BOOLEAN_OR_REDUCER('grouped'),
            seriesType: ['bar', 'column'],
            start: undefined,
        },
        showInLegend: {
            outputProp: 'hideInLegend',
            reducer: YKEYS_REDUCER('showInLegend', false),
            seriesType: ['bar', 'column'],
            start: [],
        },
    };
    /**
     * Takes an array of bar or area series options objects and returns a single object with the combined area series options.
     */
    function reduceSeries(series) {
        var options = {};
        series.forEach(function (s, idx) {
            Object.keys(s).forEach(function (prop) {
                var _a;
                var reducerConfig = REDUCE_CONFIG[prop];
                var defaultReduce = function () {
                    var _a, _b;
                    options[prop] = (_b = (_a = s[prop]) !== null && _a !== void 0 ? _a : options[prop]) !== null && _b !== void 0 ? _b : undefined;
                };
                if (!reducerConfig) {
                    defaultReduce();
                    return;
                }
                var outputProp = reducerConfig.outputProp, reducer = reducerConfig.reducer, _b = reducerConfig.start, start = _b === void 0 ? undefined : _b, _c = reducerConfig.seriesType, seriesType = _c === void 0 ? [s.type] : _c;
                if (!seriesType.includes(s.type)) {
                    defaultReduce();
                    return;
                }
                var result = reducer((_a = options[outputProp]) !== null && _a !== void 0 ? _a : start, s, idx, series.length);
                if (result !== undefined) {
                    options[outputProp] = result;
                }
            });
        });
        return options;
    }
    /**
     * Transforms provided series options array into an array containing series options which are compatible with standalone charts series options.
     */
    function processSeriesOptions(seriesOptions) {
        var e_2, _a;
        var result = [];
        var preprocessed = seriesOptions.map(function (series) {
            // Change the default for bar/columns when yKey is used to be grouped rather than stacked.
            if ((series.type === 'bar' || series.type === 'column') && series.yKey != null && !series.stacked) {
                return __assign$3(__assign$3({}, series), { grouped: series.grouped != null ? series.grouped : true });
            }
            return series;
        });
        try {
            for (var _b = __values$2(groupSeriesByType(preprocessed)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var series = _c.value;
                switch (series[0].type) {
                    case 'column':
                    case 'bar':
                    case 'area':
                        result.push(reduceSeries(series));
                        break;
                    case 'line':
                    default:
                        if (series.length > 1) {
                            console.warn('AG Charts - unexpected grouping of series type: ' + series[0].type);
                        }
                        result.push(series[0]);
                        break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    }

    var __assign$2 = (undefined && undefined.__assign) || function () {
        __assign$2 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };
    var __values$1 = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read$2 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$2 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$2(arguments[i]));
        return ar;
    };
    function optionsType(input) {
        var _a, _b, _c, _d;
        return (_d = (_a = input.type) !== null && _a !== void 0 ? _a : (_c = (_b = input.series) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) !== null && _d !== void 0 ? _d : 'line';
    }
    function isAgCartesianChartOptions(input) {
        var specifiedType = optionsType(input);
        if (specifiedType == null) {
            return true;
        }
        switch (specifiedType) {
            case 'cartesian':
            case 'area':
            case 'bar':
            case 'column':
            case 'groupedCategory':
            case 'histogram':
            case 'line':
            case 'scatter':
                return true;
            default:
                return false;
        }
    }
    function isAgHierarchyChartOptions(input) {
        var specifiedType = optionsType(input);
        if (specifiedType == null) {
            return false;
        }
        switch (specifiedType) {
            case 'hierarchy':
            // fall-through - hierarchy and treemap are synonyms.
            case 'treemap':
                return true;
            default:
                return false;
        }
    }
    function isAgPolarChartOptions(input) {
        var specifiedType = optionsType(input);
        if (specifiedType == null) {
            return false;
        }
        switch (specifiedType) {
            case 'polar':
            // fall-through - polar and pie are synonyms.
            case 'pie':
                return true;
            default:
                return false;
        }
    }
    function isSeriesOptionType(input) {
        if (input == null) {
            return false;
        }
        return ['line', 'bar', 'column', 'histogram', 'scatter', 'area', 'pie', 'treemap'].indexOf(input) >= 0;
    }
    function countArrayElements(input) {
        var e_1, _a;
        var count = 0;
        try {
            for (var input_1 = __values$1(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                var next = input_1_1.value;
                if (next instanceof Array) {
                    count += countArrayElements(next);
                }
                if (next != null) {
                    count++;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return count;
    }
    function takeColours(context, colours, maxCount) {
        var result = [];
        for (var count = 0; count < maxCount; count++) {
            result.push(colours[(count + context.colourIndex) % colours.length]);
        }
        return result;
    }
    var noDataCloneMergeOptions = {
        avoidDeepClone: ['data'],
    };
    function prepareOptions(newOptions) {
        var _a;
        var fallbackOptions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fallbackOptions[_i - 1] = arguments[_i];
        }
        var options = jsonMerge(__spread$2(fallbackOptions, [newOptions]), noDataCloneMergeOptions);
        sanityCheckOptions(options);
        // Determine type and ensure it's explicit in the options config.
        var userSuppliedOptionsType = options.type;
        var type = optionsType(options);
        options = __assign$2(__assign$2({}, options), { type: type });
        var defaultSeriesType = isAgCartesianChartOptions(options)
            ? 'line'
            : isAgHierarchyChartOptions(options)
                ? 'treemap'
                : isAgPolarChartOptions(options)
                    ? 'pie'
                    : 'line';
        var defaultOverrides = type === 'bar'
            ? DEFAULT_BAR_CHART_OVERRIDES
            : type === 'scatter'
                ? DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES
                : type === 'histogram'
                    ? DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES
                    : isAgCartesianChartOptions(options)
                        ? DEFAULT_CARTESIAN_CHART_OVERRIDES
                        : {};
        var _b = prepareMainOptions(defaultOverrides, options), context = _b.context, mergedOptions = _b.mergedOptions, axesThemes = _b.axesThemes, seriesThemes = _b.seriesThemes;
        // Special cases where we have arrays of elements which need their own defaults.
        // Apply series themes before calling processSeriesOptions() as it reduces and renames some
        // properties, and in that case then cannot correctly have themes applied.
        mergedOptions.series = processSeriesOptions((mergedOptions.series || []).map(function (s) {
            var type = s.type
                ? s.type
                : isSeriesOptionType(userSuppliedOptionsType)
                    ? userSuppliedOptionsType
                    : defaultSeriesType;
            var mergedSeries = jsonMerge([seriesThemes[type] || {}, __assign$2(__assign$2({}, s), { type: type })], noDataCloneMergeOptions);
            if (type === 'pie') {
                preparePieOptions(seriesThemes.pie, s, mergedSeries);
            }
            return mergedSeries;
        })).map(function (s) { return prepareSeries(context, s); });
        if (isAgCartesianChartOptions(mergedOptions)) {
            mergedOptions.axes = (_a = mergedOptions.axes) === null || _a === void 0 ? void 0 : _a.map(function (a) {
                var _a;
                var type = (_a = a.type) !== null && _a !== void 0 ? _a : 'number';
                var axis = __assign$2(__assign$2({}, a), { type: type });
                var axesTheme = jsonMerge([axesThemes[type], axesThemes[type][a.position || 'unknown'] || {}]);
                return prepareAxis(axis, axesTheme);
            });
        }
        prepareEnabledOptions(options, mergedOptions);
        return mergedOptions;
    }
    function sanityCheckOptions(options) {
        var deprecatedArrayProps = {
            yKeys: 'yKey',
            yNames: 'yName',
        };
        Object.entries(deprecatedArrayProps).forEach(function (_a) {
            var _b;
            var _c = __read$2(_a, 2), oldProp = _c[0], newProp = _c[1];
            if ((_b = options.series) === null || _b === void 0 ? void 0 : _b.some(function (s) { return s[oldProp] != null; })) {
                doOnce(function () {
                    return console.warn("AG Charts - Property [series." + oldProp + "] is deprecated, please use [series." + newProp + "] and multiple series instead.");
                }, "deprecated series." + oldProp + " array");
            }
        });
    }
    function prepareMainOptions(defaultOverrides, options) {
        var _a = prepareTheme(options), theme = _a.theme, cleanedTheme = _a.cleanedTheme, axesThemes = _a.axesThemes, seriesThemes = _a.seriesThemes;
        var context = { colourIndex: 0, palette: theme.palette };
        var mergedOptions = jsonMerge([defaultOverrides, cleanedTheme, options], noDataCloneMergeOptions);
        return { context: context, mergedOptions: mergedOptions, axesThemes: axesThemes, seriesThemes: seriesThemes };
    }
    function prepareTheme(options) {
        var theme = getChartTheme(options.theme);
        var themeConfig = theme.getConfig(optionsType(options) || 'cartesian');
        var seriesThemes = Object.entries(theme.config).reduce(function (result, _a) {
            var _b = __read$2(_a, 2), seriesType = _b[0], series = _b[1].series;
            result[seriesType] = series === null || series === void 0 ? void 0 : series[seriesType];
            return result;
        }, {});
        return {
            theme: theme,
            axesThemes: themeConfig['axes'] || {},
            seriesThemes: seriesThemes,
            cleanedTheme: jsonMerge([themeConfig, { axes: DELETE, series: DELETE }]),
        };
    }
    function prepareSeries(context, input) {
        var defaults = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            defaults[_i - 2] = arguments[_i];
        }
        var paletteOptions = calculateSeriesPalette(context, input);
        // Part of the options interface, but not directly consumed by the series implementations.
        var removeOptions = { stacked: DELETE };
        var mergedResult = jsonMerge(__spread$2(defaults, [paletteOptions, input, removeOptions]), noDataCloneMergeOptions);
        return applySeriesTransform(mergedResult);
    }
    function calculateSeriesPalette(context, input) {
        var paletteOptions = {};
        var _a = context.palette, fills = _a.fills, strokes = _a.strokes;
        var inputAny = input;
        var colourCount = countArrayElements(inputAny['yKeys'] || []) || 1; // Defaults to 1 if no yKeys.
        switch (input.type) {
            case 'pie':
                colourCount = Math.max(fills.length, strokes.length);
            // fall-through - only colourCount varies for `pie`.
            case 'area':
            case 'bar':
            case 'column':
                paletteOptions.fills = takeColours(context, fills, colourCount);
                paletteOptions.strokes = takeColours(context, strokes, colourCount);
                break;
            case 'histogram':
                paletteOptions.fill = takeColours(context, fills, 1)[0];
                paletteOptions.stroke = takeColours(context, strokes, 1)[0];
                break;
            case 'scatter':
                paletteOptions.marker = {
                    stroke: takeColours(context, strokes, 1)[0],
                    fill: takeColours(context, fills, 1)[0],
                };
                break;
            case 'line':
                paletteOptions.stroke = takeColours(context, fills, 1)[0];
                paletteOptions.marker = {
                    stroke: takeColours(context, strokes, 1)[0],
                    fill: takeColours(context, fills, 1)[0],
                };
                break;
            case 'treemap':
                break;
            default:
                throw new Error('AG Charts - unknown series type: ' + input.type);
        }
        context.colourIndex += colourCount;
        return paletteOptions;
    }
    function prepareAxis(axis, axisTheme) {
        // Remove redundant theme overload keys.
        var removeOptions = { top: DELETE, bottom: DELETE, left: DELETE, right: DELETE };
        // Special cross lines case where we have an arrays of cross line elements which need their own defaults.
        if (axis.crossLines) {
            if (!Array.isArray(axis.crossLines)) {
                console.warn('AG Charts - axis[].crossLines should be an array.');
                axis.crossLines = [];
            }
            var crossLinesTheme_1 = axisTheme.crossLines;
            axis.crossLines = axis.crossLines.map(function (crossLine) { return jsonMerge([crossLinesTheme_1, crossLine]); });
        }
        var cleanTheme = { crossLines: DELETE };
        return jsonMerge([axisTheme, cleanTheme, axis, removeOptions], noDataCloneMergeOptions);
    }
    function prepareEnabledOptions(options, mergedOptions) {
        // Set `enabled: true` for all option objects where the user has provided values.
        jsonWalk(options, function (_, visitingUserOpts, visitingMergedOpts) {
            if (!visitingMergedOpts)
                return;
            var _enabledFromTheme = visitingMergedOpts._enabledFromTheme;
            if (_enabledFromTheme != null) {
                // Do not apply special handling, base enablement on theme.
                delete visitingMergedOpts._enabledFromTheme;
            }
            if (!('enabled' in visitingMergedOpts))
                return;
            if (_enabledFromTheme)
                return;
            if (visitingUserOpts.enabled == null) {
                visitingMergedOpts.enabled = true;
            }
        }, { skip: ['data', 'theme'] }, mergedOptions);
        // Cleanup any special properties.
        jsonWalk(mergedOptions, function (_, visitingMergedOpts) {
            if (visitingMergedOpts._enabledFromTheme != null) {
                // Do not apply special handling, base enablement on theme.
                delete visitingMergedOpts._enabledFromTheme;
            }
        }, { skip: ['data', 'theme'] });
    }
    function preparePieOptions(pieSeriesTheme, seriesOptions, mergedSeries) {
        if (Array.isArray(seriesOptions.innerLabels)) {
            mergedSeries.innerLabels = seriesOptions.innerLabels.map(function (ln) {
                return jsonMerge([pieSeriesTheme.innerLabels, ln]);
            });
        }
        else {
            mergedSeries.innerLabels = DELETE;
        }
    }

    var horizontalCrosslineTranslationDirections = {
        top: { xTranslationDirection: 0, yTranslationDirection: -1 },
        bottom: { xTranslationDirection: 0, yTranslationDirection: 1 },
        left: { xTranslationDirection: -1, yTranslationDirection: 0 },
        right: { xTranslationDirection: 1, yTranslationDirection: 0 },
        topLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
        topRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
        bottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
        bottomRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
        inside: { xTranslationDirection: 0, yTranslationDirection: 0 },
        insideLeft: { xTranslationDirection: 1, yTranslationDirection: 0 },
        insideRight: { xTranslationDirection: -1, yTranslationDirection: 0 },
        insideTop: { xTranslationDirection: 0, yTranslationDirection: 1 },
        insideBottom: { xTranslationDirection: 0, yTranslationDirection: -1 },
        insideTopLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
        insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
        insideTopRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
        insideBottomRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
    };
    var verticalCrossLineTranslationDirections = {
        top: { xTranslationDirection: 1, yTranslationDirection: 0 },
        bottom: { xTranslationDirection: -1, yTranslationDirection: 0 },
        left: { xTranslationDirection: 0, yTranslationDirection: -1 },
        right: { xTranslationDirection: 0, yTranslationDirection: 1 },
        topLeft: { xTranslationDirection: -1, yTranslationDirection: -1 },
        topRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
        bottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
        bottomRight: { xTranslationDirection: 1, yTranslationDirection: 1 },
        inside: { xTranslationDirection: 0, yTranslationDirection: 0 },
        insideLeft: { xTranslationDirection: 0, yTranslationDirection: 1 },
        insideRight: { xTranslationDirection: 0, yTranslationDirection: -1 },
        insideTop: { xTranslationDirection: -1, yTranslationDirection: 0 },
        insideBottom: { xTranslationDirection: 1, yTranslationDirection: 0 },
        insideTopLeft: { xTranslationDirection: -1, yTranslationDirection: 1 },
        insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
        insideTopRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
        insideBottomRight: { xTranslationDirection: 1, yTranslationDirection: -1 },
    };
    var calculateLabelTranslation = function (_a) {
        var _b;
        var yDirection = _a.yDirection, _c = _a.padding, padding = _c === void 0 ? 0 : _c, position = _a.position, bbox = _a.bbox;
        var crossLineTranslationDirections = yDirection
            ? horizontalCrosslineTranslationDirections
            : verticalCrossLineTranslationDirections;
        var _d = (_b = crossLineTranslationDirections[position]) !== null && _b !== void 0 ? _b : crossLineTranslationDirections['top'], xTranslationDirection = _d.xTranslationDirection, yTranslationDirection = _d.yTranslationDirection;
        var w = yDirection ? bbox.width : bbox.height;
        var h = yDirection ? bbox.height : bbox.width;
        var xTranslation = xTranslationDirection * (padding + w / 2);
        var yTranslation = yTranslationDirection * (padding + h / 2);
        return {
            xTranslation: xTranslation,
            yTranslation: yTranslation,
        };
    };
    var POSITION_TOP_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xEnd = _a.xEnd, yStart = _a.yStart, yEnd = _a.yEnd;
        if (yDirection) {
            return { x: xEnd / 2, y: yStart };
        }
        else {
            return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
    };
    var POSITION_LEFT_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xStart = _a.xStart, xEnd = _a.xEnd, yStart = _a.yStart, yEnd = _a.yEnd;
        if (yDirection) {
            return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
        else {
            return { x: xEnd / 2, y: yStart };
        }
    };
    var POSITION_RIGHT_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xEnd = _a.xEnd, yStart = _a.yStart, yEnd = _a.yEnd;
        if (yDirection) {
            return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
        else {
            return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };
        }
    };
    var POSITION_BOTTOM_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xStart = _a.xStart, xEnd = _a.xEnd, yStart = _a.yStart, yEnd = _a.yEnd;
        if (yDirection) {
            return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };
        }
        else {
            return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
    };
    var POSITION_INSIDE_COORDINATES = function (_a) {
        var xEnd = _a.xEnd, yStart = _a.yStart, yEnd = _a.yEnd;
        return { x: xEnd / 2, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
    };
    var POSITION_TOP_LEFT_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xStart = _a.xStart, xEnd = _a.xEnd, yStart = _a.yStart;
        if (yDirection) {
            return { x: xStart / 2, y: yStart };
        }
        else {
            return { x: xEnd, y: yStart };
        }
    };
    var POSITION_BOTTOM_LEFT_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xStart = _a.xStart, yStart = _a.yStart, yEnd = _a.yEnd;
        if (yDirection) {
            return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };
        }
        else {
            return { x: xStart, y: yStart };
        }
    };
    var POSITION_TOP_RIGHT_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xEnd = _a.xEnd, yStart = _a.yStart, yEnd = _a.yEnd;
        if (yDirection) {
            return { x: xEnd, y: yStart };
        }
        else {
            return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };
        }
    };
    var POSITION_BOTTOM_RIGHT_COORDINATES = function (_a) {
        var yDirection = _a.yDirection, xStart = _a.xStart, xEnd = _a.xEnd, yStart = _a.yStart, yEnd = _a.yEnd;
        if (yDirection) {
            return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };
        }
        else {
            return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };
        }
    };
    var labeldDirectionHandling = {
        top: { c: POSITION_TOP_COORDINATES },
        bottom: { c: POSITION_BOTTOM_COORDINATES },
        left: { c: POSITION_LEFT_COORDINATES },
        right: { c: POSITION_RIGHT_COORDINATES },
        topLeft: { c: POSITION_TOP_LEFT_COORDINATES },
        topRight: { c: POSITION_TOP_RIGHT_COORDINATES },
        bottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },
        bottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },
        inside: { c: POSITION_INSIDE_COORDINATES },
        insideLeft: { c: POSITION_LEFT_COORDINATES },
        insideRight: { c: POSITION_RIGHT_COORDINATES },
        insideTop: { c: POSITION_TOP_COORDINATES },
        insideBottom: { c: POSITION_BOTTOM_COORDINATES },
        insideTopLeft: { c: POSITION_TOP_LEFT_COORDINATES },
        insideBottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },
        insideTopRight: { c: POSITION_TOP_RIGHT_COORDINATES },
        insideBottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },
    };

    var __extends = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$1 = (undefined && undefined.__assign) || function () {
        __assign$1 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };
    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Range = /** @class */ (function (_super) {
        __extends(Range, _super);
        function Range() {
            var _this = _super.call(this) || this;
            _this.x1 = 0;
            _this.y1 = 0;
            _this.x2 = 0;
            _this.y2 = 0;
            _this.startLine = false;
            _this.endLine = false;
            _this.isRange = false;
            _this.restoreOwnStyles();
            return _this;
        }
        Range.prototype.computeBBox = function () {
            return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);
        };
        Range.prototype.isPointInPath = function (_x, _y) {
            return false;
        };
        Range.prototype.render = function (renderCtx) {
            var _a;
            var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            var _b = this, x1 = _b.x1, y1 = _b.y1, x2 = _b.x2, y2 = _b.y2;
            x1 = this.align(x1);
            y1 = this.align(y1);
            x2 = this.align(x2);
            y2 = this.align(y2);
            var _c = this, fill = _c.fill, opacity = _c.opacity, isRange = _c.isRange;
            var fillActive = !!(isRange && fill);
            if (fillActive) {
                var fillOpacity = this.fillOpacity;
                ctx.fillStyle = fill;
                ctx.globalAlpha = opacity * fillOpacity;
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y1);
                ctx.lineTo(x2, y2);
                ctx.lineTo(x1, y2);
                ctx.closePath();
                ctx.fill();
            }
            var _d = this, stroke = _d.stroke, strokeWidth = _d.strokeWidth, startLine = _d.startLine, endLine = _d.endLine;
            var strokeActive = !!((startLine || endLine) && stroke && strokeWidth);
            if (strokeActive) {
                var _e = this, strokeOpacity = _e.strokeOpacity, lineDash = _e.lineDash, lineDashOffset = _e.lineDashOffset, lineCap = _e.lineCap, lineJoin = _e.lineJoin;
                ctx.strokeStyle = stroke;
                ctx.globalAlpha = opacity * strokeOpacity;
                ctx.lineWidth = strokeWidth;
                if (lineDash) {
                    ctx.setLineDash(lineDash);
                }
                if (lineDashOffset) {
                    ctx.lineDashOffset = lineDashOffset;
                }
                if (lineCap) {
                    ctx.lineCap = lineCap;
                }
                if (lineJoin) {
                    ctx.lineJoin = lineJoin;
                }
                ctx.beginPath();
                if (startLine) {
                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y1);
                }
                if (endLine) {
                    ctx.moveTo(x2, y2);
                    ctx.lineTo(x1, y2);
                }
                ctx.stroke();
            }
            (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();
            _super.prototype.render.call(this, renderCtx);
        };
        Range.className = 'Range';
        Range.defaultStyles = __assign$1(__assign$1({}, Shape.defaultStyles), { strokeWidth: 1 });
        __decorate$1([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Range.prototype, "x1", void 0);
        __decorate$1([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Range.prototype, "y1", void 0);
        __decorate$1([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Range.prototype, "x2", void 0);
        __decorate$1([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Range.prototype, "y2", void 0);
        __decorate$1([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Range.prototype, "startLine", void 0);
        __decorate$1([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Range.prototype, "endLine", void 0);
        __decorate$1([
            SceneChangeDetection({ redraw: RedrawType.MINOR })
        ], Range.prototype, "isRange", void 0);
        return Range;
    }(Shape));

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __read$1 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread$1 = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$1(arguments[i]));
        return ar;
    };
    var CROSSLINE_LABEL_POSITIONS = [
        'top',
        'left',
        'right',
        'bottom',
        'topLeft',
        'topRight',
        'bottomLeft',
        'bottomRight',
        'inside',
        'insideLeft',
        'insideRight',
        'insideTop',
        'insideBottom',
        'insideTopLeft',
        'insideBottomLeft',
        'insideTopRight',
        'insideBottomRight',
    ];
    var OPT_CROSSLINE_LABEL_POSITION = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, function (v) { return CROSSLINE_LABEL_POSITIONS.includes(v); }); }, "expecting an optional crossLine label position keyword such as 'topLeft', 'topRight' or 'inside'");
    var OPT_CROSSLINE_TYPE = predicateWithMessage(function (v, ctx) { return OPTIONAL(v, ctx, function (v) { return v === 'range' || v === 'line'; }); }, "expecting a crossLine type keyword such as 'range' or 'line'");
    var CrossLineLabel = /** @class */ (function () {
        function CrossLineLabel() {
            this.enabled = undefined;
            this.text = undefined;
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 14;
            this.fontFamily = 'Verdana, sans-serif';
            /**
             * The padding between the label and the line.
             */
            this.padding = 5;
            /**
             * The color of the labels.
             */
            this.color = 'rgba(87, 87, 87, 1)';
            this.position = undefined;
            this.rotation = undefined;
            this.parallel = undefined;
        }
        __decorate([
            Validate(OPT_BOOLEAN)
        ], CrossLineLabel.prototype, "enabled", void 0);
        __decorate([
            Validate(OPT_STRING)
        ], CrossLineLabel.prototype, "text", void 0);
        __decorate([
            Validate(OPT_FONT_STYLE)
        ], CrossLineLabel.prototype, "fontStyle", void 0);
        __decorate([
            Validate(OPT_FONT_WEIGHT)
        ], CrossLineLabel.prototype, "fontWeight", void 0);
        __decorate([
            Validate(NUMBER(0))
        ], CrossLineLabel.prototype, "fontSize", void 0);
        __decorate([
            Validate(STRING)
        ], CrossLineLabel.prototype, "fontFamily", void 0);
        __decorate([
            Validate(NUMBER(0))
        ], CrossLineLabel.prototype, "padding", void 0);
        __decorate([
            Validate(OPT_COLOR_STRING)
        ], CrossLineLabel.prototype, "color", void 0);
        __decorate([
            Validate(OPT_CROSSLINE_LABEL_POSITION)
        ], CrossLineLabel.prototype, "position", void 0);
        __decorate([
            Validate(OPT_NUMBER(-360, 360))
        ], CrossLineLabel.prototype, "rotation", void 0);
        __decorate([
            Validate(OPT_BOOLEAN)
        ], CrossLineLabel.prototype, "parallel", void 0);
        return CrossLineLabel;
    }());
    var CrossLine = /** @class */ (function () {
        function CrossLine() {
            this.id = createId(this);
            this.enabled = undefined;
            this.type = undefined;
            this.range = undefined;
            this.value = undefined;
            this.fill = undefined;
            this.fillOpacity = undefined;
            this.stroke = undefined;
            this.strokeWidth = undefined;
            this.strokeOpacity = undefined;
            this.lineDash = undefined;
            this.label = new CrossLineLabel();
            this.scale = undefined;
            this.clippedRange = [-Infinity, Infinity];
            this.gridLength = 0;
            this.sideFlag = -1;
            this.parallelFlipRotation = 0;
            this.regularFlipRotation = 0;
            this.direction = ChartAxisDirection.X;
            this.group = new Group({ name: "" + this.id, layer: true, zIndex: CrossLine.LINE_LAYER_ZINDEX });
            this.crossLineRange = new Range();
            this.crossLineLabel = new Text();
            this.labelPoint = undefined;
            this.data = [];
            this.startLine = false;
            this.endLine = false;
            this.isRange = false;
            var _a = this, group = _a.group, crossLineRange = _a.crossLineRange, crossLineLabel = _a.crossLineLabel;
            group.append([crossLineRange, crossLineLabel]);
            crossLineRange.pointerEvents = PointerEvents.None;
        }
        CrossLine.prototype.update = function (visible) {
            if (!this.enabled) {
                return;
            }
            this.group.visible = visible;
            if (!visible) {
                return;
            }
            var dataCreated = this.createNodeData();
            if (!dataCreated) {
                this.group.visible = false;
                return;
            }
            this.updateNodes();
            this.group.zIndex = this.getZIndex(this.isRange);
        };
        CrossLine.prototype.updateNodes = function () {
            this.updateRangeNode();
            if (this.label.enabled) {
                this.updateLabel();
                this.positionLabel();
            }
        };
        CrossLine.prototype.createNodeData = function () {
            var _a, _b, _c, _d, _e, _f;
            var _g, _h;
            var _j = this, scale = _j.scale, gridLength = _j.gridLength, sideFlag = _j.sideFlag, direction = _j.direction, _k = _j.label.position, position = _k === void 0 ? 'top' : _k, clippedRange = _j.clippedRange, _l = _j.strokeWidth, strokeWidth = _l === void 0 ? 0 : _l;
            if (!scale) {
                return false;
            }
            var bandwidth = (_g = scale.bandwidth) !== null && _g !== void 0 ? _g : 0;
            var clippedRangeClamper = function (x) {
                return Math.max(Math.min.apply(Math, __spread$1(clippedRange)), Math.min(Math.max.apply(Math, __spread$1(clippedRange)), x));
            };
            var xStart, xEnd, yStart, yEnd, clampedYStart, clampedYEnd;
            _a = __read$1([0, sideFlag * gridLength], 2), xStart = _a[0], xEnd = _a[1];
            _b = __read$1(this.getRange(), 2), yStart = _b[0], yEnd = _b[1];
            _c = __read$1([
                Number(scale.convert(yStart, { strict: false })),
                scale.convert(yEnd, { strict: false }) + bandwidth,
            ], 2), clampedYStart = _c[0], clampedYEnd = _c[1];
            clampedYStart = clippedRangeClamper(clampedYStart);
            clampedYEnd = clippedRangeClamper(clampedYEnd);
            _d = __read$1([Number(scale.convert(yStart)), scale.convert(yEnd) + bandwidth], 2), yStart = _d[0], yEnd = _d[1];
            var validRange = !isNaN(clampedYStart) &&
                !isNaN(clampedYEnd) &&
                (yStart === clampedYStart || yEnd === clampedYEnd || clampedYStart !== clampedYEnd) &&
                Math.abs(clampedYEnd - clampedYStart) > 0;
            if (validRange) {
                var reverse = clampedYStart !== Math.min(clampedYStart, clampedYEnd);
                if (reverse) {
                    _e = __read$1([
                        Math.min(clampedYStart, clampedYEnd),
                        Math.max(clampedYStart, clampedYEnd),
                    ], 2), clampedYStart = _e[0], clampedYEnd = _e[1];
                    _f = __read$1([yEnd, yStart], 2), yStart = _f[0], yEnd = _f[1];
                }
            }
            this.isRange = validRange;
            this.startLine = !isNaN(yStart) && strokeWidth > 0 && yStart === clampedYStart;
            this.endLine = !isNaN(yEnd) && strokeWidth > 0 && yEnd === clampedYEnd;
            if (!validRange && !this.startLine && !this.endLine) {
                return false;
            }
            this.data = [clampedYStart, clampedYEnd];
            if (this.label.enabled) {
                var yDirection = direction === ChartAxisDirection.Y;
                var _m = ((_h = labeldDirectionHandling[position]) !== null && _h !== void 0 ? _h : {}).c, c = _m === void 0 ? POSITION_TOP_COORDINATES : _m;
                var _o = c({ yDirection: yDirection, xStart: xStart, xEnd: xEnd, yStart: clampedYStart, yEnd: clampedYEnd }), labelX = _o.x, labelY = _o.y;
                this.labelPoint = {
                    x: labelX,
                    y: labelY,
                };
            }
            return true;
        };
        CrossLine.prototype.updateRangeNode = function () {
            var _a;
            var _b = this, crossLineRange = _b.crossLineRange, sideFlag = _b.sideFlag, gridLength = _b.gridLength, data = _b.data, startLine = _b.startLine, endLine = _b.endLine, isRange = _b.isRange, fill = _b.fill, fillOpacity = _b.fillOpacity, stroke = _b.stroke, strokeWidth = _b.strokeWidth, lineDash = _b.lineDash;
            crossLineRange.x1 = 0;
            crossLineRange.x2 = sideFlag * gridLength;
            crossLineRange.y1 = data[0];
            crossLineRange.y2 = data[1];
            crossLineRange.startLine = startLine;
            crossLineRange.endLine = endLine;
            crossLineRange.isRange = isRange;
            crossLineRange.fill = fill;
            crossLineRange.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
            crossLineRange.stroke = stroke;
            crossLineRange.strokeWidth = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 1;
            crossLineRange.strokeOpacity = (_a = this.strokeOpacity) !== null && _a !== void 0 ? _a : 1;
            crossLineRange.lineDash = lineDash;
        };
        CrossLine.prototype.updateLabel = function () {
            var _a = this, crossLineLabel = _a.crossLineLabel, label = _a.label;
            if (!label.text) {
                return;
            }
            crossLineLabel.fontStyle = label.fontStyle;
            crossLineLabel.fontWeight = label.fontWeight;
            crossLineLabel.fontSize = label.fontSize;
            crossLineLabel.fontFamily = label.fontFamily;
            crossLineLabel.fill = label.color;
            crossLineLabel.text = label.text;
        };
        CrossLine.prototype.positionLabel = function () {
            var _a = this, crossLineLabel = _a.crossLineLabel, _b = _a.labelPoint, _c = _b === void 0 ? {} : _b, _d = _c.x, x = _d === void 0 ? undefined : _d, _e = _c.y, y = _e === void 0 ? undefined : _e, _f = _a.label, parallel = _f.parallel, rotation = _f.rotation, _g = _f.position, position = _g === void 0 ? 'top' : _g, _h = _f.padding, padding = _h === void 0 ? 0 : _h, direction = _a.direction, parallelFlipRotation = _a.parallelFlipRotation, regularFlipRotation = _a.regularFlipRotation;
            if (x === undefined || y === undefined) {
                return;
            }
            var labelRotation = rotation ? normalizeAngle360(toRadians(rotation)) : 0;
            var parallelFlipFlag = !labelRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;
            var regularFlipFlag = !labelRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;
            var autoRotation = parallel ? (parallelFlipFlag * Math.PI) / 2 : regularFlipFlag === -1 ? Math.PI : 0;
            crossLineLabel.rotation = autoRotation + labelRotation;
            crossLineLabel.textBaseline = 'middle';
            crossLineLabel.textAlign = 'center';
            var bbox = this.computeLabelBBox();
            if (!bbox) {
                return;
            }
            var yDirection = direction === ChartAxisDirection.Y;
            var _j = calculateLabelTranslation({ yDirection: yDirection, padding: padding, position: position, bbox: bbox }), xTranslation = _j.xTranslation, yTranslation = _j.yTranslation;
            crossLineLabel.translationX = x + xTranslation;
            crossLineLabel.translationY = y + yTranslation;
        };
        CrossLine.prototype.getZIndex = function (isRange) {
            if (isRange === void 0) { isRange = false; }
            if (isRange) {
                return CrossLine.RANGE_LAYER_ZINDEX;
            }
            return CrossLine.LINE_LAYER_ZINDEX;
        };
        CrossLine.prototype.getRange = function () {
            var _a;
            var _b = this, value = _b.value, range = _b.range, scale = _b.scale;
            var isContinuous = scale instanceof ContinuousScale;
            var _c = __read$1(range !== null && range !== void 0 ? range : [value, undefined], 2), start = _c[0], end = _c[1];
            if (!isContinuous && end === undefined) {
                end = start;
            }
            _a = __read$1([checkDatum(start, isContinuous), checkDatum(end, isContinuous)], 2), start = _a[0], end = _a[1];
            if (isContinuous && start === end) {
                end = undefined;
            }
            if (start === undefined && end !== undefined) {
                start = end;
                end = undefined;
            }
            return [start, end];
        };
        CrossLine.prototype.computeLabelBBox = function () {
            return this.crossLineLabel.computeTransformedBBox();
        };
        CrossLine.prototype.calculatePadding = function (padding, seriesRect) {
            var _a, _b, _c, _d, _e, _f;
            var _g = this, isRange = _g.isRange, startLine = _g.startLine, endLine = _g.endLine;
            if (!isRange && !startLine && !endLine) {
                return;
            }
            var crossLineLabelBBox = this.computeLabelBBox();
            var labelX = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.x;
            var labelY = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.y;
            if (labelX == undefined || labelY == undefined) {
                return;
            }
            var labelWidth = (_a = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.width) !== null && _a !== void 0 ? _a : 0;
            var labelHeight = (_b = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.height) !== null && _b !== void 0 ? _b : 0;
            if (labelX + labelWidth >= seriesRect.x + seriesRect.width) {
                var paddingRight = labelX + labelWidth - (seriesRect.x + seriesRect.width);
                padding.right = ((_c = padding.right) !== null && _c !== void 0 ? _c : 0) >= paddingRight ? padding.right : paddingRight;
            }
            else if (labelX <= seriesRect.x) {
                var paddingLeft = seriesRect.x - labelX;
                padding.left = ((_d = padding.left) !== null && _d !== void 0 ? _d : 0) >= paddingLeft ? padding.left : paddingLeft;
            }
            if (labelY + labelHeight >= seriesRect.y + seriesRect.height) {
                var paddingbottom = labelY + labelHeight - (seriesRect.y + seriesRect.height);
                padding.bottom = ((_e = padding.bottom) !== null && _e !== void 0 ? _e : 0) >= paddingbottom ? padding.bottom : paddingbottom;
            }
            else if (labelY <= seriesRect.y) {
                var paddingTop = seriesRect.y - labelY;
                padding.top = ((_f = padding.top) !== null && _f !== void 0 ? _f : 0) >= paddingTop ? padding.top : paddingTop;
            }
        };
        CrossLine.LINE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_LINE_ZINDEX;
        CrossLine.RANGE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_RANGE_ZINDEX;
        CrossLine.className = 'CrossLine';
        __decorate([
            Validate(OPT_BOOLEAN)
        ], CrossLine.prototype, "enabled", void 0);
        __decorate([
            Validate(OPT_CROSSLINE_TYPE)
        ], CrossLine.prototype, "type", void 0);
        __decorate([
            Validate(OPT_ARRAY(2))
        ], CrossLine.prototype, "range", void 0);
        __decorate([
            Validate(OPT_COLOR_STRING)
        ], CrossLine.prototype, "fill", void 0);
        __decorate([
            Validate(OPT_NUMBER(0, 1))
        ], CrossLine.prototype, "fillOpacity", void 0);
        __decorate([
            Validate(OPT_COLOR_STRING)
        ], CrossLine.prototype, "stroke", void 0);
        __decorate([
            Validate(OPT_NUMBER())
        ], CrossLine.prototype, "strokeWidth", void 0);
        __decorate([
            Validate(OPT_NUMBER(0, 1))
        ], CrossLine.prototype, "strokeOpacity", void 0);
        __decorate([
            Validate(OPT_LINE_DASH)
        ], CrossLine.prototype, "lineDash", void 0);
        return CrossLine;
    }());

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (undefined && undefined.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    var __values = (undefined && undefined.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    function chartType(options) {
        if (isAgCartesianChartOptions(options)) {
            return 'cartesian';
        }
        else if (isAgPolarChartOptions(options)) {
            return 'polar';
        }
        else if (isAgHierarchyChartOptions(options)) {
            return 'hierarchy';
        }
        throw new Error('AG Chart - unknown type of chart for options with type: ' + options.type);
    }
    /**
     * Factory for creating and updating instances of AgChartInstance.
     *
     * @docsInterface
     */
    var AgChart = /** @class */ (function () {
        function AgChart() {
        }
        /**
         * Create a new `AgChartInstance` based upon the given configuration options.
         */
        AgChart.create = function (options) {
            return AgChartInternal.createOrUpdate(options);
        };
        /**
         * Update an existing `AgChartInstance`. Options provided should be complete and not
         * partial.
         *
         * **NOTE**: As each call could trigger a chart redraw, multiple calls to update options in
         * quick succession could result in undesirable flickering, so callers should batch up and/or
         * debounce changes to avoid unintended partial update renderings.
         */
        AgChart.update = function (chart, options) {
            if (!AgChartInstanceProxy.isInstance(chart)) {
                throw new Error('AG Charts - invalid chart reference passed');
            }
            AgChartInternal.createOrUpdate(options, chart);
        };
        /**
         * Update an existing `AgChartInstance` by applying a partial set of option changes.
         *
         * **NOTE**: As each call could trigger a chart redraw, each individual delta options update
         * should leave the chart in a valid options state. Also, multiple calls to update options in
         * quick succession could result in undesirable flickering, so callers should batch up and/or
         * debounce changes to avoid unintended partial update renderings.
         */
        AgChart.updateDelta = function (chart, deltaOptions) {
            if (!AgChartInstanceProxy.isInstance(chart)) {
                throw new Error('AG Charts - invalid chart reference passed');
            }
            return AgChartInternal.updateUserDelta(chart, deltaOptions);
        };
        /**
         * Initiate a browser-based image download for the given `AgChartInstance`s rendering.
         */
        AgChart.download = function (chart, options) {
            if (!(chart instanceof AgChartInstanceProxy)) {
                throw new Error('AG Charts - invalid chart reference passed');
            }
            return AgChartInternal.download(chart, options);
        };
        return AgChart;
    }());
    /**
     * Proxy class, to allow library users to keep a stable reference to their chart, even if we need
     * to switch concrete class (e.g. when switching between CartesianChart vs. PolarChart).
     */
    var AgChartInstanceProxy = /** @class */ (function () {
        function AgChartInstanceProxy(chart) {
            this.chart = chart;
        }
        AgChartInstanceProxy.isInstance = function (x) {
            var _a, _b;
            if (x instanceof AgChartInstanceProxy) {
                // Simple case.
                return true;
            }
            if (((_a = x.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'AgChartInstanceProxy' && x.chart != null) {
                // instanceof can fail if mixing bundles (e.g. grid all-modules vs. standalone).
                return true;
            }
            var signatureProps = Object.keys((_b = x.constructor) === null || _b === void 0 ? void 0 : _b.prototype);
            var heuristicTypeCheck = Object.keys(AgChartInstanceProxy.prototype).every(function (prop) {
                return signatureProps.includes(prop);
            });
            if (heuristicTypeCheck && x.chart != null) {
                // minimised code case - the constructor name is mangled but prototype names are not :P
                return true;
            }
            return false;
        };
        AgChartInstanceProxy.prototype.getOptions = function () {
            return this.chart.getOptions();
        };
        AgChartInstanceProxy.prototype.destroy = function () {
            this.chart.destroy();
        };
        return AgChartInstanceProxy;
    }());
    var AgChartInternal = /** @class */ (function () {
        function AgChartInternal() {
        }
        AgChartInternal.createOrUpdate = function (userOptions, proxy) {
            var _this = this;
            debug('>>> createOrUpdate() user options', userOptions);
            var mixinOpts = {};
            if (AgChartInternal.DEBUG() === true) {
                mixinOpts['debug'] = true;
            }
            var overrideDevicePixelRatio = userOptions.overrideDevicePixelRatio;
            delete userOptions['overrideDevicePixelRatio'];
            var processedOptions = prepareOptions(userOptions, mixinOpts);
            var chart = proxy === null || proxy === void 0 ? void 0 : proxy.chart;
            if (chart == null || chartType(userOptions) !== chartType(chart.processedOptions)) {
                chart = AgChartInternal.createChartInstance(processedOptions, overrideDevicePixelRatio, chart);
            }
            if (proxy == null) {
                proxy = new AgChartInstanceProxy(chart);
            }
            else {
                proxy.chart = chart;
            }
            var chartToUpdate = chart;
            chartToUpdate.queuedUserOptions.push(userOptions);
            var dequeue = function () {
                // If there are a lot of update calls, `requestFactoryUpdate()` may skip callbacks,
                // so we need to remove all queue items up to the last successfully applied item.
                var queuedOptionsIdx = chartToUpdate.queuedUserOptions.indexOf(userOptions);
                chartToUpdate.queuedUserOptions.splice(0, queuedOptionsIdx);
            };
            chartToUpdate.requestFactoryUpdate(function () { return __awaiter(_this, void 0, void 0, function () {
                var deltaOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Chart destroyed, skip processing.
                            if (chartToUpdate.destroyed)
                                return [2 /*return*/];
                            deltaOptions = jsonDiff(chartToUpdate.processedOptions, processedOptions);
                            if (deltaOptions == null) {
                                dequeue();
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, AgChartInternal.updateDelta(chartToUpdate, deltaOptions, userOptions)];
                        case 1:
                            _a.sent();
                            dequeue();
                            return [2 /*return*/];
                    }
                });
            }); });
            return proxy;
        };
        AgChartInternal.updateUserDelta = function (proxy, deltaOptions) {
            var _a;
            var chart = proxy.chart, queuedUserOptions = proxy.chart.queuedUserOptions;
            var lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : chart.userOptions;
            var userOptions = jsonMerge([lastUpdateOptions, deltaOptions]);
            debug('>>> updateUserDelta() user delta', deltaOptions);
            debug('base options', lastUpdateOptions);
            AgChartInternal.createOrUpdate(userOptions, proxy);
        };
        /**
         * Returns the content of the current canvas as an image.
         * @param opts The download options including `width` and `height` of the image as well as `fileName` and `fileFormat`.
         */
        AgChartInternal.download = function (proxy, opts) {
            var chart = proxy.chart;
            var _a = opts || {}, width = _a.width, height = _a.height, fileName = _a.fileName, fileFormat = _a.fileFormat;
            var currentWidth = chart.width;
            var currentHeight = chart.height;
            var unchanged = (width === undefined && height === undefined) ||
                (chart.scene.canvas.pixelRatio === 1 && currentWidth === width && currentHeight === height);
            if (unchanged) {
                chart.scene.download(fileName, fileFormat);
                return;
            }
            width = width !== null && width !== void 0 ? width : currentWidth;
            height = height !== null && height !== void 0 ? height : currentHeight;
            var options = __assign(__assign({}, chart.userOptions), { container: document.createElement('div'), width: width,
                height: height, autoSize: false, overrideDevicePixelRatio: 1 });
            var clonedChart = AgChartInternal.createOrUpdate(options);
            clonedChart.chart.waitForUpdate().then(function () {
                clonedChart.chart.scene.download(fileName, fileFormat);
                clonedChart.destroy();
            });
        };
        AgChartInternal.createChartInstance = function (options, overrideDevicePixelRatio, oldChart) {
            var transferableResource = oldChart === null || oldChart === void 0 ? void 0 : oldChart.destroy({ keepTransferableResources: true });
            if (isAgCartesianChartOptions(options)) {
                return new CartesianChart(document, overrideDevicePixelRatio, transferableResource);
            }
            else if (isAgHierarchyChartOptions(options)) {
                return new HierarchyChart(document, overrideDevicePixelRatio, transferableResource);
            }
            else if (isAgPolarChartOptions(options)) {
                return new PolarChart(document, overrideDevicePixelRatio, transferableResource);
            }
            throw new Error("AG Charts - couldn't apply configuration, check type of options: " + options['type']);
        };
        AgChartInternal.updateDelta = function (chart, processedOptions, userOptions) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (processedOptions.type == null) {
                                processedOptions = __assign(__assign({}, processedOptions), { type: chart.processedOptions.type || optionsType(processedOptions) });
                            }
                            return [4 /*yield*/, chart.awaitUpdateCompletion()];
                        case 1:
                            _a.sent();
                            if (chart.destroyed)
                                return [2 /*return*/];
                            debug('applying delta', processedOptions);
                            applyChartOptions(chart, processedOptions, userOptions);
                            return [2 /*return*/];
                    }
                });
            });
        };
        AgChartInternal.DEBUG = function () { var _a; return (_a = windowValue('agChartsDebug')) !== null && _a !== void 0 ? _a : false; };
        return AgChartInternal;
    }());
    function debug(message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if ([true, 'opts'].includes(AgChartInternal.DEBUG())) {
            console.log.apply(console, __spread([message], optionalParams));
        }
    }
    function applyChartOptions(chart, processedOptions, userOptions) {
        var _a;
        if (isAgCartesianChartOptions(processedOptions)) {
            applyOptionValues(chart, processedOptions, {
                skip: ['type', 'data', 'series', 'axes', 'autoSize', 'listeners', 'theme'],
            });
        }
        else if (isAgPolarChartOptions(processedOptions)) {
            applyOptionValues(chart, processedOptions, {
                skip: ['type', 'data', 'series', 'autoSize', 'listeners', 'theme'],
            });
        }
        else if (isAgHierarchyChartOptions(processedOptions)) {
            applyOptionValues(chart, processedOptions, {
                skip: ['type', 'data', 'series', 'autoSize', 'listeners', 'theme'],
            });
        }
        else {
            throw new Error("AG Charts - couldn't apply configuration, check type of options and chart: " + processedOptions['type']);
        }
        var forceNodeDataRefresh = false;
        if (processedOptions.series && processedOptions.series.length > 0) {
            applySeries(chart, processedOptions);
            forceNodeDataRefresh = true;
        }
        if (isAgCartesianChartOptions(processedOptions) && processedOptions.axes) {
            var axesPresent = applyAxes(chart, processedOptions);
            if (axesPresent) {
                forceNodeDataRefresh = true;
            }
        }
        var seriesOpts = processedOptions.series;
        var seriesDataUpdate = !!processedOptions.data || (seriesOpts === null || seriesOpts === void 0 ? void 0 : seriesOpts.some(function (s) { return s.data != null; }));
        var otherRefreshUpdate = processedOptions.legend || processedOptions.title || processedOptions.subtitle;
        forceNodeDataRefresh = forceNodeDataRefresh || seriesDataUpdate || !!otherRefreshUpdate;
        if (processedOptions.data) {
            chart.data = processedOptions.data;
        }
        // Needs to be done last to avoid overrides by width/height properties.
        if (processedOptions.autoSize != null) {
            chart.autoSize = processedOptions.autoSize;
        }
        if (processedOptions.listeners) {
            registerListeners(chart, processedOptions.listeners);
        }
        if ((_a = processedOptions.legend) === null || _a === void 0 ? void 0 : _a.listeners) {
            Object.assign(chart.legend.listeners, processedOptions.legend.listeners);
        }
        chart.processedOptions = jsonMerge([chart.processedOptions || {}, processedOptions], noDataCloneMergeOptions);
        chart.userOptions = jsonMerge([chart.userOptions || {}, userOptions], noDataCloneMergeOptions);
        var updateType = forceNodeDataRefresh ? ChartUpdateType.PROCESS_DATA : ChartUpdateType.PERFORM_LAYOUT;
        debug('chart update type', { updateType: ChartUpdateType[updateType] });
        chart.update(updateType, { forceNodeDataRefresh: forceNodeDataRefresh });
    }
    function applySeries(chart, options) {
        var optSeries = options.series;
        if (!optSeries) {
            return;
        }
        var matchingTypes = chart.series.length === optSeries.length && chart.series.every(function (s, i) { var _a; return s.type === ((_a = optSeries[i]) === null || _a === void 0 ? void 0 : _a.type); });
        // Try to optimise series updates if series count and types didn't change.
        if (matchingTypes) {
            chart.series.forEach(function (s, i) {
                var _a, _b;
                var previousOpts = ((_b = (_a = chart.processedOptions) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b[i]) || {};
                var seriesDiff = jsonDiff(previousOpts, optSeries[i] || {});
                if (!seriesDiff) {
                    return;
                }
                debug("applying series diff idx " + i, seriesDiff);
                applySeriesValues(s, seriesDiff, { path: "series[" + i + "]" });
                s.markNodeDataDirty();
            });
            return;
        }
        chart.series = createSeries(optSeries);
    }
    function applyAxes(chart, options) {
        var optAxes = options.axes;
        if (!optAxes) {
            return false;
        }
        var matchingTypes = chart.axes.length === optAxes.length && chart.axes.every(function (a, i) { return a.type === optAxes[i].type; });
        // Try to optimise series updates if series count and types didn't change.
        if (matchingTypes) {
            var oldOpts_1 = chart.processedOptions;
            if (isAgCartesianChartOptions(oldOpts_1)) {
                chart.axes.forEach(function (a, i) {
                    var _a;
                    var previousOpts = ((_a = oldOpts_1.axes) === null || _a === void 0 ? void 0 : _a[i]) || {};
                    var axisDiff = jsonDiff(previousOpts, optAxes[i]);
                    debug("applying axis diff idx " + i, axisDiff);
                    var path = "axes[" + i + "]";
                    var skip = ['axes[].type'];
                    applyOptionValues(a, axisDiff, { path: path, skip: skip });
                });
                return true;
            }
        }
        chart.axes = createAxis(optAxes);
        return true;
    }
    function createSeries(options) {
        var e_1, _a;
        var series = [];
        var index = 0;
        try {
            for (var _b = __values(options || []), _c = _b.next(); !_c.done; _c = _b.next()) {
                var seriesOptions = _c.value;
                var path = "series[" + index++ + "]";
                switch (seriesOptions.type) {
                    case 'area':
                        series.push(applySeriesValues(new AreaSeries(), seriesOptions, { path: path }));
                        break;
                    case 'bar':
                    // fall-through - bar and column are synonyms.
                    case 'column':
                        series.push(applySeriesValues(new BarSeries(), seriesOptions, { path: path }));
                        break;
                    case 'histogram':
                        series.push(applySeriesValues(new HistogramSeries(), seriesOptions, { path: path }));
                        break;
                    case 'line':
                        series.push(applySeriesValues(new LineSeries(), seriesOptions, { path: path }));
                        break;
                    case 'scatter':
                        series.push(applySeriesValues(new ScatterSeries(), seriesOptions, { path: path }));
                        break;
                    case 'pie':
                        series.push(applySeriesValues(new PieSeries(), seriesOptions, { path: path }));
                        break;
                    case 'treemap':
                        series.push(applySeriesValues(new TreemapSeries(), seriesOptions, { path: path }));
                        break;
                    default:
                        throw new Error('AG Charts - unknown series type: ' + seriesOptions.type);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return series;
    }
    function createAxis(options) {
        var e_2, _a;
        var axes = [];
        var index = 0;
        try {
            for (var _b = __values(options || []), _c = _b.next(); !_c.done; _c = _b.next()) {
                var axisOptions = _c.value;
                var path = "axes[" + index++ + "]";
                var skip = ['axes[].type'];
                switch (axisOptions.type) {
                    case 'number':
                        axes.push(applyOptionValues(new NumberAxis(), axisOptions, { path: path, skip: skip }));
                        break;
                    case LogAxis.type:
                        axes.push(applyOptionValues(new LogAxis(), axisOptions, { path: path, skip: skip }));
                        break;
                    case CategoryAxis.type:
                        axes.push(applyOptionValues(new CategoryAxis(), axisOptions, { path: path, skip: skip }));
                        break;
                    case GroupedCategoryAxis.type:
                        axes.push(applyOptionValues(new GroupedCategoryAxis(), axisOptions, { path: path, skip: skip }));
                        break;
                    case TimeAxis.type:
                        axes.push(applyOptionValues(new TimeAxis(), axisOptions, { path: path, skip: skip }));
                        break;
                    default:
                        throw new Error('AG Charts - unknown axis type: ' + axisOptions['type']);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return axes;
    }
    function registerListeners(source, listeners) {
        source.clearEventListeners();
        for (var property in listeners) {
            source.addEventListener(property, listeners[property]);
        }
    }
    var JSON_APPLY_OPTIONS = {
        constructors: {
            title: Caption,
            subtitle: Caption,
            shadow: DropShadow,
            innerCircle: DoughnutInnerCircle,
            'axes[].crossLines[]': CrossLine,
            'series[].innerLabels[]': DoughnutInnerLabel,
        },
        allowedTypes: {
            'legend.pagination.marker.shape': ['primitive', 'function'],
            'series[].marker.shape': ['primitive', 'function'],
            'axis[].tick.count': ['primitive', 'class-instance'],
        },
    };
    function applyOptionValues(target, options, _a) {
        var _b = _a === void 0 ? {} : _a, skip = _b.skip, path = _b.path;
        var applyOpts = __assign(__assign(__assign({}, JSON_APPLY_OPTIONS), { skip: skip }), (path ? { path: path } : {}));
        return jsonApply(target, options, applyOpts);
    }
    function applySeriesValues(target, options, _a) {
        var path = (_a === void 0 ? {} : _a).path;
        var skip = ['series[].listeners'];
        var ctrs = (JSON_APPLY_OPTIONS === null || JSON_APPLY_OPTIONS === void 0 ? void 0 : JSON_APPLY_OPTIONS.constructors) || {};
        var seriesTypeOverrides = {
            constructors: __assign(__assign({}, ctrs), { title: target.type === 'pie' ? PieTitle : ctrs['title'] }),
        };
        var applyOpts = __assign(__assign(__assign(__assign({}, JSON_APPLY_OPTIONS), seriesTypeOverrides), { skip: __spread(['series[].type'], (skip || [])) }), (path ? { path: path } : {}));
        var result = jsonApply(target, options, applyOpts);
        var listeners = options === null || options === void 0 ? void 0 : options.listeners;
        if (listeners != null) {
            registerListeners(target, listeners);
        }
        return result;
    }

    // DO NOT UPDATE MANUALLY: Generated from script during build time
    var VERSION = '7.0.0';

    var integratedChartsScene = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Caption: Caption,
        ClipRect: ClipRect,
        DropShadow: DropShadow,
        Group: Group,
        Scene: Scene,
        Node: Node,
        get PointerEvents () { return PointerEvents; },
        Selection: Selection,
        Arc: Arc,
        Line: Line,
        Path: Path,
        Rect: Rect,
        Sector: Sector,
        Shape: Shape,
        Text: Text,
        BandScale: BandScale,
        LinearScale: LinearScale,
        toRadians: toRadians,
        Marker: Marker,
        Circle: Circle,
        Diamond: Diamond,
        Square: Square,
        HdpiCanvas: HdpiCanvas
    });

    var integratedChartsTheme = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getChartTheme: getChartTheme,
        themes: themes,
        ChartTheme: ChartTheme
    });

    var sparklinesScale = /*#__PURE__*/Object.freeze({
        __proto__: null,
        TimeScale: TimeScale,
        BandScale: BandScale,
        LinearScale: LinearScale
    });

    var sparklinesUtil = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ticks: generateTicks,
        extent: extent,
        tickFormat: tickFormat,
        Color: Color,
        isString: isString,
        isStringObject: isStringObject,
        isDate: isDate,
        isDiscrete: isDiscrete,
        isContinuous: isContinuous,
        checkDatum: checkDatum,
        isNumber: isNumber,
        resetIds: resetIds,
        createId: createId,
        Padding: Padding
    });

    exports.AgChart = AgChart;
    exports.Marker = Marker;
    exports.VERSION = VERSION;
    exports._Scale = sparklinesScale;
    exports._Scene = integratedChartsScene;
    exports._Theme = integratedChartsTheme;
    exports._Util = sparklinesUtil;
    exports.__FORCE_MODULE_DETECTION = __FORCE_MODULE_DETECTION;
    exports.time = index;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
